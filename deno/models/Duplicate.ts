/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import {
    DuplicateUnavailableReason,
    DuplicateUnavailableReasonFromJSON,
    DuplicateUnavailableReasonFromJSONTyped,
    DuplicateUnavailableReasonToJSON,
} from './index.ts';

/**
 * 
 * @export
 * @interface Duplicate
 */
export interface Duplicate {
    /**
     * ID of this duplicate listing
     * @type {string}
     * @memberof Duplicate
     */
    id?: string;
    /**
     * ID of the publisher site where the duplicate listing appears
     * @type {string}
     * @memberof Duplicate
     */
    publisherId?: string;
    /**
     * ID of the location the duplicate listing is for
     * @type {string}
     * @memberof Duplicate
     */
    locationId?: string;
    /**
     * URL of the duplicate listing
     * @type {string}
     * @memberof Duplicate
     */
    url?: string;
    /**
     * The business name that appears on the duplicate listing
     * @type {string}
     * @memberof Duplicate
     */
    name?: string;
    /**
     * The address that appears on the duplicate listing
     * @type {string}
     * @memberof Duplicate
     */
    address?: string;
    /**
     * The phone number that appears on the duplicate listing
     * @type {string}
     * @memberof Duplicate
     */
    phone?: string;
    /**
     * The latitude of the location, as shown on the duplicate listing (e.g., in a map view)
     * @type {string}
     * @memberof Duplicate
     */
    latitude?: string;
    /**
     * The longitude of the location, as shown on the duplicate listing (e.g., in a map view)
     * @type {string}
     * @memberof Duplicate
     */
    longitude?: string;
    /**
     * The status of the duplicate. Note: the `DELETED` status is only available in webhook responses.
     * @type {string}
     * @memberof Duplicate
     */
    status?: DuplicateStatusEnum;
    /**
     * The publisher's suppression type
     * @type {string}
     * @memberof Duplicate
     */
    suppressionType?: DuplicateSuppressionTypeEnum;
    /**
     * List of reasons why suppression is unavailable for this duplicate listing (will be empty unless **`status`** is `UNAVAILABLE`)
     * @type {Array<DuplicateUnavailableReason>}
     * @memberof Duplicate
     */
    unavailableReasons?: Array<DuplicateUnavailableReason>;
}

/**
* @export
* @enum {string}
*/
export enum DuplicateStatusEnum {
    PossibleDuplicate = 'POSSIBLE_DUPLICATE',
    SuppressionRequested = 'SUPPRESSION_REQUESTED',
    Suppressed = 'SUPPRESSED',
    Unavailable = 'UNAVAILABLE',
    Deleted = 'DELETED'
}/**
* @export
* @enum {string}
*/
export enum DuplicateSuppressionTypeEnum {
    Redirect = 'REDIRECT',
    Error = 'ERROR',
    Merge = 'MERGE',
    RemoveFromSearch = 'REMOVE_FROM_SEARCH',
    Mobile = 'MOBILE',
    SearchPage = 'SEARCH_PAGE'
}

export function DuplicateFromJSON(json: any): Duplicate {
    return DuplicateFromJSONTyped(json, false);
}

export function DuplicateFromJSONTyped(json: any, ignoreDiscriminator: boolean): Duplicate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'publisherId': !exists(json, 'publisherId') ? undefined : json['publisherId'],
        'locationId': !exists(json, 'locationId') ? undefined : json['locationId'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
        'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'suppressionType': !exists(json, 'suppressionType') ? undefined : json['suppressionType'],
        'unavailableReasons': !exists(json, 'unavailableReasons') ? undefined : ((json['unavailableReasons'] as Array<any>).map(DuplicateUnavailableReasonFromJSON)),
    };
}

export function DuplicateToJSON(value?: Duplicate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'publisherId': value.publisherId,
        'locationId': value.locationId,
        'url': value.url,
        'name': value.name,
        'address': value.address,
        'phone': value.phone,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'status': value.status,
        'suppressionType': value.suppressionType,
        'unavailableReasons': value.unavailableReasons === undefined ? undefined : ((value.unavailableReasons as Array<any>).map(DuplicateUnavailableReasonToJSON)),
    };
}


