/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import {
    ContentListCostOption,
    ContentListCostOptionFromJSON,
    ContentListCostOptionFromJSONTyped,
    ContentListCostOptionToJSON,
} from './index.ts';

/**
 * 
 * @export
 * @interface ContentListCost
 */
export interface ContentListCost {
    /**
     * 
     * @type {string}
     * @memberof ContentListCost
     */
    type?: ContentListCostTypeEnum;
    /**
     * Price in USD, e.g., 9.50. Must be greater than or equal to 0.0 and less than or equal to 1000000.00.
     * @type {string}
     * @memberof ContentListCost
     */
    price?: string;
    /**
     * e.g., Per Gallon, Each.
     * @type {string}
     * @memberof ContentListCost
     */
    unit?: string;
    /**
     * Specified only if `type` is `RANGE`. In that case, this Cost represents a `price` range from `price` to `rangeTo`. Must be greater than `price` and less than or equal to 1000000.00.
     * @type {string}
     * @memberof ContentListCost
     */
    rangeTo?: string;
    /**
     * Specified only if `type` is `OTHER`. User-entered text, e.g., Market Price.
     * @type {string}
     * @memberof ContentListCost
     */
    other?: string;
    /**
     * Add-ons or product variations that affect the price.
     * @type {Array<ContentListCostOption>}
     * @memberof ContentListCost
     */
    options?: Array<ContentListCostOption>;
}

/**
* @export
* @enum {string}
*/
export enum ContentListCostTypeEnum {
    Price = 'PRICE',
    Range = 'RANGE',
    None = 'NONE',
    Other = 'OTHER'
}

export function ContentListCostFromJSON(json: any): ContentListCost {
    return ContentListCostFromJSONTyped(json, false);
}

export function ContentListCostFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentListCost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'unit': !exists(json, 'unit') ? undefined : json['unit'],
        'rangeTo': !exists(json, 'rangeTo') ? undefined : json['rangeTo'],
        'other': !exists(json, 'other') ? undefined : json['other'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(ContentListCostOptionFromJSON)),
    };
}

export function ContentListCostToJSON(value?: ContentListCost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'price': value.price,
        'unit': value.unit,
        'rangeTo': value.rangeTo,
        'other': value.other,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(ContentListCostOptionToJSON)),
    };
}


