/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
/**
 * Contains the address of the entity (or where the entity is located)
 * 
 * Must be a valid address
 * Cannot be a P.O. Box
 * 
 * If the entity is an `event`, either an **`address`** value or a **`linkedLocation`** value can be provided.
 * @export
 * @interface AtmWriteAllOfAddress
 */
export interface AtmWriteAllOfAddress {
    /**
     * The city the entity (or the entity's location) is in
     * 
     * 
     * Cannot Include:
     * * a URL or domain name
     * * a digit
     * @type {string}
     * @memberof AtmWriteAllOfAddress
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AtmWriteAllOfAddress
     */
    countryCode?: string;
    /**
     * Provides additional information to help consumers get to the entity. This string appears along with the entity's address (e.g., `In Menlo Mall, 3rd Floor`).
     * It may also be used in conjunction with a hidden address (i.e., when **`addressHidden`** is `true`) to give consumers information about where the entity can be found (e.g., `Servicing the New York area`).
     * @type {string}
     * @memberof AtmWriteAllOfAddress
     */
    extraDescription?: string;
    /**
     * 
     * Cannot Include:
     * * a URL or domain name
     * @type {string}
     * @memberof AtmWriteAllOfAddress
     */
    line1?: string;
    /**
     * 
     * Cannot Include:
     * * a URL or domain name
     * @type {string}
     * @memberof AtmWriteAllOfAddress
     */
    line2?: string;
    /**
     * 
     * Cannot Include:
     * * a URL or domain name
     * @type {string}
     * @memberof AtmWriteAllOfAddress
     */
    line3?: string;
    /**
     * The entity's postal code. The postal code must be valid for the entity's country. Cannot include a URL or domain name.
     * 
     * 
     * Cannot Include:
     * * a URL or domain name
     * @type {string}
     * @memberof AtmWriteAllOfAddress
     */
    postalCode?: string;
    /**
     * The name of the entity's region or state.
     * 
     * 
     * Cannot Include:
     * * a URL or domain name
     * @type {string}
     * @memberof AtmWriteAllOfAddress
     */
    region?: string;
    /**
     * The name of the entity's sublocality
     * 
     * 
     * Cannot Include:
     * * a URL or domain name
     * @type {string}
     * @memberof AtmWriteAllOfAddress
     */
    sublocality?: string;
}

export function AtmWriteAllOfAddressFromJSON(json: any): AtmWriteAllOfAddress {
    return AtmWriteAllOfAddressFromJSONTyped(json, false);
}

export function AtmWriteAllOfAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): AtmWriteAllOfAddress {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'city': !exists(json, 'city') ? undefined : json['city'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'extraDescription': !exists(json, 'extraDescription') ? undefined : json['extraDescription'],
        'line1': !exists(json, 'line1') ? undefined : json['line1'],
        'line2': !exists(json, 'line2') ? undefined : json['line2'],
        'line3': !exists(json, 'line3') ? undefined : json['line3'],
        'postalCode': !exists(json, 'postalCode') ? undefined : json['postalCode'],
        'region': !exists(json, 'region') ? undefined : json['region'],
        'sublocality': !exists(json, 'sublocality') ? undefined : json['sublocality'],
    };
}

export function AtmWriteAllOfAddressToJSON(value?: AtmWriteAllOfAddress | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'city': value.city,
        'countryCode': value.countryCode,
        'extraDescription': value.extraDescription,
        'line1': value.line1,
        'line2': value.line2,
        'line3': value.line3,
        'postalCode': value.postalCode,
        'region': value.region,
        'sublocality': value.sublocality,
    };
}


