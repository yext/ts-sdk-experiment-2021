/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import {
    EntityTypes,
    EntityTypesFromJSON,
    EntityTypesFromJSONTyped,
    EntityTypesToJSON,
} from './index.ts';

/**
 * A Custom Field validation object, describing validation rules when a Custom Field value is set or updated.
 * @export
 * @interface Validation
 */
export interface Validation {
    /**
     * Minimum character length.
     * @type {number}
     * @memberof Validation
     */
    minCharLength?: number;
    /**
     * Maximum character length.
     * @type {number}
     * @memberof Validation
     */
    maxCharLength?: number;
    /**
     * Minimum item count.
     * @type {number}
     * @memberof Validation
     */
    minItemCount?: number;
    /**
     * Maximum item count.
     * @type {number}
     * @memberof Validation
     */
    maxItemCount?: number;
    /**
     * Minimum value.
     * @type {number}
     * @memberof Validation
     */
    minValue?: number;
    /**
     * Maximum value.
     * @type {number}
     * @memberof Validation
     */
    maxValue?: number;
    /**
     * Minimum date, accepted as 'YYYY-MM-DD'.
     * @type {string}
     * @memberof Validation
     */
    minDate?: string;
    /**
     * Maximum date, accepted as 'YYYY-MM-DD'.
     * @type {string}
     * @memberof Validation
     */
    maxDate?: string;
    /**
     * Aspect ratio of a photo.
     * @type {string}
     * @memberof Validation
     */
    aspectRatio?: ValidationAspectRatioEnum;
    /**
     * Minimum photo width, in pixels.
     * @type {number}
     * @memberof Validation
     */
    minWidth?: number;
    /**
     * Minimum photo height, in pixels.
     * @type {number}
     * @memberof Validation
     */
    minHeight?: number;
    /**
     * if **`type`** is `ENTITY_LIST`, the types of entities that the field can contain.
     * @type {Array<EntityTypes>}
     * @memberof Validation
     */
    entityTypes?: Array<EntityTypes>;
    /**
     * if **`type`** is `RICH_TEXT`, the types of text formats that the field can contain.
     * @type {Set<string>}
     * @memberof Validation
     */
    richTextFormats?: Set<ValidationRichTextFormatsEnum>;
}

/**
* @export
* @enum {string}
*/
export enum ValidationAspectRatioEnum {
    Unconstrained = 'UNCONSTRAINED',
    _11 = '1:1',
    _43 = '4:3',
    _32 = '3:2',
    _53 = '5:3',
    _169 = '16:9',
    _31 = '3:1',
    _23 = '2:3',
    _57 = '5:7',
    _45 = '4:5',
    _41 = '4:1'
}/**
* @export
* @enum {string}
*/
export enum ValidationRichTextFormatsEnum {
    Bold = 'bold',
    Italics = 'italics',
    Underline = 'underline',
    BulletedList = 'bulletedList',
    NumberedList = 'numberedList',
    Hyperlink = 'hyperlink'
}

export function ValidationFromJSON(json: any): Validation {
    return ValidationFromJSONTyped(json, false);
}

export function ValidationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Validation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'minCharLength': !exists(json, 'minCharLength') ? undefined : json['minCharLength'],
        'maxCharLength': !exists(json, 'maxCharLength') ? undefined : json['maxCharLength'],
        'minItemCount': !exists(json, 'minItemCount') ? undefined : json['minItemCount'],
        'maxItemCount': !exists(json, 'maxItemCount') ? undefined : json['maxItemCount'],
        'minValue': !exists(json, 'minValue') ? undefined : json['minValue'],
        'maxValue': !exists(json, 'maxValue') ? undefined : json['maxValue'],
        'minDate': !exists(json, 'minDate') ? undefined : json['minDate'],
        'maxDate': !exists(json, 'maxDate') ? undefined : json['maxDate'],
        'aspectRatio': !exists(json, 'aspectRatio') ? undefined : json['aspectRatio'],
        'minWidth': !exists(json, 'minWidth') ? undefined : json['minWidth'],
        'minHeight': !exists(json, 'minHeight') ? undefined : json['minHeight'],
        'entityTypes': !exists(json, 'entityTypes') ? undefined : ((json['entityTypes'] as Array<any>).map(EntityTypesFromJSON)),
        'richTextFormats': !exists(json, 'richTextFormats') ? undefined : json['richTextFormats'],
    };
}

export function ValidationToJSON(value?: Validation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'minCharLength': value.minCharLength,
        'maxCharLength': value.maxCharLength,
        'minItemCount': value.minItemCount,
        'maxItemCount': value.maxItemCount,
        'minValue': value.minValue,
        'maxValue': value.maxValue,
        'minDate': value.minDate,
        'maxDate': value.maxDate,
        'aspectRatio': value.aspectRatio,
        'minWidth': value.minWidth,
        'minHeight': value.minHeight,
        'entityTypes': value.entityTypes === undefined ? undefined : ((value.entityTypes as Array<any>).map(EntityTypesToJSON)),
        'richTextFormats': value.richTextFormats,
    };
}


