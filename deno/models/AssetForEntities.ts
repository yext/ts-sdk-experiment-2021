/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface AssetForEntities
 */
export interface AssetForEntities {
    /**
     * The type of asset-to-entity mapping:
     * 
     * * `NO_ENTITIES`: Not available to any entity.
     * * `ALL_ENTITIES`: Available to all entities.
     * * `FOLDER`: Available to all entities in a specified folder.
     * * `ENTITIES`: Available to entities with the IDs you specify.
     * @type {string}
     * @memberof AssetForEntities
     */
    mappingType: string;
    /**
     * The *external* ID of the folder containing the entities this asset can be used for.
     * 
     * Optional - can only be set if **`mappingType`** = `FOLDER`.
     * @type {string}
     * @memberof AssetForEntities
     */
    folderId?: string;
    /**
     * The *external* IDs of the entities this asset can be used for.
     * 
     * Optional - can only be set if **`mappingType`** = `ENTITIES`.
     * @type {Array<string>}
     * @memberof AssetForEntities
     */
    entityIds?: Array<string>;
    /**
     * The *external* IDs of the labels given to the entities this asset can be used for.
     * 
     * Note that these labels are NOT asset labels. They are entity labels associated with particular entities in the Knowledge Manager.
     * 
     * Optional - can only be set if **`mappingType`** = `FOLDER` or `ALL_ENTITIES`.
     * @type {Array<string>}
     * @memberof AssetForEntities
     */
    labelIds?: Array<string>;
    /**
     * The operator on the labels in **`labelIds`** (i.e., whether the asset can be used on entities with all (`AND`) or any (`OR`) of the labels specified).
     * 
     * Optional - can only be set if **`mappingType`** = `FOLDER` or `ALL_ENTITIES`.
     * @type {string}
     * @memberof AssetForEntities
     */
    labelOperator?: AssetForEntitiesLabelOperatorEnum;
}

/**
* @export
* @enum {string}
*/
export enum AssetForEntitiesLabelOperatorEnum {
    And = 'AND',
    Or = 'OR'
}

export function AssetForEntitiesFromJSON(json: any): AssetForEntities {
    return AssetForEntitiesFromJSONTyped(json, false);
}

export function AssetForEntitiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssetForEntities {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mappingType': json['mappingType'],
        'folderId': !exists(json, 'folderId') ? undefined : json['folderId'],
        'entityIds': !exists(json, 'entityIds') ? undefined : json['entityIds'],
        'labelIds': !exists(json, 'labelIds') ? undefined : json['labelIds'],
        'labelOperator': !exists(json, 'labelOperator') ? undefined : json['labelOperator'],
    };
}

export function AssetForEntitiesToJSON(value?: AssetForEntities | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mappingType': value.mappingType,
        'folderId': value.folderId,
        'entityIds': value.entityIds,
        'labelIds': value.labelIds,
        'labelOperator': value.labelOperator,
    };
}


