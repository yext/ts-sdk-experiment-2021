/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface FieldAllOf
 */
export interface FieldAllOf {
    /**
     * 
     * ID that should be used when referencing the field in API calls. This ID will also serve as the Custom Field's key in our upcoming Entities API endpoints.
     * Note that in Locations endpoints, Custom Fields are still referenced by their numeric **`id`**, which can be obtained by calling the Custom Fields: List endpoint with a **`v`** param before `20180809`.
     * (For Create requests) Must have a prefix of `c_` and contain only alphanumeric characters or underscores.
     * @type {string}
     * @memberof FieldAllOf
     */
    id?: string;
    /**
     * 
     * The data type of the Custom Field's contents.
     * Note that the `LOCATION_LIST` type has been renamed to `ENTITY_LIST`. The former can still be obtained by calling Custom Fields endpoints with a **`v`** param before `20180809`.
     * @type {string}
     * @memberof FieldAllOf
     */
    type: FieldAllOfTypeEnum;
}

/**
* @export
* @enum {string}
*/
export enum FieldAllOfTypeEnum {
    Boolean = 'BOOLEAN',
    Cta = 'CTA',
    DailyTimes = 'DAILY_TIMES',
    Date = 'DATE',
    Gallery = 'GALLERY',
    Hours = 'HOURS',
    EntityList = 'ENTITY_LIST',
    MultilineText = 'MULTILINE_TEXT',
    MultiOption = 'MULTI_OPTION',
    Number = 'NUMBER',
    Photo = 'PHOTO',
    RichText = 'RICH_TEXT',
    SingleOption = 'SINGLE_OPTION',
    Text = 'TEXT',
    TextList = 'TEXT_LIST',
    Url = 'URL',
    Video = 'VIDEO',
    VideoGallery = 'VIDEO_GALLERY'
}

export function FieldAllOfFromJSON(json: any): FieldAllOf {
    return FieldAllOfFromJSONTyped(json, false);
}

export function FieldAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': json['type'],
    };
}

export function FieldAllOfToJSON(value?: FieldAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
    };
}


