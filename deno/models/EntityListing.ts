/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import {
    ListingStatusDetail,
    ListingStatusDetailFromJSON,
    ListingStatusDetailFromJSONTyped,
    ListingStatusDetailToJSON,
} from './index.ts';

/**
 * 
 * @export
 * @interface EntityListing
 */
export interface EntityListing {
    /**
     * ID of this listing
     * @type {string}
     * @memberof EntityListing
     */
    id?: string;
    /**
     * ID of the entity associated with this listing
     * @type {string}
     * @memberof EntityListing
     */
    entityId?: string;
    /**
     * ID of the account associated with this listing
     * @type {string}
     * @memberof EntityListing
     */
    accountId?: string;
    /**
     * ID of publisher associated with this listing
     * @type {string}
     * @memberof EntityListing
     */
    publisherId?: string;
    /**
     * The status of this listing
     * @type {string}
     * @memberof EntityListing
     */
    status?: EntityListingStatusEnum;
    /**
     * The URL of this listing
     * @type {string}
     * @memberof EntityListing
     */
    listingUrl?: string;
    /**
     * List of warning messages or reasons why the listing is unavailable. Only included if the listing has a warning message or is unavailable.
     * @type {Array<ListingStatusDetail>}
     * @memberof EntityListing
     */
    statusDetails?: Array<ListingStatusDetail>;
}

/**
* @export
* @enum {string}
*/
export enum EntityListingStatusEnum {
    NotSynced = 'NOT_SYNCED',
    SyncInProgress = 'SYNC_IN_PROGRESS',
    Live = 'LIVE',
    UpdateInProgress = 'UPDATE_IN_PROGRESS',
    CancelingSync = 'CANCELING_SYNC',
    NotApplicable = 'NOT_APPLICABLE',
    DeletePending = 'DELETE_PENDING',
    DeleteFailed = 'DELETE_FAILED',
    Deleted = 'DELETED',
    SyncStopped = 'SYNC_STOPPED'
}

export function EntityListingFromJSON(json: any): EntityListing {
    return EntityListingFromJSONTyped(json, false);
}

export function EntityListingFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityListing {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'entityId': !exists(json, 'entityId') ? undefined : json['entityId'],
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'publisherId': !exists(json, 'publisherId') ? undefined : json['publisherId'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'listingUrl': !exists(json, 'listingUrl') ? undefined : json['listingUrl'],
        'statusDetails': !exists(json, 'statusDetails') ? undefined : ((json['statusDetails'] as Array<any>).map(ListingStatusDetailFromJSON)),
    };
}

export function EntityListingToJSON(value?: EntityListing | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'entityId': value.entityId,
        'accountId': value.accountId,
        'publisherId': value.publisherId,
        'status': value.status,
        'listingUrl': value.listingUrl,
        'statusDetails': value.statusDetails === undefined ? undefined : ((value.statusDetails as Array<any>).map(ListingStatusDetailToJSON)),
    };
}


