/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface LinkedAccount
 */
export interface LinkedAccount {
    /**
     * ID of the linked account.
     * @type {string}
     * @memberof LinkedAccount
     */
    id?: string;
    /**
     * ID of the publisher associated with the linked account.
     * @type {string}
     * @memberof LinkedAccount
     */
    publisherId?: string;
    /**
     * The entityId values for the entities the linked account is assigned to.
     * @type {Array<string>}
     * @memberof LinkedAccount
     */
    entityIds?: Array<string>;
    /**
     * The first name of the linked account owner.
     * @type {string}
     * @memberof LinkedAccount
     */
    firstName?: string;
    /**
     * The last name of the linked account owner.
     * @type {string}
     * @memberof LinkedAccount
     */
    lastName?: string;
    /**
     * The email address associated with the linked account.
     * @type {string}
     * @memberof LinkedAccount
     */
    email?: string;
    /**
     * The last known status of the account.
     * 
     * * `VALID`
     * * `INVALID`
     * 
     * `VALID`
     * The account's token is valid.
     * 
     * `INVALID`
     * The accountâ€™s token has expired and will not be successful when syncing to/from publishers.
     * @type {string}
     * @memberof LinkedAccount
     */
    status?: string;
    /**
     * Indicates whether a linked account can be assigned to subaccounts and/or entities within subaccounts.
     * 
     * This field is only available for certain Yext accounts.
     * @type {boolean}
     * @memberof LinkedAccount
     */
    canAssign?: boolean;
}

export function LinkedAccountFromJSON(json: any): LinkedAccount {
    return LinkedAccountFromJSONTyped(json, false);
}

export function LinkedAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkedAccount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'publisherId': !exists(json, 'publisherId') ? undefined : json['publisherId'],
        'entityIds': !exists(json, 'entityIds') ? undefined : json['entityIds'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'canAssign': !exists(json, 'canAssign') ? undefined : json['canAssign'],
    };
}

export function LinkedAccountToJSON(value?: LinkedAccount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'publisherId': value.publisherId,
        'entityIds': value.entityIds,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'email': value.email,
        'status': value.status,
        'canAssign': value.canAssign,
    };
}


