/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntityType,
    EntityTypeFromJSON,
    EntityTypeFromJSONTyped,
    EntityTypeToJSON,
    LocationType,
    LocationTypeFromJSON,
    LocationTypeFromJSONTyped,
    LocationTypeToJSON,
    PublisherAlternateBrands,
    PublisherAlternateBrandsFromJSON,
    PublisherAlternateBrandsFromJSONTyped,
    PublisherAlternateBrandsToJSON,
} from './';

/**
 * 
 * @export
 * @interface Publisher
 */
export interface Publisher {
    /**
     * Publisher ID
     * @type {string}
     * @memberof Publisher
     */
    id?: string;
    /**
     * Publisher name
     * @type {string}
     * @memberof Publisher
     */
    name?: string;
    /**
     * Publisher home page. Will link to Apple App Store for mobile-only apps
     * @type {string}
     * @memberof Publisher
     */
    url?: string;
    /**
     * List of Publisher's alternate brands where listings are syndicated
     * @type {Array<PublisherAlternateBrands>}
     * @memberof Publisher
     */
    alternateBrands?: Array<PublisherAlternateBrands>;
    /**
     * List of countries where this Publisher publishes listings. Countries are denoted by ISO 3166 2-letter country codes
     * @type {Array<string>}
     * @memberof Publisher
     */
    supportedCountries?: Array<string>;
    /**
     * List of Location types that are supported by this Publisher
     * 
     * Only present if the **`v`** parameter is before `20190111`
     * @type {Array<LocationType>}
     * @memberof Publisher
     */
    supportedLocationTypes?: Array<LocationType>;
    /**
     * List of Entity types that are supported by this Publisher
     * 
     * Only present if the **`v`** parameter is `20190111` or later
     * @type {Array<EntityType>}
     * @memberof Publisher
     */
    supportedEntityTypes?: Array<EntityType>;
    /**
     * List of features supported by this Publisher
     * @type {Array<string>}
     * @memberof Publisher
     */
    features?: Array<PublisherFeaturesEnum>;
    /**
     * Typical speed for updates to go live, in seconds
     * @type {string}
     * @memberof Publisher
     */
    typicalUpdateSpeed?: string;
}

/**
* @export
* @enum {string}
*/
export enum PublisherFeaturesEnum {
    DualSync = 'DUAL_SYNC',
    Submission = 'SUBMISSION',
    Suppression = 'SUPPRESSION',
    SuppressionByUrl = 'SUPPRESSION_BY_URL',
    ReviewMonitoring = 'REVIEW_MONITORING',
    PublisherSuggestions = 'PUBLISHER_SUGGESTIONS',
    Analytics = 'ANALYTICS',
    Social = 'SOCIAL',
    MenuSync = 'MENU_SYNC'
}

export function PublisherFromJSON(json: any): Publisher {
    return PublisherFromJSONTyped(json, false);
}

export function PublisherFromJSONTyped(json: any, ignoreDiscriminator: boolean): Publisher {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'alternateBrands': !exists(json, 'alternateBrands') ? undefined : ((json['alternateBrands'] as Array<any>).map(PublisherAlternateBrandsFromJSON)),
        'supportedCountries': !exists(json, 'supportedCountries') ? undefined : json['supportedCountries'],
        'supportedLocationTypes': !exists(json, 'supportedLocationTypes') ? undefined : ((json['supportedLocationTypes'] as Array<any>).map(LocationTypeFromJSON)),
        'supportedEntityTypes': !exists(json, 'supportedEntityTypes') ? undefined : ((json['supportedEntityTypes'] as Array<any>).map(EntityTypeFromJSON)),
        'features': !exists(json, 'features') ? undefined : json['features'],
        'typicalUpdateSpeed': !exists(json, 'typicalUpdateSpeed') ? undefined : json['typicalUpdateSpeed'],
    };
}

export function PublisherToJSON(value?: Publisher | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'url': value.url,
        'alternateBrands': value.alternateBrands === undefined ? undefined : ((value.alternateBrands as Array<any>).map(PublisherAlternateBrandsToJSON)),
        'supportedCountries': value.supportedCountries,
        'supportedLocationTypes': value.supportedLocationTypes === undefined ? undefined : ((value.supportedLocationTypes as Array<any>).map(LocationTypeToJSON)),
        'supportedEntityTypes': value.supportedEntityTypes === undefined ? undefined : ((value.supportedEntityTypes as Array<any>).map(EntityTypeToJSON)),
        'features': value.features,
        'typicalUpdateSpeed': value.typicalUpdateSpeed,
    };
}


