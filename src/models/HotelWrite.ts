/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AtmWriteAllOfAccessHours,
    AtmWriteAllOfAccessHoursFromJSON,
    AtmWriteAllOfAccessHoursFromJSONTyped,
    AtmWriteAllOfAccessHoursToJSON,
    AtmWriteAllOfAddress,
    AtmWriteAllOfAddressFromJSON,
    AtmWriteAllOfAddressFromJSONTyped,
    AtmWriteAllOfAddressToJSON,
    AtmWriteAllOfDisplayCoordinate,
    AtmWriteAllOfDisplayCoordinateFromJSON,
    AtmWriteAllOfDisplayCoordinateFromJSONTyped,
    AtmWriteAllOfDisplayCoordinateToJSON,
    AtmWriteAllOfDropoffCoordinate,
    AtmWriteAllOfDropoffCoordinateFromJSON,
    AtmWriteAllOfDropoffCoordinateFromJSONTyped,
    AtmWriteAllOfDropoffCoordinateToJSON,
    AtmWriteAllOfFacebookCallToAction,
    AtmWriteAllOfFacebookCallToActionFromJSON,
    AtmWriteAllOfFacebookCallToActionFromJSONTyped,
    AtmWriteAllOfFacebookCallToActionToJSON,
    AtmWriteAllOfFacebookCoverPhoto,
    AtmWriteAllOfFacebookCoverPhotoFromJSON,
    AtmWriteAllOfFacebookCoverPhotoFromJSONTyped,
    AtmWriteAllOfFacebookCoverPhotoToJSON,
    AtmWriteAllOfFacebookProfilePhoto,
    AtmWriteAllOfFacebookProfilePhotoFromJSON,
    AtmWriteAllOfFacebookProfilePhotoFromJSONTyped,
    AtmWriteAllOfFacebookProfilePhotoToJSON,
    AtmWriteAllOfFeaturedMessage,
    AtmWriteAllOfFeaturedMessageFromJSON,
    AtmWriteAllOfFeaturedMessageFromJSONTyped,
    AtmWriteAllOfFeaturedMessageToJSON,
    AtmWriteAllOfFrequentlyAskedQuestions,
    AtmWriteAllOfFrequentlyAskedQuestionsFromJSON,
    AtmWriteAllOfFrequentlyAskedQuestionsFromJSONTyped,
    AtmWriteAllOfFrequentlyAskedQuestionsToJSON,
    AtmWriteAllOfGoogleCoverPhoto,
    AtmWriteAllOfGoogleCoverPhotoFromJSON,
    AtmWriteAllOfGoogleCoverPhotoFromJSONTyped,
    AtmWriteAllOfGoogleCoverPhotoToJSON,
    AtmWriteAllOfGoogleProfilePhoto,
    AtmWriteAllOfGoogleProfilePhotoFromJSON,
    AtmWriteAllOfGoogleProfilePhotoFromJSONTyped,
    AtmWriteAllOfGoogleProfilePhotoToJSON,
    AtmWriteAllOfHours,
    AtmWriteAllOfHoursFromJSON,
    AtmWriteAllOfHoursFromJSONTyped,
    AtmWriteAllOfHoursToJSON,
    AtmWriteAllOfLogo,
    AtmWriteAllOfLogoFromJSON,
    AtmWriteAllOfLogoFromJSONTyped,
    AtmWriteAllOfLogoToJSON,
    AtmWriteAllOfMeta,
    AtmWriteAllOfMetaFromJSON,
    AtmWriteAllOfMetaFromJSONTyped,
    AtmWriteAllOfMetaToJSON,
    AtmWriteAllOfPickupCoordinate,
    AtmWriteAllOfPickupCoordinateFromJSON,
    AtmWriteAllOfPickupCoordinateFromJSONTyped,
    AtmWriteAllOfPickupCoordinateToJSON,
    AtmWriteAllOfRankTrackingCompetitors,
    AtmWriteAllOfRankTrackingCompetitorsFromJSON,
    AtmWriteAllOfRankTrackingCompetitorsFromJSONTyped,
    AtmWriteAllOfRankTrackingCompetitorsToJSON,
    AtmWriteAllOfRoutableCoordinate,
    AtmWriteAllOfRoutableCoordinateFromJSON,
    AtmWriteAllOfRoutableCoordinateFromJSONTyped,
    AtmWriteAllOfRoutableCoordinateToJSON,
    AtmWriteAllOfWalkableCoordinate,
    AtmWriteAllOfWalkableCoordinateFromJSON,
    AtmWriteAllOfWalkableCoordinateFromJSONTyped,
    AtmWriteAllOfWalkableCoordinateToJSON,
    AtmWriteAllOfWebsiteUrl,
    AtmWriteAllOfWebsiteUrlFromJSON,
    AtmWriteAllOfWebsiteUrlFromJSONTyped,
    AtmWriteAllOfWebsiteUrlToJSON,
    EntityWrite,
    EntityWriteFromJSON,
    EntityWriteFromJSONTyped,
    EntityWriteToJSON,
    EventWriteAllOfPhotoGallery,
    EventWriteAllOfPhotoGalleryFromJSON,
    EventWriteAllOfPhotoGalleryFromJSONTyped,
    EventWriteAllOfPhotoGalleryToJSON,
    HealthcareFacilityWriteAllOfBios,
    HealthcareFacilityWriteAllOfBiosFromJSON,
    HealthcareFacilityWriteAllOfBiosFromJSONTyped,
    HealthcareFacilityWriteAllOfBiosToJSON,
    HealthcareFacilityWriteAllOfCalendars,
    HealthcareFacilityWriteAllOfCalendarsFromJSON,
    HealthcareFacilityWriteAllOfCalendarsFromJSONTyped,
    HealthcareFacilityWriteAllOfCalendarsToJSON,
    HealthcareFacilityWriteAllOfMenuUrl,
    HealthcareFacilityWriteAllOfMenuUrlFromJSON,
    HealthcareFacilityWriteAllOfMenuUrlFromJSONTyped,
    HealthcareFacilityWriteAllOfMenuUrlToJSON,
    HealthcareFacilityWriteAllOfOrderUrl,
    HealthcareFacilityWriteAllOfOrderUrlFromJSON,
    HealthcareFacilityWriteAllOfOrderUrlFromJSONTyped,
    HealthcareFacilityWriteAllOfOrderUrlToJSON,
    HealthcareFacilityWriteAllOfProductLists,
    HealthcareFacilityWriteAllOfProductListsFromJSON,
    HealthcareFacilityWriteAllOfProductListsFromJSONTyped,
    HealthcareFacilityWriteAllOfProductListsToJSON,
    HealthcareFacilityWriteAllOfReservationUrl,
    HealthcareFacilityWriteAllOfReservationUrlFromJSON,
    HealthcareFacilityWriteAllOfReservationUrlFromJSONTyped,
    HealthcareFacilityWriteAllOfReservationUrlToJSON,
    HealthcareFacilityWriteAllOfServiceArea,
    HealthcareFacilityWriteAllOfServiceAreaFromJSON,
    HealthcareFacilityWriteAllOfServiceAreaFromJSONTyped,
    HealthcareFacilityWriteAllOfServiceAreaToJSON,
    HealthcareFacilityWriteAllOfServiceAreaPlaces,
    HealthcareFacilityWriteAllOfServiceAreaPlacesFromJSON,
    HealthcareFacilityWriteAllOfServiceAreaPlacesFromJSONTyped,
    HealthcareFacilityWriteAllOfServiceAreaPlacesToJSON,
    HealthcareFacilityWriteAllOfUberLink,
    HealthcareFacilityWriteAllOfUberLinkFromJSON,
    HealthcareFacilityWriteAllOfUberLinkFromJSONTyped,
    HealthcareFacilityWriteAllOfUberLinkToJSON,
    HealthcareFacilityWriteAllOfUberTripBranding,
    HealthcareFacilityWriteAllOfUberTripBrandingFromJSON,
    HealthcareFacilityWriteAllOfUberTripBrandingFromJSONTyped,
    HealthcareFacilityWriteAllOfUberTripBrandingToJSON,
    HealthcareFacilityWriteAllOfVideos,
    HealthcareFacilityWriteAllOfVideosFromJSON,
    HealthcareFacilityWriteAllOfVideosFromJSONTyped,
    HealthcareFacilityWriteAllOfVideosToJSON,
    HotelWriteAllOf,
    HotelWriteAllOfFromJSON,
    HotelWriteAllOfFromJSONTyped,
    HotelWriteAllOfToJSON,
    HotelWriteAllOfBrunchHours,
    HotelWriteAllOfBrunchHoursFromJSON,
    HotelWriteAllOfBrunchHoursFromJSONTyped,
    HotelWriteAllOfBrunchHoursToJSON,
    HotelWriteAllOfHappyHours,
    HotelWriteAllOfHappyHoursFromJSON,
    HotelWriteAllOfHappyHoursFromJSONTyped,
    HotelWriteAllOfHappyHoursToJSON,
    HotelWriteAllOfKitchenHours,
    HotelWriteAllOfKitchenHoursFromJSON,
    HotelWriteAllOfKitchenHoursFromJSONTyped,
    HotelWriteAllOfKitchenHoursToJSON,
    HotelWriteAllOfMenus,
    HotelWriteAllOfMenusFromJSON,
    HotelWriteAllOfMenusFromJSONTyped,
    HotelWriteAllOfMenusToJSON,
} from './';

/**
 * 
 * @export
 * @interface HotelWrite
 */
export interface HotelWrite extends EntityWrite {
    /**
     * 
     * @type {AtmWriteAllOfMeta}
     * @memberof HotelWrite
     */
    meta?: AtmWriteAllOfMeta;
    /**
     * 
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * * a phone number
     * @type {string}
     * @memberof HotelWrite
     */
    name?: string;
    /**
     * 
     * @type {AtmWriteAllOfAddress}
     * @memberof HotelWrite
     */
    address?: AtmWriteAllOfAddress;
    /**
     * 
     * @type {AtmWriteAllOfAccessHours}
     * @memberof HotelWrite
     */
    accessHours?: AtmWriteAllOfAccessHours;
    /**
     * Additional information about hours that does not fit in **`hours`** (e.g., `"Closed during the winter"`)
     * @type {string}
     * @memberof HotelWrite
     */
    additionalHoursText?: string;
    /**
     * If `true`, the entity's street address will not be shown on listings. Defaults to `false`.
     * @type {boolean}
     * @memberof HotelWrite
     */
    addressHidden?: boolean;
    /**
     * Indicates whether the entity has a pool for adults only.
     * @type {string}
     * @memberof HotelWrite
     */
    adultPool?: HotelWriteAdultPoolEnum;
    /**
     * Indicates whether the entity offers a shuttle to/from the airport.
     * @type {string}
     * @memberof HotelWrite
     */
    airportShuttle?: HotelWriteAirportShuttleEnum;
    /**
     * Indicates whether the entity offers a shuttle service of car service to/from nearby airports or train stations.
     * @type {string}
     * @memberof HotelWrite
     */
    airportTransfer?: HotelWriteAirportTransferEnum;
    /**
     * Indicates whether the entity offers all-inclusive rates.
     * @type {string}
     * @memberof HotelWrite
     */
    allInclusive?: HotelWriteAllInclusiveEnum;
    /**
     * Other names for your business that you would like us to use when tracking your search performance
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 3 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    alternateNames?: Set<string>;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWrite
     */
    alternatePhone?: string;
    /**
     * Other websites for your business that we should search for when tracking your search performance
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 3 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* common domain names, e.g., google.com, youtube.com, etc.
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    alternateWebsites?: Set<string>;
    /**
     * The URL where consumers can download the entity's Android app
     * @type {string}
     * @memberof HotelWrite
     */
    androidAppUrl?: string;
    /**
     * Association memberships relevant to the entity (e.g., `"New York Doctors Association"`)
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    associations?: Set<string>;
    /**
     * Indicates whether the entity offers babysitting.
     * @type {string}
     * @memberof HotelWrite
     */
    babysittingOffered?: HotelWriteBabysittingOfferedEnum;
    /**
     * Indicates whether the entity offers baggage storage pre check-in and post check-out.
     * @type {string}
     * @memberof HotelWrite
     */
    baggageStorage?: HotelWriteBaggageStorageEnum;
    /**
     * Indicates whether the entity has an indoor or outdoor bar onsite.
     * @type {string}
     * @memberof HotelWrite
     */
    bar?: HotelWriteBarEnum;
    /**
     * Indicates whether the entity has access to a beach.
     * @type {string}
     * @memberof HotelWrite
     */
    beachAccess?: HotelWriteBeachAccessEnum;
    /**
     * Indicates whether the entity is physically located next to a beach.
     * @type {string}
     * @memberof HotelWrite
     */
    beachFrontProperty?: HotelWriteBeachFrontPropertyEnum;
    /**
     * Indicates whether the entity offers bicycles for rent or for free.
     * @type {string}
     * @memberof HotelWrite
     */
    bicycles?: HotelWriteBicyclesEnum;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfBios}
     * @memberof HotelWrite
     */
    bios?: HealthcareFacilityWriteAllOfBios;
    /**
     * Indicates whether the entity has a boutique store. Gift shop or convenience store are not eligible.
     * @type {string}
     * @memberof HotelWrite
     */
    boutiqueStores?: HotelWriteBoutiqueStoresEnum;
    /**
     * Brands sold by this entity
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    brands?: Set<string>;
    /**
     * Indicates whether the entity offers breakfast.
     * @type {string}
     * @memberof HotelWrite
     */
    breakfast?: HotelWriteBreakfastEnum;
    /**
     * 
     * @type {HotelWriteAllOfBrunchHours}
     * @memberof HotelWrite
     */
    brunchHours?: HotelWriteAllOfBrunchHours;
    /**
     * Indicates whether the entity has a business center.
     * @type {string}
     * @memberof HotelWrite
     */
    businessCenter?: HotelWriteBusinessCenterEnum;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfCalendars}
     * @memberof HotelWrite
     */
    calendars?: HealthcareFacilityWriteAllOfCalendars;
    /**
     * Indicates whether the entity offers car rental.
     * @type {string}
     * @memberof HotelWrite
     */
    carRental?: HotelWriteCarRentalEnum;
    /**
     * Indicates whether the entity has a casino on premise or nearby.
     * @type {string}
     * @memberof HotelWrite
     */
    casino?: HotelWriteCasinoEnum;
    /**
     * Yext Category IDs.
     * 
     * IDs must be valid and selectable (i.e., cannot be parent categories).
     * 
     * NOTE: The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings.
     * @type {Array<string>}
     * @memberof HotelWrite
     */
    categoryIds?: Array<string>;
    /**
     * Indicates if the entity is cat friendly.
     * @type {string}
     * @memberof HotelWrite
     */
    catsAllowed?: HotelWriteCatsAllowedEnum;
    /**
     * The check-in time
     * @type {string}
     * @memberof HotelWrite
     */
    checkInTime?: string;
    /**
     * The check-out time
     * @type {string}
     * @memberof HotelWrite
     */
    checkOutTime?: string;
    /**
     * The 1 to 5 star rating of the entitiy based on its services and facilities.
     * @type {string}
     * @memberof HotelWrite
     */
    classificationRating?: string;
    /**
     * Indicates whether the entity is closed
     * @type {boolean}
     * @memberof HotelWrite
     */
    closed?: boolean;
    /**
     * Indicates whether the entity offers concierge service.
     * @type {string}
     * @memberof HotelWrite
     */
    concierge?: HotelWriteConciergeEnum;
    /**
     * Indicates whether the entity has a convenience store.
     * @type {string}
     * @memberof HotelWrite
     */
    convenienceStore?: HotelWriteConvenienceStoreEnum;
    /**
     * Indicates whether the entity offers currency exchange services.
     * @type {string}
     * @memberof HotelWrite
     */
    currencyExchange?: HotelWriteCurrencyExchangeEnum;
    /**
     * Additional keywords you would like us to use when tracking your search performance
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 5 elements.
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    customKeywords?: Set<string>;
    /**
     * A description of the entity
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * @type {string}
     * @memberof HotelWrite
     */
    description?: string;
    /**
     * 
     * @type {AtmWriteAllOfDisplayCoordinate}
     * @memberof HotelWrite
     */
    displayCoordinate?: AtmWriteAllOfDisplayCoordinate;
    /**
     * Indicates whether the entity has a doctor on premise or on call.
     * @type {string}
     * @memberof HotelWrite
     */
    doctorOnCall?: HotelWriteDoctorOnCallEnum;
    /**
     * Indicates if the entity is dog friendly.
     * @type {string}
     * @memberof HotelWrite
     */
    dogsAllowed?: HotelWriteDogsAllowedEnum;
    /**
     * 
     * @type {AtmWriteAllOfDropoffCoordinate}
     * @memberof HotelWrite
     */
    dropoffCoordinate?: AtmWriteAllOfDropoffCoordinate;
    /**
     * Indicates whether the entity has electric car chargine stations on premise.
     * @type {string}
     * @memberof HotelWrite
     */
    electricChargingStation?: HotelWriteElectricChargingStationEnum;
    /**
     * Indicates whether the entity has an elevator.
     * @type {string}
     * @memberof HotelWrite
     */
    elevator?: HotelWriteElevatorEnum;
    /**
     * Indicates whether the entity has an elliptical machine.
     * @type {string}
     * @memberof HotelWrite
     */
    ellipticalMachine?: HotelWriteEllipticalMachineEnum;
    /**
     * Emails addresses for this entity's point of contact
     * 
     * Must be valid email addresses
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 5 elements.
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    emails?: Set<string>;
    /**
     * 
     * @type {AtmWriteAllOfFacebookCallToAction}
     * @memberof HotelWrite
     */
    facebookCallToAction?: AtmWriteAllOfFacebookCallToAction;
    /**
     * 
     * @type {AtmWriteAllOfFacebookCoverPhoto}
     * @memberof HotelWrite
     */
    facebookCoverPhoto?: AtmWriteAllOfFacebookCoverPhoto;
    /**
     * Location Descriptors are used for Enterprise businesses that sync Facebook listings using brand page location structure. The Location Descriptor is typically an additional geographic description (e.g. geomodifier) that will appear in parentheses after the name on the Facebook listing.
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * @type {string}
     * @memberof HotelWrite
     */
    facebookDescriptor?: string;
    /**
     * The name for this entity's Facebook profile.  A separate name may be specified to send only to Facebook in order to comply with any specific Facebook rules or naming conventions.
     * @type {string}
     * @memberof HotelWrite
     */
    facebookName?: string;
    /**
     * The city to be displayed on this entity's Facebook profile
     * @type {string}
     * @memberof HotelWrite
     */
    facebookOverrideCity?: string;
    /**
     * URL for the entity's Facebook Page.
     * 
     * Valid formats:
     * 
     * - facebook.com/profile.php?id=[numId]
     * - facebook.com/group.php?gid=[numId]
     * - facebook.com/groups/[numId]
     * - facebook.com/[Name]
     * - facebook.com/pages/[Name]/[numId]
     * 
     * where [Name] is a String and [numId] is an Integer
     * 
     * If you submit a URL that is not in one of the valid formats, it will be ignored. The success response will contain a warning message explaining why the URL wasn't stored in the system.
     * @type {string}
     * @memberof HotelWrite
     */
    facebookPageUrl?: string;
    /**
     * 
     * @type {AtmWriteAllOfFacebookProfilePhoto}
     * @memberof HotelWrite
     */
    facebookProfilePhoto?: AtmWriteAllOfFacebookProfilePhoto;
    /**
     * The username that appear's in the Facebook listing URL to help customers find and remember a brand’s Facebook page.  The username is also be used for tagging the Facebook page in other users’ posts, and searching for the Facebook page.
     * @type {string}
     * @memberof HotelWrite
     */
    facebookVanityUrl?: string;
    /**
     * Must be a valid fax number.
     * 
     * If the fax number's calling code is for a country other than the one given in the entity's **`countryCode`**, the fax number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWrite
     */
    fax?: string;
    /**
     * 
     * @type {AtmWriteAllOfFeaturedMessage}
     * @memberof HotelWrite
     */
    featuredMessage?: AtmWriteAllOfFeaturedMessage;
    /**
     * Link to the review-collection page, where consumers can leave first-party reviews
     * @type {string}
     * @memberof HotelWrite
     */
    firstPartyReviewPage?: string;
    /**
     * Indicates whether the entity has a fitness center.
     * @type {string}
     * @memberof HotelWrite
     */
    fitnessCenter?: HotelWriteFitnessCenterEnum;
    /**
     * The number of floors the entity has from ground floor to top floor.
     * @type {number}
     * @memberof HotelWrite
     */
    floorCount?: number;
    /**
     * Indicates whether the entity has free weights.
     * @type {string}
     * @memberof HotelWrite
     */
    freeWeights?: HotelWriteFreeWeightsEnum;
    /**
     * A list of questions that are frequently asked about this entity
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * @type {Set<AtmWriteAllOfFrequentlyAskedQuestions>}
     * @memberof HotelWrite
     */
    frequentlyAskedQuestions?: Set<AtmWriteAllOfFrequentlyAskedQuestions>;
    /**
     * Indicates whether the entity has a front desk.
     * @type {string}
     * @memberof HotelWrite
     */
    frontDesk?: HotelWriteFrontDeskEnum;
    /**
     * Indicates whether the entity has a game room.
     * @type {string}
     * @memberof HotelWrite
     */
    gameRoom?: HotelWriteGameRoomEnum;
    /**
     * Provides additional information on where the entity can be found (e.g., `Times Square`, `Global Center Mall`)
     * @type {string}
     * @memberof HotelWrite
     */
    geomodifier?: string;
    /**
     * Indicates whether the entity has a gift shop.
     * @type {string}
     * @memberof HotelWrite
     */
    giftShop?: HotelWriteGiftShopEnum;
    /**
     * Indicates whether the entity has a golf couse on premise or nearby. The golf course may be independently run.
     * @type {string}
     * @memberof HotelWrite
     */
    golf?: HotelWriteGolfEnum;
    /**
     * The unique IDs of the entity's Google My Business keywords, as well as the unique IDs of any values selected for each keyword.
     * 
     * Valid keywords (e.g., `has_drive_through`, `has_fitting_room`, `kitchen_in_room`) are determined by the entity's primary category. A full list of keywords can be retrieved with the Google Fields: List endpoint.
     * 
     * Keyword values provide more details on how the keyword applies to the entity (e.g., if the keyword is `has_drive_through`, its values may be `true` or `false`).
     * 
     * * If the **`v`** parameter is before `20181204`: **`googleAttributes`** is formatted as a map of key-value pairs (e.g., `[{ "id": "has_wheelchair_accessible_entrance", "values": [ "true" ] }]`)
     * * If the **`v`** parameter is on or after `20181204`: the contents are formatted as a list of objects (e.g., `{ "has_wheelchair_accessible_entrance": [ "true" ]}`)
     * 
     * **NOTE:** The latest Google Attributes are available via the Google Fields: List endpoint. Google Attributes are managed by Google and are subject to change without notice. To prevent errors, make sure your API implementation is not dependent on the presence of specific attributes.
     * @type {object}
     * @memberof HotelWrite
     */
    googleAttributes?: object;
    /**
     * 
     * @type {AtmWriteAllOfGoogleCoverPhoto}
     * @memberof HotelWrite
     */
    googleCoverPhoto?: AtmWriteAllOfGoogleCoverPhoto;
    /**
     * Google My Business Labels help users organize their locations into groups within GMB.
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 10 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    googleMyBusinessLabels?: Set<string>;
    /**
     * The unique identifier of this entity on Google Maps.
     * @type {string}
     * @memberof HotelWrite
     */
    googlePlaceId?: string;
    /**
     * 
     * @type {AtmWriteAllOfGoogleProfilePhoto}
     * @memberof HotelWrite
     */
    googleProfilePhoto?: AtmWriteAllOfGoogleProfilePhoto;
    /**
     * The URL you would like to submit to Google My Business in place of the one given in **`websiteUrl`** (if applicable).
     * 
     * For example, if you want to analyze the traffic driven by your Google listings separately from other traffic, enter the alternate URL that you will use for tracking in this field.
     * @type {string}
     * @memberof HotelWrite
     */
    googleWebsiteOverride?: string;
    /**
     * 
     * @type {HotelWriteAllOfHappyHours}
     * @memberof HotelWrite
     */
    happyHours?: HotelWriteAllOfHappyHours;
    /**
     * Indicates whether holiday-hour confirmation alerts are enabled for the Yext Knowledge Assistant for this entity
     * @type {boolean}
     * @memberof HotelWrite
     */
    holidayHoursConversationEnabled?: boolean;
    /**
     * Indicates whether the entity offers horseback riding.
     * @type {string}
     * @memberof HotelWrite
     */
    horsebackRiding?: HotelWriteHorsebackRidingEnum;
    /**
     * Indicates whether the entity has a hot tub.
     * @type {string}
     * @memberof HotelWrite
     */
    hotTub?: HotelWriteHotTubEnum;
    /**
     * 
     * @type {AtmWriteAllOfHours}
     * @memberof HotelWrite
     */
    hours?: AtmWriteAllOfHours;
    /**
     * Indicates whether the entity offers housekeeping services.
     * @type {string}
     * @memberof HotelWrite
     */
    housekeeping?: HotelWriteHousekeepingEnum;
    /**
     * A statement of the ownership and authorship of a document. Individuals or organizations based in many German-speaking countries are required by law to include an Impressum in published media.
     * @type {string}
     * @memberof HotelWrite
     */
    impressum?: string;
    /**
     * A count of the number of indoor pools
     * @type {number}
     * @memberof HotelWrite
     */
    indoorPoolCount?: number;
    /**
     * Valid Instagram username for the entity without the leading "@" (e.g., `NewCityAuto`)
     * @type {string}
     * @memberof HotelWrite
     */
    instagramHandle?: string;
    /**
     * The URL where consumers can download the entity's app to their iPhone or iPad
     * @type {string}
     * @memberof HotelWrite
     */
    iosAppUrl?: string;
    /**
     * The ISO 3166-2 region code for the entity
     * 
     * Yext will determine the entity's code and update **`isoRegionCode`** with that value. If Yext is unable to determine the code for the entity, the entity'ss ISO 3166-1 alpha-2 country code will be used.
     * @type {string}
     * @memberof HotelWrite
     */
    isoRegionCode?: string;
    /**
     * Keywords that describe the entity.
     * 
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    keywords?: Set<string>;
    /**
     * Indicates if the entity is kid friendly.
     * @type {string}
     * @memberof HotelWrite
     */
    kidFriendly?: HotelWriteKidFriendlyEnum;
    /**
     * Indicates if the property has a Kids Club.
     * @type {string}
     * @memberof HotelWrite
     */
    kidsClub?: HotelWriteKidsClubEnum;
    /**
     * Indicates whether the entity allows kids to stay free.
     * @type {string}
     * @memberof HotelWrite
     */
    kidsStayFree?: HotelWriteKidsStayFreeEnum;
    /**
     * 
     * @type {HotelWriteAllOfKitchenHours}
     * @memberof HotelWrite
     */
    kitchenHours?: HotelWriteAllOfKitchenHours;
    /**
     * The IDs of the entity labels that have been added to this entity. Entity labels help you identify entities that share a certain characteristic; they do not appear on your entity's listings.
     * 
     * **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.
     * @type {Array<string>}
     * @memberof HotelWrite
     */
    labels?: Array<string>;
    /**
     * The URL of this entity's Landing Page that was created with Yext Pages
     * @type {string}
     * @memberof HotelWrite
     */
    landingPageUrl?: string;
    /**
     * The langauges in which consumers can commicate with this entity or its staff members
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    languages?: Set<string>;
    /**
     * Indicates whether the entity offers laundry services.
     * @type {string}
     * @memberof HotelWrite
     */
    laundry?: HotelWriteLaundryEnum;
    /**
     * Indicates if the property has a lazy river
     * @type {string}
     * @memberof HotelWrite
     */
    lazyRiver?: HotelWriteLazyRiverEnum;
    /**
     * Indicates if the property has a lifeguard on duty
     * @type {string}
     * @memberof HotelWrite
     */
    lifeguard?: HotelWriteLifeguardEnum;
    /**
     * Must be a valid, non-toll-free phone number, based on the country specified in **`address.region`**. Phone numbers for US entities must contain 10 digits.
     * @type {string}
     * @memberof HotelWrite
     */
    localPhone?: string;
    /**
     * Indicates whether the entity offers local shuttle services.
     * @type {string}
     * @memberof HotelWrite
     */
    localShuttle?: HotelWriteLocalShuttleEnum;
    /**
     * Indicates the entity's type, if it is not an event
     * @type {string}
     * @memberof HotelWrite
     */
    locationType?: HotelWriteLocationTypeEnum;
    /**
     * 
     * @type {AtmWriteAllOfLogo}
     * @memberof HotelWrite
     */
    logo?: AtmWriteAllOfLogo;
    /**
     * The main phone number of the entity's point of contact
     * 
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWrite
     */
    mainPhone?: string;
    /**
     * Indicates whether the entity offers massage services.
     * @type {string}
     * @memberof HotelWrite
     */
    massage?: HotelWriteMassageEnum;
    /**
     * The maximum age specified by the property for children to stay in the room/suite of a parent or adult without an additional fee
     * @type {number}
     * @memberof HotelWrite
     */
    maxAgeOfKidsStayFree?: number;
    /**
     * The maximum number of children who can stay in the room/suite of a parent or adult without an additional fee
     * @type {number}
     * @memberof HotelWrite
     */
    maxNumberOfKidsStayFree?: number;
    /**
     * The number of meeting rooms the entity has.
     * @type {number}
     * @memberof HotelWrite
     */
    meetingRoomCount?: number;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfMenuUrl}
     * @memberof HotelWrite
     */
    menuUrl?: HealthcareFacilityWriteAllOfMenuUrl;
    /**
     * 
     * @type {HotelWriteAllOfMenus}
     * @memberof HotelWrite
     */
    menus?: HotelWriteAllOfMenus;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWrite
     */
    mobilePhone?: string;
    /**
     * Indicates whether the entity is mobility/wheelchair accessible
     * @type {string}
     * @memberof HotelWrite
     */
    mobilityAccessible?: HotelWriteMobilityAccessibleEnum;
    /**
     * Indicates whether the entity has a nightclub.
     * @type {string}
     * @memberof HotelWrite
     */
    nightclub?: HotelWriteNightclubEnum;
    /**
     * Indicates whether Knowledge Nudge is enabled for the Yext Knowledge Assistant for this entity
     * @type {boolean}
     * @memberof HotelWrite
     */
    nudgeEnabled?: boolean;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfOrderUrl}
     * @memberof HotelWrite
     */
    orderUrl?: HealthcareFacilityWriteAllOfOrderUrl;
    /**
     * The number of outdoor pools the entity has.
     * @type {number}
     * @memberof HotelWrite
     */
    outdoorPoolCount?: number;
    /**
     * Indicates whether the entity offers parking services.
     * @type {string}
     * @memberof HotelWrite
     */
    parking?: HotelWriteParkingEnum;
    /**
     * The payment methods accepted by this entity
     * 
     * Valid elements depend on the entity's country.
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    paymentOptions?: Set<HotelWritePaymentOptionsEnum>;
    /**
     * Indicates if the entity is pet friendly.
     * @type {string}
     * @memberof HotelWrite
     */
    petsAllowed?: HotelWritePetsAllowedEnum;
    /**
     * 
     * **NOTE:** The list of photos that you send us must be comprehensive. For example, if you send us a list of photos that does not include photos that you sent in your last update, Yext considers the missing photos to be deleted, and we remove them from your listings.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Supported Aspect Ratios:
     * >* 1 x 1
     * >* 4 x 3
     * >* 3 x 2
     * >* 5 x 3
     * >* 16 x 9
     * >* 3 x 1
     * >* 2 x 3
     * >* 5 x 7
     * >* 4 x 5
     * >* 4 x 1
     * >
     * >**NOTE**: Maximum image size is 5mb after normalization and padding (if applicable). As well, there is a 6 second download limit from the image host.
     * >
     * @type {Array<EventWriteAllOfPhotoGallery>}
     * @memberof HotelWrite
     */
    photoGallery?: Array<EventWriteAllOfPhotoGallery>;
    /**
     * 
     * @type {AtmWriteAllOfPickupCoordinate}
     * @memberof HotelWrite
     */
    pickupCoordinate?: AtmWriteAllOfPickupCoordinate;
    /**
     * ID of the user who is the primary Knowledge Assistant contact for the entity
     * @type {string}
     * @memberof HotelWrite
     */
    primaryConversationContact?: string;
    /**
     * Indicates whether the entity has access to a private beach.
     * @type {string}
     * @memberof HotelWrite
     */
    privateBeach?: HotelWritePrivateBeachEnum;
    /**
     * Indicates whether the entity offers private car services.
     * @type {string}
     * @memberof HotelWrite
     */
    privateCarService?: HotelWritePrivateCarServiceEnum;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfProductLists}
     * @memberof HotelWrite
     */
    productLists?: HealthcareFacilityWriteAllOfProductLists;
    /**
     * Indicates whether Yext Knowledge Assistant question-and-answer conversations are enabled for this entity
     * @type {boolean}
     * @memberof HotelWrite
     */
    questionsAndAnswers?: boolean;
    /**
     * Information about the competitors whose search performance you would like to compare to your own
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 5 elements.
     * @type {Set<AtmWriteAllOfRankTrackingCompetitors>}
     * @memberof HotelWrite
     */
    rankTrackingCompetitors?: Set<AtmWriteAllOfRankTrackingCompetitors>;
    /**
     * Indicates whether Rank Tracking is enabled
     * @type {boolean}
     * @memberof HotelWrite
     */
    rankTrackingEnabled?: boolean;
    /**
     * How often we send search queries to track your search performance
     * @type {string}
     * @memberof HotelWrite
     */
    rankTrackingFrequency?: HotelWriteRankTrackingFrequencyEnum;
    /**
     * The ways in which your keywords will be arranged in the search queries we use to track your performance
     * 
     * 
     * Array must have a minimum of 2 elements.
     * 
     * Array may have a maximum of 4 elements.
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    rankTrackingQueryTemplates?: Set<HotelWriteRankTrackingQueryTemplatesEnum>;
    /**
     * The search engines that we will use to track your performance
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    rankTrackingSites?: Set<HotelWriteRankTrackingSitesEnum>;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfReservationUrl}
     * @memberof HotelWrite
     */
    reservationUrl?: HealthcareFacilityWriteAllOfReservationUrl;
    /**
     * The number of restaurants the entity has.
     * @type {number}
     * @memberof HotelWrite
     */
    restaurantCount?: number;
    /**
     * The URL given Review Invitation emails where consumers can leave a review about the entity
     * @type {string}
     * @memberof HotelWrite
     */
    reviewGenerationUrl?: string;
    /**
     * Indicates whether Yext Knowledge Assistant review-response conversations are enabled for this entity
     * @type {boolean}
     * @memberof HotelWrite
     */
    reviewResponseConversationEnabled?: boolean;
    /**
     * The number of rooms the entity has.
     * @type {number}
     * @memberof HotelWrite
     */
    roomCount?: number;
    /**
     * Indicates whether the entity offers room service.
     * @type {string}
     * @memberof HotelWrite
     */
    roomService?: HotelWriteRoomServiceEnum;
    /**
     * 
     * @type {AtmWriteAllOfRoutableCoordinate}
     * @memberof HotelWrite
     */
    routableCoordinate?: AtmWriteAllOfRoutableCoordinate;
    /**
     * Indicates whether the entity has a salon.
     * @type {string}
     * @memberof HotelWrite
     */
    salon?: HotelWriteSalonEnum;
    /**
     * Indicates whether the entity has a sauna.
     * @type {string}
     * @memberof HotelWrite
     */
    sauna?: HotelWriteSaunaEnum;
    /**
     * Indicates whether the entity offers scuba diving.
     * @type {string}
     * @memberof HotelWrite
     */
    scuba?: HotelWriteScubaEnum;
    /**
     * Indicates whether the entity offers self parking services.
     * @type {string}
     * @memberof HotelWrite
     */
    selfParking?: HotelWriteSelfParkingEnum;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfServiceArea}
     * @memberof HotelWrite
     */
    serviceArea?: HealthcareFacilityWriteAllOfServiceArea;
    /**
     * Information about the area that is served by this entity. It is specified as a list of service area names and their associated types.
     * **Only for Google My Business and Bing:** Currently, **serviceArea** is only supported by Google My Business and Bing and will not affect your listings on other sites.
     * 
     * 
     * Array may have a maximum of 200 elements.
     * @type {Set<HealthcareFacilityWriteAllOfServiceAreaPlaces>}
     * @memberof HotelWrite
     */
    serviceAreaPlaces?: Set<HealthcareFacilityWriteAllOfServiceAreaPlaces>;
    /**
     * Services offered by this entity
     * 
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWrite
     */
    services?: Set<string>;
    /**
     * Indicates if the entity is smoke free.
     * @type {string}
     * @memberof HotelWrite
     */
    smokeFreeProperty?: HotelWriteSmokeFreePropertyEnum;
    /**
     * Indicates whether the entity offers snorkeling.
     * @type {string}
     * @memberof HotelWrite
     */
    snorkeling?: HotelWriteSnorkelingEnum;
    /**
     * Indicates whether the entity offers a social hour.
     * @type {string}
     * @memberof HotelWrite
     */
    socialHour?: HotelWriteSocialHourEnum;
    /**
     * Indicates whether the entity has a spa.
     * @type {string}
     * @memberof HotelWrite
     */
    spa?: HotelWriteSpaEnum;
    /**
     * Indicates whether the entity has a sit-down restaurant.
     * @type {string}
     * @memberof HotelWrite
     */
    tableService?: HotelWriteTableServiceEnum;
    /**
     * Indicates whether the entity has tennis courts.
     * @type {string}
     * @memberof HotelWrite
     */
    tennis?: HotelWriteTennisEnum;
    /**
     * Indicates whether the entity has a thermal pool.
     * @type {string}
     * @memberof HotelWrite
     */
    thermalPool?: HotelWriteThermalPoolEnum;
    /**
     * The timezone of the entity, in the standard `IANA time zone database` format (tz database). e.g. `"America/New_York"`
     * @type {string}
     * @memberof HotelWrite
     */
    timezone?: string;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWrite
     */
    tollFreePhone?: string;
    /**
     * Indicates whether the entity has a treadmill.
     * @type {string}
     * @memberof HotelWrite
     */
    treadmill?: HotelWriteTreadmillEnum;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWrite
     */
    ttyPhone?: string;
    /**
     * Indicates whether the entity offers turndown service.
     * @type {string}
     * @memberof HotelWrite
     */
    turndownService?: HotelWriteTurndownServiceEnum;
    /**
     * Valid Twitter handle for the entity without the leading "@" (e.g., `JohnSmith`)
     * 
     * If you submit an invalid Twitter handle, it will be ignored. The success response will contain a warning message explaining why your Twitter handle wasn't stored in the system.
     * @type {string}
     * @memberof HotelWrite
     */
    twitterHandle?: string;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfUberLink}
     * @memberof HotelWrite
     */
    uberLink?: HealthcareFacilityWriteAllOfUberLink;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfUberTripBranding}
     * @memberof HotelWrite
     */
    uberTripBranding?: HealthcareFacilityWriteAllOfUberTripBranding;
    /**
     * Indicates whether the entity offers valet parking services.
     * @type {string}
     * @memberof HotelWrite
     */
    valetParking?: HotelWriteValetParkingEnum;
    /**
     * Indicates whether the entity has a vending machine.
     * @type {string}
     * @memberof HotelWrite
     */
    vendingMachine?: HotelWriteVendingMachineEnum;
    /**
     * Valid YouTube URLs for embedding a video on some publisher sites
     * 
     * **NOTE:** Currently, only the first URL in the Array appears in your listings.
     * 
     * 
     * 
     * Array must be ordered.
     * @type {Set<HealthcareFacilityWriteAllOfVideos>}
     * @memberof HotelWrite
     */
    videos?: Set<HealthcareFacilityWriteAllOfVideos>;
    /**
     * Indicates whether the entity has a wading pool.
     * @type {string}
     * @memberof HotelWrite
     */
    wadingPool?: HotelWriteWadingPoolEnum;
    /**
     * Indicates whether the entity offers wake up call services.
     * @type {string}
     * @memberof HotelWrite
     */
    wakeUpCalls?: HotelWriteWakeUpCallsEnum;
    /**
     * 
     * @type {AtmWriteAllOfWalkableCoordinate}
     * @memberof HotelWrite
     */
    walkableCoordinate?: AtmWriteAllOfWalkableCoordinate;
    /**
     * Indicates whether the entity has a water park.
     * @type {string}
     * @memberof HotelWrite
     */
    waterPark?: HotelWriteWaterParkEnum;
    /**
     * Indicates whether the entity offers water skiing.
     * @type {string}
     * @memberof HotelWrite
     */
    waterSkiing?: HotelWriteWaterSkiingEnum;
    /**
     * Indicates whether the entity offers any kind of watercrafts.
     * @type {string}
     * @memberof HotelWrite
     */
    watercraft?: HotelWriteWatercraftEnum;
    /**
     * Indicates whether the entity has a water slide.
     * @type {string}
     * @memberof HotelWrite
     */
    waterslide?: HotelWriteWaterslideEnum;
    /**
     * Indicates whether the entity has a wave pool.
     * @type {string}
     * @memberof HotelWrite
     */
    wavePool?: HotelWriteWavePoolEnum;
    /**
     * 
     * @type {AtmWriteAllOfWebsiteUrl}
     * @memberof HotelWrite
     */
    websiteUrl?: AtmWriteAllOfWebsiteUrl;
    /**
     * Indicates whether the entity has a weight machine.
     * @type {string}
     * @memberof HotelWrite
     */
    weightMachine?: HotelWriteWeightMachineEnum;
    /**
     * Indicates if the entity is wheelchair accessible.
     * @type {string}
     * @memberof HotelWrite
     */
    wheelchairAccessible?: HotelWriteWheelchairAccessibleEnum;
    /**
     * Indicates whether the entity has WiFi available
     * @type {string}
     * @memberof HotelWrite
     */
    wifiAvailable?: HotelWriteWifiAvailableEnum;
    /**
     * The year the entity was established.
     * @type {number}
     * @memberof HotelWrite
     */
    yearEstablished?: number;
    /**
     * The most recent year the entity was partially or completely renovated.
     * @type {number}
     * @memberof HotelWrite
     */
    yearLastRenovated?: number;
}

/**
* @export
* @enum {string}
*/
export enum HotelWriteAdultPoolEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAirportShuttleEnum {
    AirportShuttleAvailable = 'AIRPORT_SHUTTLE_AVAILABLE',
    AirportShuttleAvailableForFree = 'AIRPORT_SHUTTLE_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAirportTransferEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllInclusiveEnum {
    AllInclusiveRatesAvailable = 'ALL_INCLUSIVE_RATES_AVAILABLE',
    AllInclusiveRatesOnly = 'ALL_INCLUSIVE_RATES_ONLY',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteBabysittingOfferedEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteBaggageStorageEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteBarEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteBeachAccessEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteBeachFrontPropertyEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteBicyclesEnum {
    BicycleRentals = 'BICYCLE_RENTALS',
    BicycleRentalsForFree = 'BICYCLE_RENTALS_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteBoutiqueStoresEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteBreakfastEnum {
    BreakfastAvailable = 'BREAKFAST_AVAILABLE',
    BreakfastAvailableForFree = 'BREAKFAST_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteBusinessCenterEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteCarRentalEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteCasinoEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteCatsAllowedEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteConciergeEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteConvenienceStoreEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteCurrencyExchangeEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteDoctorOnCallEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteDogsAllowedEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteElectricChargingStationEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteElevatorEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteEllipticalMachineEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteFitnessCenterEnum {
    FitnessCenterAvailable = 'FITNESS_CENTER_AVAILABLE',
    FitnessCenterAvailableForFree = 'FITNESS_CENTER_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteFreeWeightsEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteFrontDeskEnum {
    FrontDeskAvailable = 'FRONT_DESK_AVAILABLE',
    FrontDeskAvailable24Hours = 'FRONT_DESK_AVAILABLE_24_HOURS',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteGameRoomEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteGiftShopEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteGolfEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteHorsebackRidingEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteHotTubEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteHousekeepingEnum {
    HousekeepingAvailable = 'HOUSEKEEPING_AVAILABLE',
    HousekeepingAvailableDaily = 'HOUSEKEEPING_AVAILABLE_DAILY',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteKidFriendlyEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteKidsClubEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteKidsStayFreeEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteLaundryEnum {
    FullService = 'FULL_SERVICE',
    SelfService = 'SELF_SERVICE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteLazyRiverEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteLifeguardEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteLocalShuttleEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteLocationTypeEnum {
    Location = 'LOCATION',
    HealthcareFacility = 'HEALTHCARE_FACILITY',
    HealthcareProfessional = 'HEALTHCARE_PROFESSIONAL',
    Atm = 'ATM',
    Restaurant = 'RESTAURANT',
    Hotel = 'HOTEL'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteMassageEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteMobilityAccessibleEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteNightclubEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteParkingEnum {
    ParkingAvailable = 'PARKING_AVAILABLE',
    ParkingAvailableForFree = 'PARKING_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWritePaymentOptionsEnum {
    Alipay = 'ALIPAY',
    Americanexpress = 'AMERICANEXPRESS',
    Androidpay = 'ANDROIDPAY',
    Applepay = 'APPLEPAY',
    Atm = 'ATM',
    Atmquick = 'ATMQUICK',
    Bacs = 'BACS',
    Bancontact = 'BANCONTACT',
    Bankdeposit = 'BANKDEPOSIT',
    Bankpay = 'BANKPAY',
    Bgo = 'BGO',
    Bitcoin = 'BITCOIN',
    Bar = 'Bar',
    Cartasi = 'CARTASI',
    Cash = 'CASH',
    Ccs = 'CCS',
    Check = 'CHECK',
    Conb = 'CONB',
    Cvvv = 'CVVV',
    Debitnote = 'DEBITNOTE',
    Dinersclub = 'DINERSCLUB',
    Directdebit = 'DIRECTDEBIT',
    Discover = 'DISCOVER',
    Eckarte = 'ECKARTE',
    Ecocheque = 'ECOCHEQUE',
    Ekena = 'EKENA',
    Emv = 'EMV',
    Financing = 'FINANCING',
    Gopay = 'GOPAY',
    Hayakaken = 'HAYAKAKEN',
    Hebag = 'HEBAG',
    Ibod = 'IBOD',
    Iccards = 'ICCARDS',
    Icoca = 'ICOCA',
    Id = 'ID',
    Ideal = 'IDEAL',
    Inca = 'INCA',
    Invoice = 'INVOICE',
    Jcb = 'JCB',
    JCoinPay = 'JCoinPay',
    Jkopay = 'JKOPAY',
    Kitaca = 'KITACA',
    Kla = 'KLA',
    Klarna = 'KLARNA',
    Linepay = 'LINEPAY',
    Maestro = 'MAESTRO',
    Manaca = 'MANACA',
    Mastercard = 'MASTERCARD',
    Mipay = 'MIPAY',
    Monizze = 'MONIZZE',
    Mpay = 'MPAY',
    ManuelleLastsch = 'Manuelle Lastsch',
    Merpay = 'Merpay',
    Nanaco = 'NANACO',
    Nexi = 'NEXI',
    Nimoca = 'NIMOCA',
    Orem = 'OREM',
    Pasmo = 'PASMO',
    Paybackpay = 'PAYBACKPAY',
    Paybox = 'PAYBOX',
    Payconiq = 'PAYCONIQ',
    Paypal = 'PAYPAL',
    Paypay = 'PAYPAY',
    Paysec = 'PAYSEC',
    Pin = 'PIN',
    Postepay = 'POSTEPAY',
    Qrcode = 'QRCODE',
    Quicpay = 'QUICPAY',
    Rakutenedy = 'RAKUTENEDY',
    Rakutenpay = 'RAKUTENPAY',
    Samsungpay = 'SAMSUNGPAY',
    Sodexo = 'SODEXO',
    Sugoca = 'SUGOCA',
    Suica = 'SUICA',
    Swish = 'SWISH',
    Ticketrestaurant = 'TICKETRESTAURANT',
    Toica = 'TOICA',
    Travelerscheck = 'TRAVELERSCHECK',
    Tscubic = 'TSCUBIC',
    Twint = 'TWINT',
    Unionpay = 'UNIONPAY',
    Vev = 'VEV',
    Visa = 'VISA',
    Visaelectron = 'VISAELECTRON',
    Vob = 'VOB',
    Voucher = 'VOUCHER',
    Vpay = 'VPAY',
    Waon = 'WAON',
    Wechatpay = 'WECHATPAY',
    Wiretransfer = 'WIRETRANSFER',
    YuchoPay = 'Yucho Pay',
    Zelle = 'ZELLE',
    AuPay = 'auPay',
    DBarai = 'dBarai',
    Berweisung = 'Überweisung'
}/**
* @export
* @enum {string}
*/
export enum HotelWritePetsAllowedEnum {
    PetsWelcome = 'PETS_WELCOME',
    PetsWelcomeForFree = 'PETS_WELCOME_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWritePrivateBeachEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWritePrivateCarServiceEnum {
    PrivateCarService = 'PRIVATE_CAR_SERVICE',
    PrivateCarServiceForFree = 'PRIVATE_CAR_SERVICE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteRankTrackingFrequencyEnum {
    Weekly = 'WEEKLY',
    Monthly = 'MONTHLY',
    Quarterly = 'QUARTERLY'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteRankTrackingQueryTemplatesEnum {
    Keyword = 'KEYWORD',
    KeywordZip = 'KEYWORD_ZIP',
    KeywordCity = 'KEYWORD_CITY',
    KeywordInCity = 'KEYWORD_IN_CITY',
    KeywordNearMe = 'KEYWORD_NEAR_ME',
    KeywordCityState = 'KEYWORD_CITY_STATE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteRankTrackingSitesEnum {
    GoogleDesktop = 'GOOGLE_DESKTOP',
    GoogleMobile = 'GOOGLE_MOBILE',
    BingDesktop = 'BING_DESKTOP',
    BingMobile = 'BING_MOBILE',
    YahooDesktop = 'YAHOO_DESKTOP',
    YahooMobile = 'YAHOO_MOBILE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteRoomServiceEnum {
    RoomServiceAvailable = 'ROOM_SERVICE_AVAILABLE',
    RoomServiceAvailable24Hours = 'ROOM_SERVICE_AVAILABLE_24_HOURS',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteSalonEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteSaunaEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteScubaEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteSelfParkingEnum {
    SelfParkingAvailable = 'SELF_PARKING_AVAILABLE',
    SelfParkingAvailableForFree = 'SELF_PARKING_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteSmokeFreePropertyEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteSnorkelingEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteSocialHourEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteSpaEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteTableServiceEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteTennisEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteThermalPoolEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteTreadmillEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteTurndownServiceEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteValetParkingEnum {
    ValetParkingAvailable = 'VALET_PARKING_AVAILABLE',
    ValetParkingAvailableForFree = 'VALET_PARKING_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteVendingMachineEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWadingPoolEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWakeUpCallsEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWaterParkEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWaterSkiingEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWatercraftEnum {
    WatercraftRentals = 'WATERCRAFT_RENTALS',
    WatercraftRentalsForFree = 'WATERCRAFT_RENTALS_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWaterslideEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWavePoolEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWeightMachineEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWheelchairAccessibleEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteWifiAvailableEnum {
    WifiAvailable = 'WIFI_AVAILABLE',
    WifiAvailableForFree = 'WIFI_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}

export function HotelWriteFromJSON(json: any): HotelWrite {
    return HotelWriteFromJSONTyped(json, false);
}

export function HotelWriteFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelWrite {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...EntityWriteFromJSONTyped(json, ignoreDiscriminator),
        'meta': !exists(json, 'meta') ? undefined : AtmWriteAllOfMetaFromJSON(json['meta']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'address': !exists(json, 'address') ? undefined : AtmWriteAllOfAddressFromJSON(json['address']),
        'accessHours': !exists(json, 'accessHours') ? undefined : AtmWriteAllOfAccessHoursFromJSON(json['accessHours']),
        'additionalHoursText': !exists(json, 'additionalHoursText') ? undefined : json['additionalHoursText'],
        'addressHidden': !exists(json, 'addressHidden') ? undefined : json['addressHidden'],
        'adultPool': !exists(json, 'adultPool') ? undefined : json['adultPool'],
        'airportShuttle': !exists(json, 'airportShuttle') ? undefined : json['airportShuttle'],
        'airportTransfer': !exists(json, 'airportTransfer') ? undefined : json['airportTransfer'],
        'allInclusive': !exists(json, 'allInclusive') ? undefined : json['allInclusive'],
        'alternateNames': !exists(json, 'alternateNames') ? undefined : json['alternateNames'],
        'alternatePhone': !exists(json, 'alternatePhone') ? undefined : json['alternatePhone'],
        'alternateWebsites': !exists(json, 'alternateWebsites') ? undefined : json['alternateWebsites'],
        'androidAppUrl': !exists(json, 'androidAppUrl') ? undefined : json['androidAppUrl'],
        'associations': !exists(json, 'associations') ? undefined : json['associations'],
        'babysittingOffered': !exists(json, 'babysittingOffered') ? undefined : json['babysittingOffered'],
        'baggageStorage': !exists(json, 'baggageStorage') ? undefined : json['baggageStorage'],
        'bar': !exists(json, 'bar') ? undefined : json['bar'],
        'beachAccess': !exists(json, 'beachAccess') ? undefined : json['beachAccess'],
        'beachFrontProperty': !exists(json, 'beachFrontProperty') ? undefined : json['beachFrontProperty'],
        'bicycles': !exists(json, 'bicycles') ? undefined : json['bicycles'],
        'bios': !exists(json, 'bios') ? undefined : HealthcareFacilityWriteAllOfBiosFromJSON(json['bios']),
        'boutiqueStores': !exists(json, 'boutiqueStores') ? undefined : json['boutiqueStores'],
        'brands': !exists(json, 'brands') ? undefined : json['brands'],
        'breakfast': !exists(json, 'breakfast') ? undefined : json['breakfast'],
        'brunchHours': !exists(json, 'brunchHours') ? undefined : HotelWriteAllOfBrunchHoursFromJSON(json['brunchHours']),
        'businessCenter': !exists(json, 'businessCenter') ? undefined : json['businessCenter'],
        'calendars': !exists(json, 'calendars') ? undefined : HealthcareFacilityWriteAllOfCalendarsFromJSON(json['calendars']),
        'carRental': !exists(json, 'carRental') ? undefined : json['carRental'],
        'casino': !exists(json, 'casino') ? undefined : json['casino'],
        'categoryIds': !exists(json, 'categoryIds') ? undefined : json['categoryIds'],
        'catsAllowed': !exists(json, 'catsAllowed') ? undefined : json['catsAllowed'],
        'checkInTime': !exists(json, 'checkInTime') ? undefined : json['checkInTime'],
        'checkOutTime': !exists(json, 'checkOutTime') ? undefined : json['checkOutTime'],
        'classificationRating': !exists(json, 'classificationRating') ? undefined : json['classificationRating'],
        'closed': !exists(json, 'closed') ? undefined : json['closed'],
        'concierge': !exists(json, 'concierge') ? undefined : json['concierge'],
        'convenienceStore': !exists(json, 'convenienceStore') ? undefined : json['convenienceStore'],
        'currencyExchange': !exists(json, 'currencyExchange') ? undefined : json['currencyExchange'],
        'customKeywords': !exists(json, 'customKeywords') ? undefined : json['customKeywords'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayCoordinate': !exists(json, 'displayCoordinate') ? undefined : AtmWriteAllOfDisplayCoordinateFromJSON(json['displayCoordinate']),
        'doctorOnCall': !exists(json, 'doctorOnCall') ? undefined : json['doctorOnCall'],
        'dogsAllowed': !exists(json, 'dogsAllowed') ? undefined : json['dogsAllowed'],
        'dropoffCoordinate': !exists(json, 'dropoffCoordinate') ? undefined : AtmWriteAllOfDropoffCoordinateFromJSON(json['dropoffCoordinate']),
        'electricChargingStation': !exists(json, 'electricChargingStation') ? undefined : json['electricChargingStation'],
        'elevator': !exists(json, 'elevator') ? undefined : json['elevator'],
        'ellipticalMachine': !exists(json, 'ellipticalMachine') ? undefined : json['ellipticalMachine'],
        'emails': !exists(json, 'emails') ? undefined : json['emails'],
        'facebookCallToAction': !exists(json, 'facebookCallToAction') ? undefined : AtmWriteAllOfFacebookCallToActionFromJSON(json['facebookCallToAction']),
        'facebookCoverPhoto': !exists(json, 'facebookCoverPhoto') ? undefined : AtmWriteAllOfFacebookCoverPhotoFromJSON(json['facebookCoverPhoto']),
        'facebookDescriptor': !exists(json, 'facebookDescriptor') ? undefined : json['facebookDescriptor'],
        'facebookName': !exists(json, 'facebookName') ? undefined : json['facebookName'],
        'facebookOverrideCity': !exists(json, 'facebookOverrideCity') ? undefined : json['facebookOverrideCity'],
        'facebookPageUrl': !exists(json, 'facebookPageUrl') ? undefined : json['facebookPageUrl'],
        'facebookProfilePhoto': !exists(json, 'facebookProfilePhoto') ? undefined : AtmWriteAllOfFacebookProfilePhotoFromJSON(json['facebookProfilePhoto']),
        'facebookVanityUrl': !exists(json, 'facebookVanityUrl') ? undefined : json['facebookVanityUrl'],
        'fax': !exists(json, 'fax') ? undefined : json['fax'],
        'featuredMessage': !exists(json, 'featuredMessage') ? undefined : AtmWriteAllOfFeaturedMessageFromJSON(json['featuredMessage']),
        'firstPartyReviewPage': !exists(json, 'firstPartyReviewPage') ? undefined : json['firstPartyReviewPage'],
        'fitnessCenter': !exists(json, 'fitnessCenter') ? undefined : json['fitnessCenter'],
        'floorCount': !exists(json, 'floorCount') ? undefined : json['floorCount'],
        'freeWeights': !exists(json, 'freeWeights') ? undefined : json['freeWeights'],
        'frequentlyAskedQuestions': !exists(json, 'frequentlyAskedQuestions') ? undefined : (new Set((json['frequentlyAskedQuestions'] as Array<any>).map(AtmWriteAllOfFrequentlyAskedQuestionsFromJSON))),
        'frontDesk': !exists(json, 'frontDesk') ? undefined : json['frontDesk'],
        'gameRoom': !exists(json, 'gameRoom') ? undefined : json['gameRoom'],
        'geomodifier': !exists(json, 'geomodifier') ? undefined : json['geomodifier'],
        'giftShop': !exists(json, 'giftShop') ? undefined : json['giftShop'],
        'golf': !exists(json, 'golf') ? undefined : json['golf'],
        'googleAttributes': !exists(json, 'googleAttributes') ? undefined : json['googleAttributes'],
        'googleCoverPhoto': !exists(json, 'googleCoverPhoto') ? undefined : AtmWriteAllOfGoogleCoverPhotoFromJSON(json['googleCoverPhoto']),
        'googleMyBusinessLabels': !exists(json, 'googleMyBusinessLabels') ? undefined : json['googleMyBusinessLabels'],
        'googlePlaceId': !exists(json, 'googlePlaceId') ? undefined : json['googlePlaceId'],
        'googleProfilePhoto': !exists(json, 'googleProfilePhoto') ? undefined : AtmWriteAllOfGoogleProfilePhotoFromJSON(json['googleProfilePhoto']),
        'googleWebsiteOverride': !exists(json, 'googleWebsiteOverride') ? undefined : json['googleWebsiteOverride'],
        'happyHours': !exists(json, 'happyHours') ? undefined : HotelWriteAllOfHappyHoursFromJSON(json['happyHours']),
        'holidayHoursConversationEnabled': !exists(json, 'holidayHoursConversationEnabled') ? undefined : json['holidayHoursConversationEnabled'],
        'horsebackRiding': !exists(json, 'horsebackRiding') ? undefined : json['horsebackRiding'],
        'hotTub': !exists(json, 'hotTub') ? undefined : json['hotTub'],
        'hours': !exists(json, 'hours') ? undefined : AtmWriteAllOfHoursFromJSON(json['hours']),
        'housekeeping': !exists(json, 'housekeeping') ? undefined : json['housekeeping'],
        'impressum': !exists(json, 'impressum') ? undefined : json['impressum'],
        'indoorPoolCount': !exists(json, 'indoorPoolCount') ? undefined : json['indoorPoolCount'],
        'instagramHandle': !exists(json, 'instagramHandle') ? undefined : json['instagramHandle'],
        'iosAppUrl': !exists(json, 'iosAppUrl') ? undefined : json['iosAppUrl'],
        'isoRegionCode': !exists(json, 'isoRegionCode') ? undefined : json['isoRegionCode'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'kidFriendly': !exists(json, 'kidFriendly') ? undefined : json['kidFriendly'],
        'kidsClub': !exists(json, 'kidsClub') ? undefined : json['kidsClub'],
        'kidsStayFree': !exists(json, 'kidsStayFree') ? undefined : json['kidsStayFree'],
        'kitchenHours': !exists(json, 'kitchenHours') ? undefined : HotelWriteAllOfKitchenHoursFromJSON(json['kitchenHours']),
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'landingPageUrl': !exists(json, 'landingPageUrl') ? undefined : json['landingPageUrl'],
        'languages': !exists(json, 'languages') ? undefined : json['languages'],
        'laundry': !exists(json, 'laundry') ? undefined : json['laundry'],
        'lazyRiver': !exists(json, 'lazyRiver') ? undefined : json['lazyRiver'],
        'lifeguard': !exists(json, 'lifeguard') ? undefined : json['lifeguard'],
        'localPhone': !exists(json, 'localPhone') ? undefined : json['localPhone'],
        'localShuttle': !exists(json, 'localShuttle') ? undefined : json['localShuttle'],
        'locationType': !exists(json, 'locationType') ? undefined : json['locationType'],
        'logo': !exists(json, 'logo') ? undefined : AtmWriteAllOfLogoFromJSON(json['logo']),
        'mainPhone': !exists(json, 'mainPhone') ? undefined : json['mainPhone'],
        'massage': !exists(json, 'massage') ? undefined : json['massage'],
        'maxAgeOfKidsStayFree': !exists(json, 'maxAgeOfKidsStayFree') ? undefined : json['maxAgeOfKidsStayFree'],
        'maxNumberOfKidsStayFree': !exists(json, 'maxNumberOfKidsStayFree') ? undefined : json['maxNumberOfKidsStayFree'],
        'meetingRoomCount': !exists(json, 'meetingRoomCount') ? undefined : json['meetingRoomCount'],
        'menuUrl': !exists(json, 'menuUrl') ? undefined : HealthcareFacilityWriteAllOfMenuUrlFromJSON(json['menuUrl']),
        'menus': !exists(json, 'menus') ? undefined : HotelWriteAllOfMenusFromJSON(json['menus']),
        'mobilePhone': !exists(json, 'mobilePhone') ? undefined : json['mobilePhone'],
        'mobilityAccessible': !exists(json, 'mobilityAccessible') ? undefined : json['mobilityAccessible'],
        'nightclub': !exists(json, 'nightclub') ? undefined : json['nightclub'],
        'nudgeEnabled': !exists(json, 'nudgeEnabled') ? undefined : json['nudgeEnabled'],
        'orderUrl': !exists(json, 'orderUrl') ? undefined : HealthcareFacilityWriteAllOfOrderUrlFromJSON(json['orderUrl']),
        'outdoorPoolCount': !exists(json, 'outdoorPoolCount') ? undefined : json['outdoorPoolCount'],
        'parking': !exists(json, 'parking') ? undefined : json['parking'],
        'paymentOptions': !exists(json, 'paymentOptions') ? undefined : json['paymentOptions'],
        'petsAllowed': !exists(json, 'petsAllowed') ? undefined : json['petsAllowed'],
        'photoGallery': !exists(json, 'photoGallery') ? undefined : ((json['photoGallery'] as Array<any>).map(EventWriteAllOfPhotoGalleryFromJSON)),
        'pickupCoordinate': !exists(json, 'pickupCoordinate') ? undefined : AtmWriteAllOfPickupCoordinateFromJSON(json['pickupCoordinate']),
        'primaryConversationContact': !exists(json, 'primaryConversationContact') ? undefined : json['primaryConversationContact'],
        'privateBeach': !exists(json, 'privateBeach') ? undefined : json['privateBeach'],
        'privateCarService': !exists(json, 'privateCarService') ? undefined : json['privateCarService'],
        'productLists': !exists(json, 'productLists') ? undefined : HealthcareFacilityWriteAllOfProductListsFromJSON(json['productLists']),
        'questionsAndAnswers': !exists(json, 'questionsAndAnswers') ? undefined : json['questionsAndAnswers'],
        'rankTrackingCompetitors': !exists(json, 'rankTrackingCompetitors') ? undefined : (new Set((json['rankTrackingCompetitors'] as Array<any>).map(AtmWriteAllOfRankTrackingCompetitorsFromJSON))),
        'rankTrackingEnabled': !exists(json, 'rankTrackingEnabled') ? undefined : json['rankTrackingEnabled'],
        'rankTrackingFrequency': !exists(json, 'rankTrackingFrequency') ? undefined : json['rankTrackingFrequency'],
        'rankTrackingQueryTemplates': !exists(json, 'rankTrackingQueryTemplates') ? undefined : json['rankTrackingQueryTemplates'],
        'rankTrackingSites': !exists(json, 'rankTrackingSites') ? undefined : json['rankTrackingSites'],
        'reservationUrl': !exists(json, 'reservationUrl') ? undefined : HealthcareFacilityWriteAllOfReservationUrlFromJSON(json['reservationUrl']),
        'restaurantCount': !exists(json, 'restaurantCount') ? undefined : json['restaurantCount'],
        'reviewGenerationUrl': !exists(json, 'reviewGenerationUrl') ? undefined : json['reviewGenerationUrl'],
        'reviewResponseConversationEnabled': !exists(json, 'reviewResponseConversationEnabled') ? undefined : json['reviewResponseConversationEnabled'],
        'roomCount': !exists(json, 'roomCount') ? undefined : json['roomCount'],
        'roomService': !exists(json, 'roomService') ? undefined : json['roomService'],
        'routableCoordinate': !exists(json, 'routableCoordinate') ? undefined : AtmWriteAllOfRoutableCoordinateFromJSON(json['routableCoordinate']),
        'salon': !exists(json, 'salon') ? undefined : json['salon'],
        'sauna': !exists(json, 'sauna') ? undefined : json['sauna'],
        'scuba': !exists(json, 'scuba') ? undefined : json['scuba'],
        'selfParking': !exists(json, 'selfParking') ? undefined : json['selfParking'],
        'serviceArea': !exists(json, 'serviceArea') ? undefined : HealthcareFacilityWriteAllOfServiceAreaFromJSON(json['serviceArea']),
        'serviceAreaPlaces': !exists(json, 'serviceAreaPlaces') ? undefined : (new Set((json['serviceAreaPlaces'] as Array<any>).map(HealthcareFacilityWriteAllOfServiceAreaPlacesFromJSON))),
        'services': !exists(json, 'services') ? undefined : json['services'],
        'smokeFreeProperty': !exists(json, 'smokeFreeProperty') ? undefined : json['smokeFreeProperty'],
        'snorkeling': !exists(json, 'snorkeling') ? undefined : json['snorkeling'],
        'socialHour': !exists(json, 'socialHour') ? undefined : json['socialHour'],
        'spa': !exists(json, 'spa') ? undefined : json['spa'],
        'tableService': !exists(json, 'tableService') ? undefined : json['tableService'],
        'tennis': !exists(json, 'tennis') ? undefined : json['tennis'],
        'thermalPool': !exists(json, 'thermalPool') ? undefined : json['thermalPool'],
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
        'tollFreePhone': !exists(json, 'tollFreePhone') ? undefined : json['tollFreePhone'],
        'treadmill': !exists(json, 'treadmill') ? undefined : json['treadmill'],
        'ttyPhone': !exists(json, 'ttyPhone') ? undefined : json['ttyPhone'],
        'turndownService': !exists(json, 'turndownService') ? undefined : json['turndownService'],
        'twitterHandle': !exists(json, 'twitterHandle') ? undefined : json['twitterHandle'],
        'uberLink': !exists(json, 'uberLink') ? undefined : HealthcareFacilityWriteAllOfUberLinkFromJSON(json['uberLink']),
        'uberTripBranding': !exists(json, 'uberTripBranding') ? undefined : HealthcareFacilityWriteAllOfUberTripBrandingFromJSON(json['uberTripBranding']),
        'valetParking': !exists(json, 'valetParking') ? undefined : json['valetParking'],
        'vendingMachine': !exists(json, 'vendingMachine') ? undefined : json['vendingMachine'],
        'videos': !exists(json, 'videos') ? undefined : (new Set((json['videos'] as Array<any>).map(HealthcareFacilityWriteAllOfVideosFromJSON))),
        'wadingPool': !exists(json, 'wadingPool') ? undefined : json['wadingPool'],
        'wakeUpCalls': !exists(json, 'wakeUpCalls') ? undefined : json['wakeUpCalls'],
        'walkableCoordinate': !exists(json, 'walkableCoordinate') ? undefined : AtmWriteAllOfWalkableCoordinateFromJSON(json['walkableCoordinate']),
        'waterPark': !exists(json, 'waterPark') ? undefined : json['waterPark'],
        'waterSkiing': !exists(json, 'waterSkiing') ? undefined : json['waterSkiing'],
        'watercraft': !exists(json, 'watercraft') ? undefined : json['watercraft'],
        'waterslide': !exists(json, 'waterslide') ? undefined : json['waterslide'],
        'wavePool': !exists(json, 'wavePool') ? undefined : json['wavePool'],
        'websiteUrl': !exists(json, 'websiteUrl') ? undefined : AtmWriteAllOfWebsiteUrlFromJSON(json['websiteUrl']),
        'weightMachine': !exists(json, 'weightMachine') ? undefined : json['weightMachine'],
        'wheelchairAccessible': !exists(json, 'wheelchairAccessible') ? undefined : json['wheelchairAccessible'],
        'wifiAvailable': !exists(json, 'wifiAvailable') ? undefined : json['wifiAvailable'],
        'yearEstablished': !exists(json, 'yearEstablished') ? undefined : json['yearEstablished'],
        'yearLastRenovated': !exists(json, 'yearLastRenovated') ? undefined : json['yearLastRenovated'],
    };
}

export function HotelWriteToJSON(value?: HotelWrite | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...EntityWriteToJSON(value),
        'meta': AtmWriteAllOfMetaToJSON(value.meta),
        'name': value.name,
        'address': AtmWriteAllOfAddressToJSON(value.address),
        'accessHours': AtmWriteAllOfAccessHoursToJSON(value.accessHours),
        'additionalHoursText': value.additionalHoursText,
        'addressHidden': value.addressHidden,
        'adultPool': value.adultPool,
        'airportShuttle': value.airportShuttle,
        'airportTransfer': value.airportTransfer,
        'allInclusive': value.allInclusive,
        'alternateNames': value.alternateNames,
        'alternatePhone': value.alternatePhone,
        'alternateWebsites': value.alternateWebsites,
        'androidAppUrl': value.androidAppUrl,
        'associations': value.associations,
        'babysittingOffered': value.babysittingOffered,
        'baggageStorage': value.baggageStorage,
        'bar': value.bar,
        'beachAccess': value.beachAccess,
        'beachFrontProperty': value.beachFrontProperty,
        'bicycles': value.bicycles,
        'bios': HealthcareFacilityWriteAllOfBiosToJSON(value.bios),
        'boutiqueStores': value.boutiqueStores,
        'brands': value.brands,
        'breakfast': value.breakfast,
        'brunchHours': HotelWriteAllOfBrunchHoursToJSON(value.brunchHours),
        'businessCenter': value.businessCenter,
        'calendars': HealthcareFacilityWriteAllOfCalendarsToJSON(value.calendars),
        'carRental': value.carRental,
        'casino': value.casino,
        'categoryIds': value.categoryIds,
        'catsAllowed': value.catsAllowed,
        'checkInTime': value.checkInTime,
        'checkOutTime': value.checkOutTime,
        'classificationRating': value.classificationRating,
        'closed': value.closed,
        'concierge': value.concierge,
        'convenienceStore': value.convenienceStore,
        'currencyExchange': value.currencyExchange,
        'customKeywords': value.customKeywords,
        'description': value.description,
        'displayCoordinate': AtmWriteAllOfDisplayCoordinateToJSON(value.displayCoordinate),
        'doctorOnCall': value.doctorOnCall,
        'dogsAllowed': value.dogsAllowed,
        'dropoffCoordinate': AtmWriteAllOfDropoffCoordinateToJSON(value.dropoffCoordinate),
        'electricChargingStation': value.electricChargingStation,
        'elevator': value.elevator,
        'ellipticalMachine': value.ellipticalMachine,
        'emails': value.emails,
        'facebookCallToAction': AtmWriteAllOfFacebookCallToActionToJSON(value.facebookCallToAction),
        'facebookCoverPhoto': AtmWriteAllOfFacebookCoverPhotoToJSON(value.facebookCoverPhoto),
        'facebookDescriptor': value.facebookDescriptor,
        'facebookName': value.facebookName,
        'facebookOverrideCity': value.facebookOverrideCity,
        'facebookPageUrl': value.facebookPageUrl,
        'facebookProfilePhoto': AtmWriteAllOfFacebookProfilePhotoToJSON(value.facebookProfilePhoto),
        'facebookVanityUrl': value.facebookVanityUrl,
        'fax': value.fax,
        'featuredMessage': AtmWriteAllOfFeaturedMessageToJSON(value.featuredMessage),
        'firstPartyReviewPage': value.firstPartyReviewPage,
        'fitnessCenter': value.fitnessCenter,
        'floorCount': value.floorCount,
        'freeWeights': value.freeWeights,
        'frequentlyAskedQuestions': value.frequentlyAskedQuestions === undefined ? undefined : (Array.from(value.frequentlyAskedQuestions as Set<any>).map(AtmWriteAllOfFrequentlyAskedQuestionsToJSON)),
        'frontDesk': value.frontDesk,
        'gameRoom': value.gameRoom,
        'geomodifier': value.geomodifier,
        'giftShop': value.giftShop,
        'golf': value.golf,
        'googleAttributes': value.googleAttributes,
        'googleCoverPhoto': AtmWriteAllOfGoogleCoverPhotoToJSON(value.googleCoverPhoto),
        'googleMyBusinessLabels': value.googleMyBusinessLabels,
        'googlePlaceId': value.googlePlaceId,
        'googleProfilePhoto': AtmWriteAllOfGoogleProfilePhotoToJSON(value.googleProfilePhoto),
        'googleWebsiteOverride': value.googleWebsiteOverride,
        'happyHours': HotelWriteAllOfHappyHoursToJSON(value.happyHours),
        'holidayHoursConversationEnabled': value.holidayHoursConversationEnabled,
        'horsebackRiding': value.horsebackRiding,
        'hotTub': value.hotTub,
        'hours': AtmWriteAllOfHoursToJSON(value.hours),
        'housekeeping': value.housekeeping,
        'impressum': value.impressum,
        'indoorPoolCount': value.indoorPoolCount,
        'instagramHandle': value.instagramHandle,
        'iosAppUrl': value.iosAppUrl,
        'isoRegionCode': value.isoRegionCode,
        'keywords': value.keywords,
        'kidFriendly': value.kidFriendly,
        'kidsClub': value.kidsClub,
        'kidsStayFree': value.kidsStayFree,
        'kitchenHours': HotelWriteAllOfKitchenHoursToJSON(value.kitchenHours),
        'labels': value.labels,
        'landingPageUrl': value.landingPageUrl,
        'languages': value.languages,
        'laundry': value.laundry,
        'lazyRiver': value.lazyRiver,
        'lifeguard': value.lifeguard,
        'localPhone': value.localPhone,
        'localShuttle': value.localShuttle,
        'locationType': value.locationType,
        'logo': AtmWriteAllOfLogoToJSON(value.logo),
        'mainPhone': value.mainPhone,
        'massage': value.massage,
        'maxAgeOfKidsStayFree': value.maxAgeOfKidsStayFree,
        'maxNumberOfKidsStayFree': value.maxNumberOfKidsStayFree,
        'meetingRoomCount': value.meetingRoomCount,
        'menuUrl': HealthcareFacilityWriteAllOfMenuUrlToJSON(value.menuUrl),
        'menus': HotelWriteAllOfMenusToJSON(value.menus),
        'mobilePhone': value.mobilePhone,
        'mobilityAccessible': value.mobilityAccessible,
        'nightclub': value.nightclub,
        'nudgeEnabled': value.nudgeEnabled,
        'orderUrl': HealthcareFacilityWriteAllOfOrderUrlToJSON(value.orderUrl),
        'outdoorPoolCount': value.outdoorPoolCount,
        'parking': value.parking,
        'paymentOptions': value.paymentOptions,
        'petsAllowed': value.petsAllowed,
        'photoGallery': value.photoGallery === undefined ? undefined : ((value.photoGallery as Array<any>).map(EventWriteAllOfPhotoGalleryToJSON)),
        'pickupCoordinate': AtmWriteAllOfPickupCoordinateToJSON(value.pickupCoordinate),
        'primaryConversationContact': value.primaryConversationContact,
        'privateBeach': value.privateBeach,
        'privateCarService': value.privateCarService,
        'productLists': HealthcareFacilityWriteAllOfProductListsToJSON(value.productLists),
        'questionsAndAnswers': value.questionsAndAnswers,
        'rankTrackingCompetitors': value.rankTrackingCompetitors === undefined ? undefined : (Array.from(value.rankTrackingCompetitors as Set<any>).map(AtmWriteAllOfRankTrackingCompetitorsToJSON)),
        'rankTrackingEnabled': value.rankTrackingEnabled,
        'rankTrackingFrequency': value.rankTrackingFrequency,
        'rankTrackingQueryTemplates': value.rankTrackingQueryTemplates,
        'rankTrackingSites': value.rankTrackingSites,
        'reservationUrl': HealthcareFacilityWriteAllOfReservationUrlToJSON(value.reservationUrl),
        'restaurantCount': value.restaurantCount,
        'reviewGenerationUrl': value.reviewGenerationUrl,
        'reviewResponseConversationEnabled': value.reviewResponseConversationEnabled,
        'roomCount': value.roomCount,
        'roomService': value.roomService,
        'routableCoordinate': AtmWriteAllOfRoutableCoordinateToJSON(value.routableCoordinate),
        'salon': value.salon,
        'sauna': value.sauna,
        'scuba': value.scuba,
        'selfParking': value.selfParking,
        'serviceArea': HealthcareFacilityWriteAllOfServiceAreaToJSON(value.serviceArea),
        'serviceAreaPlaces': value.serviceAreaPlaces === undefined ? undefined : (Array.from(value.serviceAreaPlaces as Set<any>).map(HealthcareFacilityWriteAllOfServiceAreaPlacesToJSON)),
        'services': value.services,
        'smokeFreeProperty': value.smokeFreeProperty,
        'snorkeling': value.snorkeling,
        'socialHour': value.socialHour,
        'spa': value.spa,
        'tableService': value.tableService,
        'tennis': value.tennis,
        'thermalPool': value.thermalPool,
        'timezone': value.timezone,
        'tollFreePhone': value.tollFreePhone,
        'treadmill': value.treadmill,
        'ttyPhone': value.ttyPhone,
        'turndownService': value.turndownService,
        'twitterHandle': value.twitterHandle,
        'uberLink': HealthcareFacilityWriteAllOfUberLinkToJSON(value.uberLink),
        'uberTripBranding': HealthcareFacilityWriteAllOfUberTripBrandingToJSON(value.uberTripBranding),
        'valetParking': value.valetParking,
        'vendingMachine': value.vendingMachine,
        'videos': value.videos === undefined ? undefined : (Array.from(value.videos as Set<any>).map(HealthcareFacilityWriteAllOfVideosToJSON)),
        'wadingPool': value.wadingPool,
        'wakeUpCalls': value.wakeUpCalls,
        'walkableCoordinate': AtmWriteAllOfWalkableCoordinateToJSON(value.walkableCoordinate),
        'waterPark': value.waterPark,
        'waterSkiing': value.waterSkiing,
        'watercraft': value.watercraft,
        'waterslide': value.waterslide,
        'wavePool': value.wavePool,
        'websiteUrl': AtmWriteAllOfWebsiteUrlToJSON(value.websiteUrl),
        'weightMachine': value.weightMachine,
        'wheelchairAccessible': value.wheelchairAccessible,
        'wifiAvailable': value.wifiAvailable,
        'yearEstablished': value.yearEstablished,
        'yearLastRenovated': value.yearLastRenovated,
    };
}


