/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AtmWriteAllOfDisplayCoordinate,
    AtmWriteAllOfDisplayCoordinateFromJSON,
    AtmWriteAllOfDisplayCoordinateFromJSONTyped,
    AtmWriteAllOfDisplayCoordinateToJSON,
    AtmWriteAllOfLogo,
    AtmWriteAllOfLogoFromJSON,
    AtmWriteAllOfLogoFromJSONTyped,
    AtmWriteAllOfLogoToJSON,
    AtmWriteAllOfMeta,
    AtmWriteAllOfMetaFromJSON,
    AtmWriteAllOfMetaFromJSONTyped,
    AtmWriteAllOfMetaToJSON,
    JobWriteAllOfLocation,
    JobWriteAllOfLocationFromJSON,
    JobWriteAllOfLocationFromJSONTyped,
    JobWriteAllOfLocationToJSON,
} from './';

/**
 * 
 * @export
 * @interface JobWriteAllOf
 */
export interface JobWriteAllOf {
    /**
     * 
     * @type {AtmWriteAllOfMeta}
     * @memberof JobWriteAllOf
     */
    meta?: AtmWriteAllOfMeta;
    /**
     * 
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * * a phone number
     * @type {string}
     * @memberof JobWriteAllOf
     */
    name?: string;
    /**
     * The application URL
     * @type {string}
     * @memberof JobWriteAllOf
     */
    applicationUrl?: string;
    /**
     * Yext Category IDs.
     * 
     * IDs must be valid and selectable (i.e., cannot be parent categories).
     * 
     * NOTE: The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings.
     * @type {Array<string>}
     * @memberof JobWriteAllOf
     */
    categoryIds?: Array<string>;
    /**
     * The date this entity was posted
     * @type {Date}
     * @memberof JobWriteAllOf
     */
    datePosted?: Date;
    /**
     * A description of the entity
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * @type {string}
     * @memberof JobWriteAllOf
     */
    description?: string;
    /**
     * 
     * @type {AtmWriteAllOfDisplayCoordinate}
     * @memberof JobWriteAllOf
     */
    displayCoordinate?: AtmWriteAllOfDisplayCoordinate;
    /**
     * The employment type for the open job. Indicates whether the job is full-time, part-time, temporary, etc.
     * @type {string}
     * @memberof JobWriteAllOf
     */
    employmentType?: JobWriteAllOfEmploymentTypeEnum;
    /**
     * The unique IDs of the entity's Google My Business keywords, as well as the unique IDs of any values selected for each keyword.
     * 
     * Valid keywords (e.g., `has_drive_through`, `has_fitting_room`, `kitchen_in_room`) are determined by the entity's primary category. A full list of keywords can be retrieved with the Google Fields: List endpoint.
     * 
     * Keyword values provide more details on how the keyword applies to the entity (e.g., if the keyword is `has_drive_through`, its values may be `true` or `false`).
     * 
     * * If the **`v`** parameter is before `20181204`: **`googleAttributes`** is formatted as a map of key-value pairs (e.g., `[{ "id": "has_wheelchair_accessible_entrance", "values": [ "true" ] }]`)
     * * If the **`v`** parameter is on or after `20181204`: the contents are formatted as a list of objects (e.g., `{ "has_wheelchair_accessible_entrance": [ "true" ]}`)
     * 
     * **NOTE:** The latest Google Attributes are available via the Google Fields: List endpoint. Google Attributes are managed by Google and are subject to change without notice. To prevent errors, make sure your API implementation is not dependent on the presence of specific attributes.
     * @type {object}
     * @memberof JobWriteAllOf
     */
    googleAttributes?: object;
    /**
     * The organization that is hiring for the open job
     * @type {string}
     * @memberof JobWriteAllOf
     */
    hiringOrganization?: string;
    /**
     * Keywords that describe the entity.
     * 
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof JobWriteAllOf
     */
    keywords?: Set<string>;
    /**
     * The IDs of the entity labels that have been added to this entity. Entity labels help you identify entities that share a certain characteristic; they do not appear on your entity's listings.
     * 
     * **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.
     * @type {Array<string>}
     * @memberof JobWriteAllOf
     */
    labels?: Array<string>;
    /**
     * The URL of this entity's Landing Page that was created with Yext Pages
     * @type {string}
     * @memberof JobWriteAllOf
     */
    landingPageUrl?: string;
    /**
     * 
     * @type {JobWriteAllOfLocation}
     * @memberof JobWriteAllOf
     */
    location?: JobWriteAllOfLocation;
    /**
     * 
     * @type {AtmWriteAllOfLogo}
     * @memberof JobWriteAllOf
     */
    logo?: AtmWriteAllOfLogo;
    /**
     * Indicates whether Knowledge Nudge is enabled for the Yext Knowledge Assistant for this entity
     * @type {boolean}
     * @memberof JobWriteAllOf
     */
    nudgeEnabled?: boolean;
    /**
     * ID of the user who is the primary Knowledge Assistant contact for the entity
     * @type {string}
     * @memberof JobWriteAllOf
     */
    primaryConversationContact?: string;
    /**
     * The timezone of the entity, in the standard `IANA time zone database` format (tz database). e.g. `"America/New_York"`
     * @type {string}
     * @memberof JobWriteAllOf
     */
    timezone?: string;
    /**
     * The date this entity is valid through.
     * @type {Date}
     * @memberof JobWriteAllOf
     */
    validThrough?: Date;
    /**
     * Indicates whether the job is remote.
     * @type {boolean}
     * @memberof JobWriteAllOf
     */
    workRemote?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum JobWriteAllOfEmploymentTypeEnum {
    FullTime = 'FULL_TIME',
    PartTime = 'PART_TIME',
    Contractor = 'CONTRACTOR',
    Temporary = 'TEMPORARY',
    Intern = 'INTERN',
    Volunteer = 'VOLUNTEER',
    PerDiem = 'PER_DIEM',
    Other = 'OTHER'
}

export function JobWriteAllOfFromJSON(json: any): JobWriteAllOf {
    return JobWriteAllOfFromJSONTyped(json, false);
}

export function JobWriteAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobWriteAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'meta': !exists(json, 'meta') ? undefined : AtmWriteAllOfMetaFromJSON(json['meta']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'applicationUrl': !exists(json, 'applicationUrl') ? undefined : json['applicationUrl'],
        'categoryIds': !exists(json, 'categoryIds') ? undefined : json['categoryIds'],
        'datePosted': !exists(json, 'datePosted') ? undefined : (new Date(json['datePosted'])),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayCoordinate': !exists(json, 'displayCoordinate') ? undefined : AtmWriteAllOfDisplayCoordinateFromJSON(json['displayCoordinate']),
        'employmentType': !exists(json, 'employmentType') ? undefined : json['employmentType'],
        'googleAttributes': !exists(json, 'googleAttributes') ? undefined : json['googleAttributes'],
        'hiringOrganization': !exists(json, 'hiringOrganization') ? undefined : json['hiringOrganization'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'landingPageUrl': !exists(json, 'landingPageUrl') ? undefined : json['landingPageUrl'],
        'location': !exists(json, 'location') ? undefined : JobWriteAllOfLocationFromJSON(json['location']),
        'logo': !exists(json, 'logo') ? undefined : AtmWriteAllOfLogoFromJSON(json['logo']),
        'nudgeEnabled': !exists(json, 'nudgeEnabled') ? undefined : json['nudgeEnabled'],
        'primaryConversationContact': !exists(json, 'primaryConversationContact') ? undefined : json['primaryConversationContact'],
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
        'validThrough': !exists(json, 'validThrough') ? undefined : (new Date(json['validThrough'])),
        'workRemote': !exists(json, 'workRemote') ? undefined : json['workRemote'],
    };
}

export function JobWriteAllOfToJSON(value?: JobWriteAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'meta': AtmWriteAllOfMetaToJSON(value.meta),
        'name': value.name,
        'applicationUrl': value.applicationUrl,
        'categoryIds': value.categoryIds,
        'datePosted': value.datePosted === undefined ? undefined : (value.datePosted.toISOString().substr(0,10)),
        'description': value.description,
        'displayCoordinate': AtmWriteAllOfDisplayCoordinateToJSON(value.displayCoordinate),
        'employmentType': value.employmentType,
        'googleAttributes': value.googleAttributes,
        'hiringOrganization': value.hiringOrganization,
        'keywords': value.keywords,
        'labels': value.labels,
        'landingPageUrl': value.landingPageUrl,
        'location': JobWriteAllOfLocationToJSON(value.location),
        'logo': AtmWriteAllOfLogoToJSON(value.logo),
        'nudgeEnabled': value.nudgeEnabled,
        'primaryConversationContact': value.primaryConversationContact,
        'timezone': value.timezone,
        'validThrough': value.validThrough === undefined ? undefined : (value.validThrough.toISOString()),
        'workRemote': value.workRemote,
    };
}


