/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BaseEclItem,
    BaseEclItemFromJSON,
    BaseEclItemFromJSONTyped,
    BaseEclItemToJSON,
    BioItemAllOf,
    BioItemAllOfFromJSON,
    BioItemAllOfFromJSONTyped,
    BioItemAllOfToJSON,
    CommonEclDefinitionsPhoto,
    CommonEclDefinitionsPhotoFromJSON,
    CommonEclDefinitionsPhotoFromJSONTyped,
    CommonEclDefinitionsPhotoToJSON,
} from './';

/**
 * 
 * @export
 * @interface BioItem
 */
export interface BioItem {
    /**
     * Item ID.
     * @type {string}
     * @memberof BioItem
     */
    id?: string;
    /**
     * Item name.
     * @type {string}
     * @memberof BioItem
     */
    name?: string;
    /**
     * Item description.
     * @type {string}
     * @memberof BioItem
     */
    description?: string;
    /**
     * 
     * @type {CommonEclDefinitionsPhoto}
     * @memberof BioItem
     */
    photo?: CommonEclDefinitionsPhoto;
    /**
     * Person's title.
     * @type {string}
     * @memberof BioItem
     */
    title?: string;
    /**
     * Item Phone.
     * @type {string}
     * @memberof BioItem
     */
    phone?: string;
    /**
     * Item Email.
     * @type {string}
     * @memberof BioItem
     */
    email?: string;
    /**
     * List of up to 10 strings.
     * @type {Array<string>}
     * @memberof BioItem
     */
    education?: Array<string>;
    /**
     * List of up to 10 strings.
     * @type {Array<string>}
     * @memberof BioItem
     */
    certifications?: Array<string>;
    /**
     * List of up to 100 strings.
     * @type {Array<string>}
     * @memberof BioItem
     */
    services?: Array<string>;
    /**
     * Item URL.
     * @type {string}
     * @memberof BioItem
     */
    url?: string;
}

export function BioItemFromJSON(json: any): BioItem {
    return BioItemFromJSONTyped(json, false);
}

export function BioItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): BioItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'photo': !exists(json, 'photo') ? undefined : CommonEclDefinitionsPhotoFromJSON(json['photo']),
        'title': !exists(json, 'title') ? undefined : json['title'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'education': !exists(json, 'education') ? undefined : json['education'],
        'certifications': !exists(json, 'certifications') ? undefined : json['certifications'],
        'services': !exists(json, 'services') ? undefined : json['services'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function BioItemToJSON(value?: BioItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'photo': CommonEclDefinitionsPhotoToJSON(value.photo),
        'title': value.title,
        'phone': value.phone,
        'email': value.email,
        'education': value.education,
        'certifications': value.certifications,
        'services': value.services,
        'url': value.url,
    };
}


