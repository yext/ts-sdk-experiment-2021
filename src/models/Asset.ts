/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AssetForEntities,
    AssetForEntitiesFromJSON,
    AssetForEntitiesFromJSONTyped,
    AssetForEntitiesToJSON,
    AssetUsage,
    AssetUsageFromJSON,
    AssetUsageFromJSONTyped,
    AssetUsageToJSON,
} from './';

import {
     AssetForComplexImageFromJSONTyped,
     AssetForComplexVideoFromJSONTyped,
     AssetForTextFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * Primary key. Unique alphanumeric (Latin-1) ID assigned by the Yext.
     * @type {string}
     * @memberof Asset
     */
    readonly id?: string;
    /**
     * Asset name.
     * @type {string}
     * @memberof Asset
     */
    name: string;
    /**
     * Asset description.
     * @type {string}
     * @memberof Asset
     */
    description?: string;
    /**
     * Asset Type. In addition to the choices below, names of custom field types may also be used.
     * 
     * One of:
     * @type {string}
     * @memberof Asset
     */
    type: string;
    /**
     * 
     * @type {AssetForEntities}
     * @memberof Asset
     */
    forEntities: AssetForEntities;
    /**
     * 
     * @type {Array<AssetUsage>}
     * @memberof Asset
     */
    usage: Array<AssetUsage>;
    /**
     * Language of the asset.
     * @type {string}
     * @memberof Asset
     */
    locale?: string;
    /**
     * List of text labels for this asset.
     * @type {Array<string>}
     * @memberof Asset
     */
    labels?: Array<string>;
    /**
     * ID of the user who owns the asset.
     * @type {string}
     * @memberof Asset
     */
    owner?: string;
}

export function AssetFromJSON(json: any): Asset {
    return AssetFromJSONTyped(json, false);
}

export function AssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Asset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'complexImage') {
            return AssetForComplexImageFromJSONTyped(json, true);
        }
        if (json['type'] === 'complexVideo') {
            return AssetForComplexVideoFromJSONTyped(json, true);
        }
        if (json['type'] === 'text') {
            return AssetForTextFromJSONTyped(json, true);
        }
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': json['type'],
        'forEntities': AssetForEntitiesFromJSON(json['forEntities']),
        'usage': ((json['usage'] as Array<any>).map(AssetUsageFromJSON)),
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
    };
}

export function AssetToJSON(value?: Asset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'type': value.type,
        'forEntities': AssetForEntitiesToJSON(value.forEntities),
        'usage': ((value.usage as Array<any>).map(AssetUsageToJSON)),
        'locale': value.locale,
        'labels': value.labels,
        'owner': value.owner,
    };
}


