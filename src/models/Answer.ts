/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Answer
 */
export interface Answer {
    /**
     * ID of this answer.
     * @type {number}
     * @memberof Answer
     */
    id?: number;
    /**
     * The name of the person that created this answer.
     * @type {string}
     * @memberof Answer
     */
    authorName?: string;
    /**
     * The photo URL of the person that created this answer.
     * @type {string}
     * @memberof Answer
     */
    authorPhotoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    authorType?: AnswerAuthorTypeEnum;
    /**
     * Number of upvotes the answer has.
     * @type {number}
     * @memberof Answer
     */
    upvoteCount?: number;
    /**
     * The answer text.
     * @type {string}
     * @memberof Answer
     */
    content?: string;
    /**
     * Timestamp the answer was created on the publisher.
     * @type {number}
     * @memberof Answer
     */
    createTime?: number;
    /**
     * Timestamp the answer was last updated on the publisher.
     * @type {number}
     * @memberof Answer
     */
    updateTime?: number;
}

/**
* @export
* @enum {string}
*/
export enum AnswerAuthorTypeEnum {
    RegularUser = 'REGULAR_USER',
    LocalGuide = 'LOCAL_GUIDE',
    Merchant = 'MERCHANT',
    AuthorTypeUnspecified = 'AUTHOR_TYPE_UNSPECIFIED'
}

export function AnswerFromJSON(json: any): Answer {
    return AnswerFromJSONTyped(json, false);
}

export function AnswerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Answer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'authorName': !exists(json, 'authorName') ? undefined : json['authorName'],
        'authorPhotoUrl': !exists(json, 'authorPhotoUrl') ? undefined : json['authorPhotoUrl'],
        'authorType': !exists(json, 'authorType') ? undefined : json['authorType'],
        'upvoteCount': !exists(json, 'upvoteCount') ? undefined : json['upvoteCount'],
        'content': !exists(json, 'content') ? undefined : json['content'],
        'createTime': !exists(json, 'createTime') ? undefined : json['createTime'],
        'updateTime': !exists(json, 'updateTime') ? undefined : json['updateTime'],
    };
}

export function AnswerToJSON(value?: Answer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'authorName': value.authorName,
        'authorPhotoUrl': value.authorPhotoUrl,
        'authorType': value.authorType,
        'upvoteCount': value.upvoteCount,
        'content': value.content,
        'createTime': value.createTime,
        'updateTime': value.updateTime,
    };
}


