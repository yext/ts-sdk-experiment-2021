/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AtmWriteAllOfAccessHours,
    AtmWriteAllOfAccessHoursFromJSON,
    AtmWriteAllOfAccessHoursFromJSONTyped,
    AtmWriteAllOfAccessHoursToJSON,
    AtmWriteAllOfAddress,
    AtmWriteAllOfAddressFromJSON,
    AtmWriteAllOfAddressFromJSONTyped,
    AtmWriteAllOfAddressToJSON,
    AtmWriteAllOfDisplayCoordinate,
    AtmWriteAllOfDisplayCoordinateFromJSON,
    AtmWriteAllOfDisplayCoordinateFromJSONTyped,
    AtmWriteAllOfDisplayCoordinateToJSON,
    AtmWriteAllOfDriveThroughHours,
    AtmWriteAllOfDriveThroughHoursFromJSON,
    AtmWriteAllOfDriveThroughHoursFromJSONTyped,
    AtmWriteAllOfDriveThroughHoursToJSON,
    AtmWriteAllOfDropoffCoordinate,
    AtmWriteAllOfDropoffCoordinateFromJSON,
    AtmWriteAllOfDropoffCoordinateFromJSONTyped,
    AtmWriteAllOfDropoffCoordinateToJSON,
    AtmWriteAllOfFacebookCallToAction,
    AtmWriteAllOfFacebookCallToActionFromJSON,
    AtmWriteAllOfFacebookCallToActionFromJSONTyped,
    AtmWriteAllOfFacebookCallToActionToJSON,
    AtmWriteAllOfFacebookCoverPhoto,
    AtmWriteAllOfFacebookCoverPhotoFromJSON,
    AtmWriteAllOfFacebookCoverPhotoFromJSONTyped,
    AtmWriteAllOfFacebookCoverPhotoToJSON,
    AtmWriteAllOfFacebookProfilePhoto,
    AtmWriteAllOfFacebookProfilePhotoFromJSON,
    AtmWriteAllOfFacebookProfilePhotoFromJSONTyped,
    AtmWriteAllOfFacebookProfilePhotoToJSON,
    AtmWriteAllOfFeaturedMessage,
    AtmWriteAllOfFeaturedMessageFromJSON,
    AtmWriteAllOfFeaturedMessageFromJSONTyped,
    AtmWriteAllOfFeaturedMessageToJSON,
    AtmWriteAllOfFrequentlyAskedQuestions,
    AtmWriteAllOfFrequentlyAskedQuestionsFromJSON,
    AtmWriteAllOfFrequentlyAskedQuestionsFromJSONTyped,
    AtmWriteAllOfFrequentlyAskedQuestionsToJSON,
    AtmWriteAllOfGoogleCoverPhoto,
    AtmWriteAllOfGoogleCoverPhotoFromJSON,
    AtmWriteAllOfGoogleCoverPhotoFromJSONTyped,
    AtmWriteAllOfGoogleCoverPhotoToJSON,
    AtmWriteAllOfGoogleProfilePhoto,
    AtmWriteAllOfGoogleProfilePhotoFromJSON,
    AtmWriteAllOfGoogleProfilePhotoFromJSONTyped,
    AtmWriteAllOfGoogleProfilePhotoToJSON,
    AtmWriteAllOfHours,
    AtmWriteAllOfHoursFromJSON,
    AtmWriteAllOfHoursFromJSONTyped,
    AtmWriteAllOfHoursToJSON,
    AtmWriteAllOfLogo,
    AtmWriteAllOfLogoFromJSON,
    AtmWriteAllOfLogoFromJSONTyped,
    AtmWriteAllOfLogoToJSON,
    AtmWriteAllOfMeta,
    AtmWriteAllOfMetaFromJSON,
    AtmWriteAllOfMetaFromJSONTyped,
    AtmWriteAllOfMetaToJSON,
    AtmWriteAllOfPickupCoordinate,
    AtmWriteAllOfPickupCoordinateFromJSON,
    AtmWriteAllOfPickupCoordinateFromJSONTyped,
    AtmWriteAllOfPickupCoordinateToJSON,
    AtmWriteAllOfRankTrackingCompetitors,
    AtmWriteAllOfRankTrackingCompetitorsFromJSON,
    AtmWriteAllOfRankTrackingCompetitorsFromJSONTyped,
    AtmWriteAllOfRankTrackingCompetitorsToJSON,
    AtmWriteAllOfRoutableCoordinate,
    AtmWriteAllOfRoutableCoordinateFromJSON,
    AtmWriteAllOfRoutableCoordinateFromJSONTyped,
    AtmWriteAllOfRoutableCoordinateToJSON,
    AtmWriteAllOfWalkableCoordinate,
    AtmWriteAllOfWalkableCoordinateFromJSON,
    AtmWriteAllOfWalkableCoordinateFromJSONTyped,
    AtmWriteAllOfWalkableCoordinateToJSON,
    AtmWriteAllOfWebsiteUrl,
    AtmWriteAllOfWebsiteUrlFromJSON,
    AtmWriteAllOfWebsiteUrlFromJSONTyped,
    AtmWriteAllOfWebsiteUrlToJSON,
    EventWriteAllOfPhotoGallery,
    EventWriteAllOfPhotoGalleryFromJSON,
    EventWriteAllOfPhotoGalleryFromJSONTyped,
    EventWriteAllOfPhotoGalleryToJSON,
    HealthcareFacilityWriteAllOfBios,
    HealthcareFacilityWriteAllOfBiosFromJSON,
    HealthcareFacilityWriteAllOfBiosFromJSONTyped,
    HealthcareFacilityWriteAllOfBiosToJSON,
    HealthcareFacilityWriteAllOfCalendars,
    HealthcareFacilityWriteAllOfCalendarsFromJSON,
    HealthcareFacilityWriteAllOfCalendarsFromJSONTyped,
    HealthcareFacilityWriteAllOfCalendarsToJSON,
    HealthcareFacilityWriteAllOfMenuUrl,
    HealthcareFacilityWriteAllOfMenuUrlFromJSON,
    HealthcareFacilityWriteAllOfMenuUrlFromJSONTyped,
    HealthcareFacilityWriteAllOfMenuUrlToJSON,
    HealthcareFacilityWriteAllOfOnlineServiceHours,
    HealthcareFacilityWriteAllOfOnlineServiceHoursFromJSON,
    HealthcareFacilityWriteAllOfOnlineServiceHoursFromJSONTyped,
    HealthcareFacilityWriteAllOfOnlineServiceHoursToJSON,
    HealthcareFacilityWriteAllOfOrderUrl,
    HealthcareFacilityWriteAllOfOrderUrlFromJSON,
    HealthcareFacilityWriteAllOfOrderUrlFromJSONTyped,
    HealthcareFacilityWriteAllOfOrderUrlToJSON,
    HealthcareFacilityWriteAllOfPickupHours,
    HealthcareFacilityWriteAllOfPickupHoursFromJSON,
    HealthcareFacilityWriteAllOfPickupHoursFromJSONTyped,
    HealthcareFacilityWriteAllOfPickupHoursToJSON,
    HealthcareFacilityWriteAllOfProductLists,
    HealthcareFacilityWriteAllOfProductListsFromJSON,
    HealthcareFacilityWriteAllOfProductListsFromJSONTyped,
    HealthcareFacilityWriteAllOfProductListsToJSON,
    HealthcareFacilityWriteAllOfReservationUrl,
    HealthcareFacilityWriteAllOfReservationUrlFromJSON,
    HealthcareFacilityWriteAllOfReservationUrlFromJSONTyped,
    HealthcareFacilityWriteAllOfReservationUrlToJSON,
    HealthcareFacilityWriteAllOfServiceArea,
    HealthcareFacilityWriteAllOfServiceAreaFromJSON,
    HealthcareFacilityWriteAllOfServiceAreaFromJSONTyped,
    HealthcareFacilityWriteAllOfServiceAreaToJSON,
    HealthcareFacilityWriteAllOfServiceAreaPlaces,
    HealthcareFacilityWriteAllOfServiceAreaPlacesFromJSON,
    HealthcareFacilityWriteAllOfServiceAreaPlacesFromJSONTyped,
    HealthcareFacilityWriteAllOfServiceAreaPlacesToJSON,
    HealthcareFacilityWriteAllOfUberLink,
    HealthcareFacilityWriteAllOfUberLinkFromJSON,
    HealthcareFacilityWriteAllOfUberLinkFromJSONTyped,
    HealthcareFacilityWriteAllOfUberLinkToJSON,
    HealthcareFacilityWriteAllOfUberTripBranding,
    HealthcareFacilityWriteAllOfUberTripBrandingFromJSON,
    HealthcareFacilityWriteAllOfUberTripBrandingFromJSONTyped,
    HealthcareFacilityWriteAllOfUberTripBrandingToJSON,
    HealthcareFacilityWriteAllOfVideos,
    HealthcareFacilityWriteAllOfVideosFromJSON,
    HealthcareFacilityWriteAllOfVideosFromJSONTyped,
    HealthcareFacilityWriteAllOfVideosToJSON,
    HotelWriteAllOfBrunchHours,
    HotelWriteAllOfBrunchHoursFromJSON,
    HotelWriteAllOfBrunchHoursFromJSONTyped,
    HotelWriteAllOfBrunchHoursToJSON,
    HotelWriteAllOfHappyHours,
    HotelWriteAllOfHappyHoursFromJSON,
    HotelWriteAllOfHappyHoursFromJSONTyped,
    HotelWriteAllOfHappyHoursToJSON,
    HotelWriteAllOfKitchenHours,
    HotelWriteAllOfKitchenHoursFromJSON,
    HotelWriteAllOfKitchenHoursFromJSONTyped,
    HotelWriteAllOfKitchenHoursToJSON,
    HotelWriteAllOfMenus,
    HotelWriteAllOfMenusFromJSON,
    HotelWriteAllOfMenusFromJSONTyped,
    HotelWriteAllOfMenusToJSON,
    LocationWriteAllOfDeliveryHours,
    LocationWriteAllOfDeliveryHoursFromJSON,
    LocationWriteAllOfDeliveryHoursFromJSONTyped,
    LocationWriteAllOfDeliveryHoursToJSON,
    LocationWriteAllOfSeniorHours,
    LocationWriteAllOfSeniorHoursFromJSON,
    LocationWriteAllOfSeniorHoursFromJSONTyped,
    LocationWriteAllOfSeniorHoursToJSON,
    LocationWriteAllOfTakeoutHours,
    LocationWriteAllOfTakeoutHoursFromJSON,
    LocationWriteAllOfTakeoutHoursFromJSONTyped,
    LocationWriteAllOfTakeoutHoursToJSON,
} from './';

/**
 * 
 * @export
 * @interface RestaurantWriteAllOf
 */
export interface RestaurantWriteAllOf {
    /**
     * 
     * @type {AtmWriteAllOfMeta}
     * @memberof RestaurantWriteAllOf
     */
    meta?: AtmWriteAllOfMeta;
    /**
     * 
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * * a phone number
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    name?: string;
    /**
     * 
     * @type {AtmWriteAllOfAddress}
     * @memberof RestaurantWriteAllOf
     */
    address?: AtmWriteAllOfAddress;
    /**
     * Indicates whether the entity accepts reservations.
     * @type {boolean}
     * @memberof RestaurantWriteAllOf
     */
    acceptsReservations?: boolean;
    /**
     * 
     * @type {AtmWriteAllOfAccessHours}
     * @memberof RestaurantWriteAllOf
     */
    accessHours?: AtmWriteAllOfAccessHours;
    /**
     * Additional information about hours that does not fit in **`hours`** (e.g., `"Closed during the winter"`)
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    additionalHoursText?: string;
    /**
     * If `true`, the entity's street address will not be shown on listings. Defaults to `false`.
     * @type {boolean}
     * @memberof RestaurantWriteAllOf
     */
    addressHidden?: boolean;
    /**
     * Other names for your business that you would like us to use when tracking your search performance
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 3 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    alternateNames?: Set<string>;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    alternatePhone?: string;
    /**
     * Other websites for your business that we should search for when tracking your search performance
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 3 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* common domain names, e.g., google.com, youtube.com, etc.
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    alternateWebsites?: Set<string>;
    /**
     * The URL where consumers can download the entity's Android app
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    androidAppUrl?: string;
    /**
     * Association memberships relevant to the entity (e.g., `"New York Doctors Association"`)
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    associations?: Set<string>;
    /**
     * The formality of clothing typically worn at this restaurant
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    attire?: RestaurantWriteAllOfAttireEnum;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfBios}
     * @memberof RestaurantWriteAllOf
     */
    bios?: HealthcareFacilityWriteAllOfBios;
    /**
     * Brands sold by this entity
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    brands?: Set<string>;
    /**
     * 
     * @type {HotelWriteAllOfBrunchHours}
     * @memberof RestaurantWriteAllOf
     */
    brunchHours?: HotelWriteAllOfBrunchHours;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfCalendars}
     * @memberof RestaurantWriteAllOf
     */
    calendars?: HealthcareFacilityWriteAllOfCalendars;
    /**
     * Yext Category IDs.
     * 
     * IDs must be valid and selectable (i.e., cannot be parent categories).
     * 
     * NOTE: The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings.
     * @type {Array<string>}
     * @memberof RestaurantWriteAllOf
     */
    categoryIds?: Array<string>;
    /**
     * Indicates whether the entity is closed
     * @type {boolean}
     * @memberof RestaurantWriteAllOf
     */
    closed?: boolean;
    /**
     * Additional keywords you would like us to use when tracking your search performance
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 5 elements.
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    customKeywords?: Set<string>;
    /**
     * 
     * @type {LocationWriteAllOfDeliveryHours}
     * @memberof RestaurantWriteAllOf
     */
    deliveryHours?: LocationWriteAllOfDeliveryHours;
    /**
     * A description of the entity
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    description?: string;
    /**
     * 
     * @type {AtmWriteAllOfDisplayCoordinate}
     * @memberof RestaurantWriteAllOf
     */
    displayCoordinate?: AtmWriteAllOfDisplayCoordinate;
    /**
     * 
     * @type {AtmWriteAllOfDriveThroughHours}
     * @memberof RestaurantWriteAllOf
     */
    driveThroughHours?: AtmWriteAllOfDriveThroughHours;
    /**
     * 
     * @type {AtmWriteAllOfDropoffCoordinate}
     * @memberof RestaurantWriteAllOf
     */
    dropoffCoordinate?: AtmWriteAllOfDropoffCoordinate;
    /**
     * Emails addresses for this entity's point of contact
     * 
     * Must be valid email addresses
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 5 elements.
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    emails?: Set<string>;
    /**
     * 
     * @type {AtmWriteAllOfFacebookCallToAction}
     * @memberof RestaurantWriteAllOf
     */
    facebookCallToAction?: AtmWriteAllOfFacebookCallToAction;
    /**
     * 
     * @type {AtmWriteAllOfFacebookCoverPhoto}
     * @memberof RestaurantWriteAllOf
     */
    facebookCoverPhoto?: AtmWriteAllOfFacebookCoverPhoto;
    /**
     * Location Descriptors are used for Enterprise businesses that sync Facebook listings using brand page location structure. The Location Descriptor is typically an additional geographic description (e.g. geomodifier) that will appear in parentheses after the name on the Facebook listing.
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    facebookDescriptor?: string;
    /**
     * The name for this entity's Facebook profile.  A separate name may be specified to send only to Facebook in order to comply with any specific Facebook rules or naming conventions.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    facebookName?: string;
    /**
     * The city to be displayed on this entity's Facebook profile
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    facebookOverrideCity?: string;
    /**
     * URL for the entity's Facebook Page.
     * 
     * Valid formats:
     * 
     * - facebook.com/profile.php?id=[numId]
     * - facebook.com/group.php?gid=[numId]
     * - facebook.com/groups/[numId]
     * - facebook.com/[Name]
     * - facebook.com/pages/[Name]/[numId]
     * 
     * where [Name] is a String and [numId] is an Integer
     * 
     * If you submit a URL that is not in one of the valid formats, it will be ignored. The success response will contain a warning message explaining why the URL wasn't stored in the system.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    facebookPageUrl?: string;
    /**
     * 
     * @type {AtmWriteAllOfFacebookProfilePhoto}
     * @memberof RestaurantWriteAllOf
     */
    facebookProfilePhoto?: AtmWriteAllOfFacebookProfilePhoto;
    /**
     * The username that appear's in the Facebook listing URL to help customers find and remember a brand’s Facebook page.  The username is also be used for tagging the Facebook page in other users’ posts, and searching for the Facebook page.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    facebookVanityUrl?: string;
    /**
     * Must be a valid fax number.
     * 
     * If the fax number's calling code is for a country other than the one given in the entity's **`countryCode`**, the fax number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    fax?: string;
    /**
     * 
     * @type {AtmWriteAllOfFeaturedMessage}
     * @memberof RestaurantWriteAllOf
     */
    featuredMessage?: AtmWriteAllOfFeaturedMessage;
    /**
     * Link to the review-collection page, where consumers can leave first-party reviews
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    firstPartyReviewPage?: string;
    /**
     * A list of questions that are frequently asked about this entity
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * @type {Set<AtmWriteAllOfFrequentlyAskedQuestions>}
     * @memberof RestaurantWriteAllOf
     */
    frequentlyAskedQuestions?: Set<AtmWriteAllOfFrequentlyAskedQuestions>;
    /**
     * Provides additional information on where the entity can be found (e.g., `Times Square`, `Global Center Mall`)
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    geomodifier?: string;
    /**
     * The unique IDs of the entity's Google My Business keywords, as well as the unique IDs of any values selected for each keyword.
     * 
     * Valid keywords (e.g., `has_drive_through`, `has_fitting_room`, `kitchen_in_room`) are determined by the entity's primary category. A full list of keywords can be retrieved with the Google Fields: List endpoint.
     * 
     * Keyword values provide more details on how the keyword applies to the entity (e.g., if the keyword is `has_drive_through`, its values may be `true` or `false`).
     * 
     * * If the **`v`** parameter is before `20181204`: **`googleAttributes`** is formatted as a map of key-value pairs (e.g., `[{ "id": "has_wheelchair_accessible_entrance", "values": [ "true" ] }]`)
     * * If the **`v`** parameter is on or after `20181204`: the contents are formatted as a list of objects (e.g., `{ "has_wheelchair_accessible_entrance": [ "true" ]}`)
     * 
     * **NOTE:** The latest Google Attributes are available via the Google Fields: List endpoint. Google Attributes are managed by Google and are subject to change without notice. To prevent errors, make sure your API implementation is not dependent on the presence of specific attributes.
     * @type {object}
     * @memberof RestaurantWriteAllOf
     */
    googleAttributes?: object;
    /**
     * 
     * @type {AtmWriteAllOfGoogleCoverPhoto}
     * @memberof RestaurantWriteAllOf
     */
    googleCoverPhoto?: AtmWriteAllOfGoogleCoverPhoto;
    /**
     * Google My Business Labels help users organize their locations into groups within GMB.
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 10 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    googleMyBusinessLabels?: Set<string>;
    /**
     * The unique identifier of this entity on Google Maps.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    googlePlaceId?: string;
    /**
     * 
     * @type {AtmWriteAllOfGoogleProfilePhoto}
     * @memberof RestaurantWriteAllOf
     */
    googleProfilePhoto?: AtmWriteAllOfGoogleProfilePhoto;
    /**
     * The URL you would like to submit to Google My Business in place of the one given in **`websiteUrl`** (if applicable).
     * 
     * For example, if you want to analyze the traffic driven by your Google listings separately from other traffic, enter the alternate URL that you will use for tracking in this field.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    googleWebsiteOverride?: string;
    /**
     * 
     * @type {HotelWriteAllOfHappyHours}
     * @memberof RestaurantWriteAllOf
     */
    happyHours?: HotelWriteAllOfHappyHours;
    /**
     * Indicates whether holiday-hour confirmation alerts are enabled for the Yext Knowledge Assistant for this entity
     * @type {boolean}
     * @memberof RestaurantWriteAllOf
     */
    holidayHoursConversationEnabled?: boolean;
    /**
     * 
     * @type {AtmWriteAllOfHours}
     * @memberof RestaurantWriteAllOf
     */
    hours?: AtmWriteAllOfHours;
    /**
     * A statement of the ownership and authorship of a document. Individuals or organizations based in many German-speaking countries are required by law to include an Impressum in published media.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    impressum?: string;
    /**
     * Valid Instagram username for the entity without the leading "@" (e.g., `NewCityAuto`)
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    instagramHandle?: string;
    /**
     * The URL where consumers can download the entity's app to their iPhone or iPad
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    iosAppUrl?: string;
    /**
     * The ISO 3166-2 region code for the entity
     * 
     * Yext will determine the entity's code and update **`isoRegionCode`** with that value. If Yext is unable to determine the code for the entity, the entity'ss ISO 3166-1 alpha-2 country code will be used.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    isoRegionCode?: string;
    /**
     * Keywords that describe the entity.
     * 
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    keywords?: Set<string>;
    /**
     * 
     * @type {HotelWriteAllOfKitchenHours}
     * @memberof RestaurantWriteAllOf
     */
    kitchenHours?: HotelWriteAllOfKitchenHours;
    /**
     * The IDs of the entity labels that have been added to this entity. Entity labels help you identify entities that share a certain characteristic; they do not appear on your entity's listings.
     * 
     * **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.
     * @type {Array<string>}
     * @memberof RestaurantWriteAllOf
     */
    labels?: Array<string>;
    /**
     * The URL of this entity's Landing Page that was created with Yext Pages
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    landingPageUrl?: string;
    /**
     * The langauges in which consumers can commicate with this entity or its staff members
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    languages?: Set<string>;
    /**
     * Must be a valid, non-toll-free phone number, based on the country specified in **`address.region`**. Phone numbers for US entities must contain 10 digits.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    localPhone?: string;
    /**
     * Indicates the entity's type, if it is not an event
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    locationType?: RestaurantWriteAllOfLocationTypeEnum;
    /**
     * 
     * @type {AtmWriteAllOfLogo}
     * @memberof RestaurantWriteAllOf
     */
    logo?: AtmWriteAllOfLogo;
    /**
     * The main phone number of the entity's point of contact
     * 
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    mainPhone?: string;
    /**
     * Types of meals served at this restaurant
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    mealsServed?: Set<RestaurantWriteAllOfMealsServedEnum>;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfMenuUrl}
     * @memberof RestaurantWriteAllOf
     */
    menuUrl?: HealthcareFacilityWriteAllOfMenuUrl;
    /**
     * 
     * @type {HotelWriteAllOfMenus}
     * @memberof RestaurantWriteAllOf
     */
    menus?: HotelWriteAllOfMenus;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    mobilePhone?: string;
    /**
     * Indicates whether Knowledge Nudge is enabled for the Yext Knowledge Assistant for this entity
     * @type {boolean}
     * @memberof RestaurantWriteAllOf
     */
    nudgeEnabled?: boolean;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfOnlineServiceHours}
     * @memberof RestaurantWriteAllOf
     */
    onlineServiceHours?: HealthcareFacilityWriteAllOfOnlineServiceHours;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfOrderUrl}
     * @memberof RestaurantWriteAllOf
     */
    orderUrl?: HealthcareFacilityWriteAllOfOrderUrl;
    /**
     * The payment methods accepted by this entity
     * 
     * Valid elements depend on the entity's country.
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    paymentOptions?: Set<RestaurantWriteAllOfPaymentOptionsEnum>;
    /**
     * 
     * **NOTE:** The list of photos that you send us must be comprehensive. For example, if you send us a list of photos that does not include photos that you sent in your last update, Yext considers the missing photos to be deleted, and we remove them from your listings.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Supported Aspect Ratios:
     * >* 1 x 1
     * >* 4 x 3
     * >* 3 x 2
     * >* 5 x 3
     * >* 16 x 9
     * >* 3 x 1
     * >* 2 x 3
     * >* 5 x 7
     * >* 4 x 5
     * >* 4 x 1
     * >
     * >**NOTE**: Maximum image size is 5mb after normalization and padding (if applicable). As well, there is a 6 second download limit from the image host.
     * >
     * @type {Array<EventWriteAllOfPhotoGallery>}
     * @memberof RestaurantWriteAllOf
     */
    photoGallery?: Array<EventWriteAllOfPhotoGallery>;
    /**
     * 
     * @type {AtmWriteAllOfPickupCoordinate}
     * @memberof RestaurantWriteAllOf
     */
    pickupCoordinate?: AtmWriteAllOfPickupCoordinate;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfPickupHours}
     * @memberof RestaurantWriteAllOf
     */
    pickupHours?: HealthcareFacilityWriteAllOfPickupHours;
    /**
     * he typical price of products sold by this location, on a scale of 1 (low) to 4 (high)
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    priceRange?: RestaurantWriteAllOfPriceRangeEnum;
    /**
     * ID of the user who is the primary Knowledge Assistant contact for the entity
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    primaryConversationContact?: string;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfProductLists}
     * @memberof RestaurantWriteAllOf
     */
    productLists?: HealthcareFacilityWriteAllOfProductLists;
    /**
     * Indicates whether Yext Knowledge Assistant question-and-answer conversations are enabled for this entity
     * @type {boolean}
     * @memberof RestaurantWriteAllOf
     */
    questionsAndAnswers?: boolean;
    /**
     * Information about the competitors whose search performance you would like to compare to your own
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 5 elements.
     * @type {Set<AtmWriteAllOfRankTrackingCompetitors>}
     * @memberof RestaurantWriteAllOf
     */
    rankTrackingCompetitors?: Set<AtmWriteAllOfRankTrackingCompetitors>;
    /**
     * Indicates whether Rank Tracking is enabled
     * @type {boolean}
     * @memberof RestaurantWriteAllOf
     */
    rankTrackingEnabled?: boolean;
    /**
     * How often we send search queries to track your search performance
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    rankTrackingFrequency?: RestaurantWriteAllOfRankTrackingFrequencyEnum;
    /**
     * The ways in which your keywords will be arranged in the search queries we use to track your performance
     * 
     * 
     * Array must have a minimum of 2 elements.
     * 
     * Array may have a maximum of 4 elements.
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    rankTrackingQueryTemplates?: Set<RestaurantWriteAllOfRankTrackingQueryTemplatesEnum>;
    /**
     * The search engines that we will use to track your performance
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    rankTrackingSites?: Set<RestaurantWriteAllOfRankTrackingSitesEnum>;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfReservationUrl}
     * @memberof RestaurantWriteAllOf
     */
    reservationUrl?: HealthcareFacilityWriteAllOfReservationUrl;
    /**
     * The URL given Review Invitation emails where consumers can leave a review about the entity
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    reviewGenerationUrl?: string;
    /**
     * Indicates whether Yext Knowledge Assistant review-response conversations are enabled for this entity
     * @type {boolean}
     * @memberof RestaurantWriteAllOf
     */
    reviewResponseConversationEnabled?: boolean;
    /**
     * 
     * @type {AtmWriteAllOfRoutableCoordinate}
     * @memberof RestaurantWriteAllOf
     */
    routableCoordinate?: AtmWriteAllOfRoutableCoordinate;
    /**
     * 
     * @type {LocationWriteAllOfSeniorHours}
     * @memberof RestaurantWriteAllOf
     */
    seniorHours?: LocationWriteAllOfSeniorHours;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfServiceArea}
     * @memberof RestaurantWriteAllOf
     */
    serviceArea?: HealthcareFacilityWriteAllOfServiceArea;
    /**
     * Information about the area that is served by this entity. It is specified as a list of service area names and their associated types.
     * **Only for Google My Business and Bing:** Currently, **serviceArea** is only supported by Google My Business and Bing and will not affect your listings on other sites.
     * 
     * 
     * Array may have a maximum of 200 elements.
     * @type {Set<HealthcareFacilityWriteAllOfServiceAreaPlaces>}
     * @memberof RestaurantWriteAllOf
     */
    serviceAreaPlaces?: Set<HealthcareFacilityWriteAllOfServiceAreaPlaces>;
    /**
     * Services offered by this entity
     * 
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    services?: Set<string>;
    /**
     * Up to 100 of this entity's specialities (e.g., for food and dining: `Chicago style`)
     * 
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof RestaurantWriteAllOf
     */
    specialities?: Set<string>;
    /**
     * 
     * @type {LocationWriteAllOfTakeoutHours}
     * @memberof RestaurantWriteAllOf
     */
    takeoutHours?: LocationWriteAllOfTakeoutHours;
    /**
     * The timezone of the entity, in the standard `IANA time zone database` format (tz database). e.g. `"America/New_York"`
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    timezone?: string;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    tollFreePhone?: string;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    ttyPhone?: string;
    /**
     * Valid Twitter handle for the entity without the leading "@" (e.g., `JohnSmith`)
     * 
     * If you submit an invalid Twitter handle, it will be ignored. The success response will contain a warning message explaining why your Twitter handle wasn't stored in the system.
     * @type {string}
     * @memberof RestaurantWriteAllOf
     */
    twitterHandle?: string;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfUberLink}
     * @memberof RestaurantWriteAllOf
     */
    uberLink?: HealthcareFacilityWriteAllOfUberLink;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfUberTripBranding}
     * @memberof RestaurantWriteAllOf
     */
    uberTripBranding?: HealthcareFacilityWriteAllOfUberTripBranding;
    /**
     * Valid YouTube URLs for embedding a video on some publisher sites
     * 
     * **NOTE:** Currently, only the first URL in the Array appears in your listings.
     * 
     * 
     * 
     * Array must be ordered.
     * @type {Set<HealthcareFacilityWriteAllOfVideos>}
     * @memberof RestaurantWriteAllOf
     */
    videos?: Set<HealthcareFacilityWriteAllOfVideos>;
    /**
     * 
     * @type {AtmWriteAllOfWalkableCoordinate}
     * @memberof RestaurantWriteAllOf
     */
    walkableCoordinate?: AtmWriteAllOfWalkableCoordinate;
    /**
     * 
     * @type {AtmWriteAllOfWebsiteUrl}
     * @memberof RestaurantWriteAllOf
     */
    websiteUrl?: AtmWriteAllOfWebsiteUrl;
    /**
     * The year the entity was established.
     * @type {number}
     * @memberof RestaurantWriteAllOf
     */
    yearEstablished?: number;
}

/**
* @export
* @enum {string}
*/
export enum RestaurantWriteAllOfAttireEnum {
    Unspecified = 'UNSPECIFIED',
    Dressy = 'DRESSY',
    Casual = 'CASUAL',
    Formal = 'FORMAL'
}/**
* @export
* @enum {string}
*/
export enum RestaurantWriteAllOfLocationTypeEnum {
    Location = 'LOCATION',
    HealthcareFacility = 'HEALTHCARE_FACILITY',
    HealthcareProfessional = 'HEALTHCARE_PROFESSIONAL',
    Atm = 'ATM',
    Restaurant = 'RESTAURANT',
    Hotel = 'HOTEL'
}/**
* @export
* @enum {string}
*/
export enum RestaurantWriteAllOfMealsServedEnum {
    Breakfast = 'BREAKFAST',
    Lunch = 'LUNCH',
    Brunch = 'BRUNCH',
    Dinner = 'DINNER',
    HappyHour = 'HAPPY_HOUR',
    LateNight = 'LATE_NIGHT'
}/**
* @export
* @enum {string}
*/
export enum RestaurantWriteAllOfPaymentOptionsEnum {
    Alipay = 'ALIPAY',
    Americanexpress = 'AMERICANEXPRESS',
    Androidpay = 'ANDROIDPAY',
    Applepay = 'APPLEPAY',
    Atm = 'ATM',
    Atmquick = 'ATMQUICK',
    Bacs = 'BACS',
    Bancontact = 'BANCONTACT',
    Bankdeposit = 'BANKDEPOSIT',
    Bankpay = 'BANKPAY',
    Bgo = 'BGO',
    Bitcoin = 'BITCOIN',
    Bar = 'Bar',
    Cartasi = 'CARTASI',
    Cash = 'CASH',
    Ccs = 'CCS',
    Check = 'CHECK',
    Conb = 'CONB',
    Cvvv = 'CVVV',
    Debitnote = 'DEBITNOTE',
    Dinersclub = 'DINERSCLUB',
    Directdebit = 'DIRECTDEBIT',
    Discover = 'DISCOVER',
    Eckarte = 'ECKARTE',
    Ecocheque = 'ECOCHEQUE',
    Ekena = 'EKENA',
    Emv = 'EMV',
    Financing = 'FINANCING',
    Gopay = 'GOPAY',
    Hayakaken = 'HAYAKAKEN',
    Hebag = 'HEBAG',
    Ibod = 'IBOD',
    Iccards = 'ICCARDS',
    Icoca = 'ICOCA',
    Id = 'ID',
    Ideal = 'IDEAL',
    Inca = 'INCA',
    Invoice = 'INVOICE',
    Jcb = 'JCB',
    JCoinPay = 'JCoinPay',
    Jkopay = 'JKOPAY',
    Kitaca = 'KITACA',
    Kla = 'KLA',
    Klarna = 'KLARNA',
    Linepay = 'LINEPAY',
    Maestro = 'MAESTRO',
    Manaca = 'MANACA',
    Mastercard = 'MASTERCARD',
    Mipay = 'MIPAY',
    Monizze = 'MONIZZE',
    Mpay = 'MPAY',
    ManuelleLastsch = 'Manuelle Lastsch',
    Merpay = 'Merpay',
    Nanaco = 'NANACO',
    Nexi = 'NEXI',
    Nimoca = 'NIMOCA',
    Orem = 'OREM',
    Pasmo = 'PASMO',
    Paybackpay = 'PAYBACKPAY',
    Paybox = 'PAYBOX',
    Payconiq = 'PAYCONIQ',
    Paypal = 'PAYPAL',
    Paypay = 'PAYPAY',
    Paysec = 'PAYSEC',
    Pin = 'PIN',
    Postepay = 'POSTEPAY',
    Qrcode = 'QRCODE',
    Quicpay = 'QUICPAY',
    Rakutenedy = 'RAKUTENEDY',
    Rakutenpay = 'RAKUTENPAY',
    Samsungpay = 'SAMSUNGPAY',
    Sodexo = 'SODEXO',
    Sugoca = 'SUGOCA',
    Suica = 'SUICA',
    Swish = 'SWISH',
    Ticketrestaurant = 'TICKETRESTAURANT',
    Toica = 'TOICA',
    Travelerscheck = 'TRAVELERSCHECK',
    Tscubic = 'TSCUBIC',
    Twint = 'TWINT',
    Unionpay = 'UNIONPAY',
    Vev = 'VEV',
    Visa = 'VISA',
    Visaelectron = 'VISAELECTRON',
    Vob = 'VOB',
    Voucher = 'VOUCHER',
    Vpay = 'VPAY',
    Waon = 'WAON',
    Wechatpay = 'WECHATPAY',
    Wiretransfer = 'WIRETRANSFER',
    YuchoPay = 'Yucho Pay',
    Zelle = 'ZELLE',
    AuPay = 'auPay',
    DBarai = 'dBarai',
    Berweisung = 'Überweisung'
}/**
* @export
* @enum {string}
*/
export enum RestaurantWriteAllOfPriceRangeEnum {
    Unspecified = 'UNSPECIFIED',
    One = 'ONE',
    Two = 'TWO',
    Three = 'THREE',
    Four = 'FOUR'
}/**
* @export
* @enum {string}
*/
export enum RestaurantWriteAllOfRankTrackingFrequencyEnum {
    Weekly = 'WEEKLY',
    Monthly = 'MONTHLY',
    Quarterly = 'QUARTERLY'
}/**
* @export
* @enum {string}
*/
export enum RestaurantWriteAllOfRankTrackingQueryTemplatesEnum {
    Keyword = 'KEYWORD',
    KeywordZip = 'KEYWORD_ZIP',
    KeywordCity = 'KEYWORD_CITY',
    KeywordInCity = 'KEYWORD_IN_CITY',
    KeywordNearMe = 'KEYWORD_NEAR_ME',
    KeywordCityState = 'KEYWORD_CITY_STATE'
}/**
* @export
* @enum {string}
*/
export enum RestaurantWriteAllOfRankTrackingSitesEnum {
    GoogleDesktop = 'GOOGLE_DESKTOP',
    GoogleMobile = 'GOOGLE_MOBILE',
    BingDesktop = 'BING_DESKTOP',
    BingMobile = 'BING_MOBILE',
    YahooDesktop = 'YAHOO_DESKTOP',
    YahooMobile = 'YAHOO_MOBILE'
}

export function RestaurantWriteAllOfFromJSON(json: any): RestaurantWriteAllOf {
    return RestaurantWriteAllOfFromJSONTyped(json, false);
}

export function RestaurantWriteAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestaurantWriteAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'meta': !exists(json, 'meta') ? undefined : AtmWriteAllOfMetaFromJSON(json['meta']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'address': !exists(json, 'address') ? undefined : AtmWriteAllOfAddressFromJSON(json['address']),
        'acceptsReservations': !exists(json, 'acceptsReservations') ? undefined : json['acceptsReservations'],
        'accessHours': !exists(json, 'accessHours') ? undefined : AtmWriteAllOfAccessHoursFromJSON(json['accessHours']),
        'additionalHoursText': !exists(json, 'additionalHoursText') ? undefined : json['additionalHoursText'],
        'addressHidden': !exists(json, 'addressHidden') ? undefined : json['addressHidden'],
        'alternateNames': !exists(json, 'alternateNames') ? undefined : json['alternateNames'],
        'alternatePhone': !exists(json, 'alternatePhone') ? undefined : json['alternatePhone'],
        'alternateWebsites': !exists(json, 'alternateWebsites') ? undefined : json['alternateWebsites'],
        'androidAppUrl': !exists(json, 'androidAppUrl') ? undefined : json['androidAppUrl'],
        'associations': !exists(json, 'associations') ? undefined : json['associations'],
        'attire': !exists(json, 'attire') ? undefined : json['attire'],
        'bios': !exists(json, 'bios') ? undefined : HealthcareFacilityWriteAllOfBiosFromJSON(json['bios']),
        'brands': !exists(json, 'brands') ? undefined : json['brands'],
        'brunchHours': !exists(json, 'brunchHours') ? undefined : HotelWriteAllOfBrunchHoursFromJSON(json['brunchHours']),
        'calendars': !exists(json, 'calendars') ? undefined : HealthcareFacilityWriteAllOfCalendarsFromJSON(json['calendars']),
        'categoryIds': !exists(json, 'categoryIds') ? undefined : json['categoryIds'],
        'closed': !exists(json, 'closed') ? undefined : json['closed'],
        'customKeywords': !exists(json, 'customKeywords') ? undefined : json['customKeywords'],
        'deliveryHours': !exists(json, 'deliveryHours') ? undefined : LocationWriteAllOfDeliveryHoursFromJSON(json['deliveryHours']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayCoordinate': !exists(json, 'displayCoordinate') ? undefined : AtmWriteAllOfDisplayCoordinateFromJSON(json['displayCoordinate']),
        'driveThroughHours': !exists(json, 'driveThroughHours') ? undefined : AtmWriteAllOfDriveThroughHoursFromJSON(json['driveThroughHours']),
        'dropoffCoordinate': !exists(json, 'dropoffCoordinate') ? undefined : AtmWriteAllOfDropoffCoordinateFromJSON(json['dropoffCoordinate']),
        'emails': !exists(json, 'emails') ? undefined : json['emails'],
        'facebookCallToAction': !exists(json, 'facebookCallToAction') ? undefined : AtmWriteAllOfFacebookCallToActionFromJSON(json['facebookCallToAction']),
        'facebookCoverPhoto': !exists(json, 'facebookCoverPhoto') ? undefined : AtmWriteAllOfFacebookCoverPhotoFromJSON(json['facebookCoverPhoto']),
        'facebookDescriptor': !exists(json, 'facebookDescriptor') ? undefined : json['facebookDescriptor'],
        'facebookName': !exists(json, 'facebookName') ? undefined : json['facebookName'],
        'facebookOverrideCity': !exists(json, 'facebookOverrideCity') ? undefined : json['facebookOverrideCity'],
        'facebookPageUrl': !exists(json, 'facebookPageUrl') ? undefined : json['facebookPageUrl'],
        'facebookProfilePhoto': !exists(json, 'facebookProfilePhoto') ? undefined : AtmWriteAllOfFacebookProfilePhotoFromJSON(json['facebookProfilePhoto']),
        'facebookVanityUrl': !exists(json, 'facebookVanityUrl') ? undefined : json['facebookVanityUrl'],
        'fax': !exists(json, 'fax') ? undefined : json['fax'],
        'featuredMessage': !exists(json, 'featuredMessage') ? undefined : AtmWriteAllOfFeaturedMessageFromJSON(json['featuredMessage']),
        'firstPartyReviewPage': !exists(json, 'firstPartyReviewPage') ? undefined : json['firstPartyReviewPage'],
        'frequentlyAskedQuestions': !exists(json, 'frequentlyAskedQuestions') ? undefined : (new Set((json['frequentlyAskedQuestions'] as Array<any>).map(AtmWriteAllOfFrequentlyAskedQuestionsFromJSON))),
        'geomodifier': !exists(json, 'geomodifier') ? undefined : json['geomodifier'],
        'googleAttributes': !exists(json, 'googleAttributes') ? undefined : json['googleAttributes'],
        'googleCoverPhoto': !exists(json, 'googleCoverPhoto') ? undefined : AtmWriteAllOfGoogleCoverPhotoFromJSON(json['googleCoverPhoto']),
        'googleMyBusinessLabels': !exists(json, 'googleMyBusinessLabels') ? undefined : json['googleMyBusinessLabels'],
        'googlePlaceId': !exists(json, 'googlePlaceId') ? undefined : json['googlePlaceId'],
        'googleProfilePhoto': !exists(json, 'googleProfilePhoto') ? undefined : AtmWriteAllOfGoogleProfilePhotoFromJSON(json['googleProfilePhoto']),
        'googleWebsiteOverride': !exists(json, 'googleWebsiteOverride') ? undefined : json['googleWebsiteOverride'],
        'happyHours': !exists(json, 'happyHours') ? undefined : HotelWriteAllOfHappyHoursFromJSON(json['happyHours']),
        'holidayHoursConversationEnabled': !exists(json, 'holidayHoursConversationEnabled') ? undefined : json['holidayHoursConversationEnabled'],
        'hours': !exists(json, 'hours') ? undefined : AtmWriteAllOfHoursFromJSON(json['hours']),
        'impressum': !exists(json, 'impressum') ? undefined : json['impressum'],
        'instagramHandle': !exists(json, 'instagramHandle') ? undefined : json['instagramHandle'],
        'iosAppUrl': !exists(json, 'iosAppUrl') ? undefined : json['iosAppUrl'],
        'isoRegionCode': !exists(json, 'isoRegionCode') ? undefined : json['isoRegionCode'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'kitchenHours': !exists(json, 'kitchenHours') ? undefined : HotelWriteAllOfKitchenHoursFromJSON(json['kitchenHours']),
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'landingPageUrl': !exists(json, 'landingPageUrl') ? undefined : json['landingPageUrl'],
        'languages': !exists(json, 'languages') ? undefined : json['languages'],
        'localPhone': !exists(json, 'localPhone') ? undefined : json['localPhone'],
        'locationType': !exists(json, 'locationType') ? undefined : json['locationType'],
        'logo': !exists(json, 'logo') ? undefined : AtmWriteAllOfLogoFromJSON(json['logo']),
        'mainPhone': !exists(json, 'mainPhone') ? undefined : json['mainPhone'],
        'mealsServed': !exists(json, 'mealsServed') ? undefined : json['mealsServed'],
        'menuUrl': !exists(json, 'menuUrl') ? undefined : HealthcareFacilityWriteAllOfMenuUrlFromJSON(json['menuUrl']),
        'menus': !exists(json, 'menus') ? undefined : HotelWriteAllOfMenusFromJSON(json['menus']),
        'mobilePhone': !exists(json, 'mobilePhone') ? undefined : json['mobilePhone'],
        'nudgeEnabled': !exists(json, 'nudgeEnabled') ? undefined : json['nudgeEnabled'],
        'onlineServiceHours': !exists(json, 'onlineServiceHours') ? undefined : HealthcareFacilityWriteAllOfOnlineServiceHoursFromJSON(json['onlineServiceHours']),
        'orderUrl': !exists(json, 'orderUrl') ? undefined : HealthcareFacilityWriteAllOfOrderUrlFromJSON(json['orderUrl']),
        'paymentOptions': !exists(json, 'paymentOptions') ? undefined : json['paymentOptions'],
        'photoGallery': !exists(json, 'photoGallery') ? undefined : ((json['photoGallery'] as Array<any>).map(EventWriteAllOfPhotoGalleryFromJSON)),
        'pickupCoordinate': !exists(json, 'pickupCoordinate') ? undefined : AtmWriteAllOfPickupCoordinateFromJSON(json['pickupCoordinate']),
        'pickupHours': !exists(json, 'pickupHours') ? undefined : HealthcareFacilityWriteAllOfPickupHoursFromJSON(json['pickupHours']),
        'priceRange': !exists(json, 'priceRange') ? undefined : json['priceRange'],
        'primaryConversationContact': !exists(json, 'primaryConversationContact') ? undefined : json['primaryConversationContact'],
        'productLists': !exists(json, 'productLists') ? undefined : HealthcareFacilityWriteAllOfProductListsFromJSON(json['productLists']),
        'questionsAndAnswers': !exists(json, 'questionsAndAnswers') ? undefined : json['questionsAndAnswers'],
        'rankTrackingCompetitors': !exists(json, 'rankTrackingCompetitors') ? undefined : (new Set((json['rankTrackingCompetitors'] as Array<any>).map(AtmWriteAllOfRankTrackingCompetitorsFromJSON))),
        'rankTrackingEnabled': !exists(json, 'rankTrackingEnabled') ? undefined : json['rankTrackingEnabled'],
        'rankTrackingFrequency': !exists(json, 'rankTrackingFrequency') ? undefined : json['rankTrackingFrequency'],
        'rankTrackingQueryTemplates': !exists(json, 'rankTrackingQueryTemplates') ? undefined : json['rankTrackingQueryTemplates'],
        'rankTrackingSites': !exists(json, 'rankTrackingSites') ? undefined : json['rankTrackingSites'],
        'reservationUrl': !exists(json, 'reservationUrl') ? undefined : HealthcareFacilityWriteAllOfReservationUrlFromJSON(json['reservationUrl']),
        'reviewGenerationUrl': !exists(json, 'reviewGenerationUrl') ? undefined : json['reviewGenerationUrl'],
        'reviewResponseConversationEnabled': !exists(json, 'reviewResponseConversationEnabled') ? undefined : json['reviewResponseConversationEnabled'],
        'routableCoordinate': !exists(json, 'routableCoordinate') ? undefined : AtmWriteAllOfRoutableCoordinateFromJSON(json['routableCoordinate']),
        'seniorHours': !exists(json, 'seniorHours') ? undefined : LocationWriteAllOfSeniorHoursFromJSON(json['seniorHours']),
        'serviceArea': !exists(json, 'serviceArea') ? undefined : HealthcareFacilityWriteAllOfServiceAreaFromJSON(json['serviceArea']),
        'serviceAreaPlaces': !exists(json, 'serviceAreaPlaces') ? undefined : (new Set((json['serviceAreaPlaces'] as Array<any>).map(HealthcareFacilityWriteAllOfServiceAreaPlacesFromJSON))),
        'services': !exists(json, 'services') ? undefined : json['services'],
        'specialities': !exists(json, 'specialities') ? undefined : json['specialities'],
        'takeoutHours': !exists(json, 'takeoutHours') ? undefined : LocationWriteAllOfTakeoutHoursFromJSON(json['takeoutHours']),
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
        'tollFreePhone': !exists(json, 'tollFreePhone') ? undefined : json['tollFreePhone'],
        'ttyPhone': !exists(json, 'ttyPhone') ? undefined : json['ttyPhone'],
        'twitterHandle': !exists(json, 'twitterHandle') ? undefined : json['twitterHandle'],
        'uberLink': !exists(json, 'uberLink') ? undefined : HealthcareFacilityWriteAllOfUberLinkFromJSON(json['uberLink']),
        'uberTripBranding': !exists(json, 'uberTripBranding') ? undefined : HealthcareFacilityWriteAllOfUberTripBrandingFromJSON(json['uberTripBranding']),
        'videos': !exists(json, 'videos') ? undefined : (new Set((json['videos'] as Array<any>).map(HealthcareFacilityWriteAllOfVideosFromJSON))),
        'walkableCoordinate': !exists(json, 'walkableCoordinate') ? undefined : AtmWriteAllOfWalkableCoordinateFromJSON(json['walkableCoordinate']),
        'websiteUrl': !exists(json, 'websiteUrl') ? undefined : AtmWriteAllOfWebsiteUrlFromJSON(json['websiteUrl']),
        'yearEstablished': !exists(json, 'yearEstablished') ? undefined : json['yearEstablished'],
    };
}

export function RestaurantWriteAllOfToJSON(value?: RestaurantWriteAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'meta': AtmWriteAllOfMetaToJSON(value.meta),
        'name': value.name,
        'address': AtmWriteAllOfAddressToJSON(value.address),
        'acceptsReservations': value.acceptsReservations,
        'accessHours': AtmWriteAllOfAccessHoursToJSON(value.accessHours),
        'additionalHoursText': value.additionalHoursText,
        'addressHidden': value.addressHidden,
        'alternateNames': value.alternateNames,
        'alternatePhone': value.alternatePhone,
        'alternateWebsites': value.alternateWebsites,
        'androidAppUrl': value.androidAppUrl,
        'associations': value.associations,
        'attire': value.attire,
        'bios': HealthcareFacilityWriteAllOfBiosToJSON(value.bios),
        'brands': value.brands,
        'brunchHours': HotelWriteAllOfBrunchHoursToJSON(value.brunchHours),
        'calendars': HealthcareFacilityWriteAllOfCalendarsToJSON(value.calendars),
        'categoryIds': value.categoryIds,
        'closed': value.closed,
        'customKeywords': value.customKeywords,
        'deliveryHours': LocationWriteAllOfDeliveryHoursToJSON(value.deliveryHours),
        'description': value.description,
        'displayCoordinate': AtmWriteAllOfDisplayCoordinateToJSON(value.displayCoordinate),
        'driveThroughHours': AtmWriteAllOfDriveThroughHoursToJSON(value.driveThroughHours),
        'dropoffCoordinate': AtmWriteAllOfDropoffCoordinateToJSON(value.dropoffCoordinate),
        'emails': value.emails,
        'facebookCallToAction': AtmWriteAllOfFacebookCallToActionToJSON(value.facebookCallToAction),
        'facebookCoverPhoto': AtmWriteAllOfFacebookCoverPhotoToJSON(value.facebookCoverPhoto),
        'facebookDescriptor': value.facebookDescriptor,
        'facebookName': value.facebookName,
        'facebookOverrideCity': value.facebookOverrideCity,
        'facebookPageUrl': value.facebookPageUrl,
        'facebookProfilePhoto': AtmWriteAllOfFacebookProfilePhotoToJSON(value.facebookProfilePhoto),
        'facebookVanityUrl': value.facebookVanityUrl,
        'fax': value.fax,
        'featuredMessage': AtmWriteAllOfFeaturedMessageToJSON(value.featuredMessage),
        'firstPartyReviewPage': value.firstPartyReviewPage,
        'frequentlyAskedQuestions': value.frequentlyAskedQuestions === undefined ? undefined : (Array.from(value.frequentlyAskedQuestions as Set<any>).map(AtmWriteAllOfFrequentlyAskedQuestionsToJSON)),
        'geomodifier': value.geomodifier,
        'googleAttributes': value.googleAttributes,
        'googleCoverPhoto': AtmWriteAllOfGoogleCoverPhotoToJSON(value.googleCoverPhoto),
        'googleMyBusinessLabels': value.googleMyBusinessLabels,
        'googlePlaceId': value.googlePlaceId,
        'googleProfilePhoto': AtmWriteAllOfGoogleProfilePhotoToJSON(value.googleProfilePhoto),
        'googleWebsiteOverride': value.googleWebsiteOverride,
        'happyHours': HotelWriteAllOfHappyHoursToJSON(value.happyHours),
        'holidayHoursConversationEnabled': value.holidayHoursConversationEnabled,
        'hours': AtmWriteAllOfHoursToJSON(value.hours),
        'impressum': value.impressum,
        'instagramHandle': value.instagramHandle,
        'iosAppUrl': value.iosAppUrl,
        'isoRegionCode': value.isoRegionCode,
        'keywords': value.keywords,
        'kitchenHours': HotelWriteAllOfKitchenHoursToJSON(value.kitchenHours),
        'labels': value.labels,
        'landingPageUrl': value.landingPageUrl,
        'languages': value.languages,
        'localPhone': value.localPhone,
        'locationType': value.locationType,
        'logo': AtmWriteAllOfLogoToJSON(value.logo),
        'mainPhone': value.mainPhone,
        'mealsServed': value.mealsServed,
        'menuUrl': HealthcareFacilityWriteAllOfMenuUrlToJSON(value.menuUrl),
        'menus': HotelWriteAllOfMenusToJSON(value.menus),
        'mobilePhone': value.mobilePhone,
        'nudgeEnabled': value.nudgeEnabled,
        'onlineServiceHours': HealthcareFacilityWriteAllOfOnlineServiceHoursToJSON(value.onlineServiceHours),
        'orderUrl': HealthcareFacilityWriteAllOfOrderUrlToJSON(value.orderUrl),
        'paymentOptions': value.paymentOptions,
        'photoGallery': value.photoGallery === undefined ? undefined : ((value.photoGallery as Array<any>).map(EventWriteAllOfPhotoGalleryToJSON)),
        'pickupCoordinate': AtmWriteAllOfPickupCoordinateToJSON(value.pickupCoordinate),
        'pickupHours': HealthcareFacilityWriteAllOfPickupHoursToJSON(value.pickupHours),
        'priceRange': value.priceRange,
        'primaryConversationContact': value.primaryConversationContact,
        'productLists': HealthcareFacilityWriteAllOfProductListsToJSON(value.productLists),
        'questionsAndAnswers': value.questionsAndAnswers,
        'rankTrackingCompetitors': value.rankTrackingCompetitors === undefined ? undefined : (Array.from(value.rankTrackingCompetitors as Set<any>).map(AtmWriteAllOfRankTrackingCompetitorsToJSON)),
        'rankTrackingEnabled': value.rankTrackingEnabled,
        'rankTrackingFrequency': value.rankTrackingFrequency,
        'rankTrackingQueryTemplates': value.rankTrackingQueryTemplates,
        'rankTrackingSites': value.rankTrackingSites,
        'reservationUrl': HealthcareFacilityWriteAllOfReservationUrlToJSON(value.reservationUrl),
        'reviewGenerationUrl': value.reviewGenerationUrl,
        'reviewResponseConversationEnabled': value.reviewResponseConversationEnabled,
        'routableCoordinate': AtmWriteAllOfRoutableCoordinateToJSON(value.routableCoordinate),
        'seniorHours': LocationWriteAllOfSeniorHoursToJSON(value.seniorHours),
        'serviceArea': HealthcareFacilityWriteAllOfServiceAreaToJSON(value.serviceArea),
        'serviceAreaPlaces': value.serviceAreaPlaces === undefined ? undefined : (Array.from(value.serviceAreaPlaces as Set<any>).map(HealthcareFacilityWriteAllOfServiceAreaPlacesToJSON)),
        'services': value.services,
        'specialities': value.specialities,
        'takeoutHours': LocationWriteAllOfTakeoutHoursToJSON(value.takeoutHours),
        'timezone': value.timezone,
        'tollFreePhone': value.tollFreePhone,
        'ttyPhone': value.ttyPhone,
        'twitterHandle': value.twitterHandle,
        'uberLink': HealthcareFacilityWriteAllOfUberLinkToJSON(value.uberLink),
        'uberTripBranding': HealthcareFacilityWriteAllOfUberTripBrandingToJSON(value.uberTripBranding),
        'videos': value.videos === undefined ? undefined : (Array.from(value.videos as Set<any>).map(HealthcareFacilityWriteAllOfVideosToJSON)),
        'walkableCoordinate': AtmWriteAllOfWalkableCoordinateToJSON(value.walkableCoordinate),
        'websiteUrl': AtmWriteAllOfWebsiteUrlToJSON(value.websiteUrl),
        'yearEstablished': value.yearEstablished,
    };
}


