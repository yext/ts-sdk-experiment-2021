/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CategoryCountryAvailability,
    CategoryCountryAvailabilityFromJSON,
    CategoryCountryAvailabilityFromJSONTyped,
    CategoryCountryAvailabilityToJSON,
    CategoryEntityTypeAvailability,
    CategoryEntityTypeAvailabilityFromJSON,
    CategoryEntityTypeAvailabilityFromJSONTyped,
    CategoryEntityTypeAvailabilityToJSON,
} from './';

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    id?: string;
    /**
     * Name of the category.
     * @type {string}
     * @memberof Category
     */
    name?: string;
    /**
     * The name of the Category, including parent Categories. ("Grandparent > Parent > Category")
     * @type {string}
     * @memberof Category
     */
    fullName?: string;
    /**
     * Set to true if the Category is allowed to be selected by a Location. (Some Categories are too broad to apply to one Location.)
     * @type {boolean}
     * @memberof Category
     */
    selectable?: boolean;
    /**
     * The ID of the parent category, if any.
     * @type {string}
     * @memberof Category
     */
    parentId?: string;
    /**
     * 
     * @type {CategoryEntityTypeAvailability}
     * @memberof Category
     */
    entityTypeAvailability?: CategoryEntityTypeAvailability;
    /**
     * 
     * @type {CategoryCountryAvailability}
     * @memberof Category
     */
    countryAvailability?: CategoryCountryAvailability;
}

export function CategoryFromJSON(json: any): Category {
    return CategoryFromJSONTyped(json, false);
}

export function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'fullName': !exists(json, 'fullName') ? undefined : json['fullName'],
        'selectable': !exists(json, 'selectable') ? undefined : json['selectable'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'entityTypeAvailability': !exists(json, 'entityTypeAvailability') ? undefined : CategoryEntityTypeAvailabilityFromJSON(json['entityTypeAvailability']),
        'countryAvailability': !exists(json, 'countryAvailability') ? undefined : CategoryCountryAvailabilityFromJSON(json['countryAvailability']),
    };
}

export function CategoryToJSON(value?: Category | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'fullName': value.fullName,
        'selectable': value.selectable,
        'parentId': value.parentId,
        'entityTypeAvailability': CategoryEntityTypeAvailabilityToJSON(value.entityTypeAvailability),
        'countryAvailability': CategoryCountryAvailabilityToJSON(value.countryAvailability),
    };
}


