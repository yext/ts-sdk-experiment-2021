/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * The ISO 3166-1 alpha-2 codes of the countries the category is available to.
 * 
 * In order for the category to be applied to an Entity, the Entity's **`countryCode`** (found in its **`meta`** data) must be included in this list.
 * @export
 * @interface CategoryCountryAvailability
 */
export interface CategoryCountryAvailability {
    /**
     * 
     * Possible values:
     * * `OPT_IN` Countries can only be opted in to this category.
     * * `OPT_OUT` Countries must be specifically opted out of this category.
     * @type {string}
     * @memberof CategoryCountryAvailability
     */
    mode?: string;
    /**
     * 
     * List of ISO 3166-1 alpha-2 codes for the countries that are either opted in or opted out of the category, based on the value of **`mode`**.
     * 
     * **Example**:
     * 
     * If **`mode`** is `OPT_IN` and **`countryCodes`** is `[“US”, “GB”]`, then only Entities whose **`countryCode`** is `US` or `GB` can have this category assigned to it.
     * 
     * If **`mode`** is `OPT_OUT` and **`countryCodes`** is `[“GB”, “FR”]`, then the category can be assigned to Entities with any **`countryCode`** value except `GB` or `FR`.
     * @type {Array<string>}
     * @memberof CategoryCountryAvailability
     */
    countryCodes?: Array<string>;
}

export function CategoryCountryAvailabilityFromJSON(json: any): CategoryCountryAvailability {
    return CategoryCountryAvailabilityFromJSONTyped(json, false);
}

export function CategoryCountryAvailabilityFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryCountryAvailability {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mode': !exists(json, 'mode') ? undefined : json['mode'],
        'countryCodes': !exists(json, 'countryCodes') ? undefined : json['countryCodes'],
    };
}

export function CategoryCountryAvailabilityToJSON(value?: CategoryCountryAvailability | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mode': value.mode,
        'countryCodes': value.countryCodes,
    };
}


