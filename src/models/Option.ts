/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Translation,
    TranslationFromJSON,
    TranslationFromJSONTyped,
    TranslationToJSON,
} from './';

/**
 * 
 * @export
 * @interface Option
 */
export interface Option {
    /**
     * ID that should be used when referencing the option in API calls.
     * Note that in Locations endpoints, Custom Field options are still referenced by their numeric **`id`**, which can be obtained by calling the Custom Fields: List endpoint with a **`v`** param before `20180809`.
     * @type {string}
     * @memberof Option
     */
    key?: string;
    /**
     * The option's text.
     * @type {string}
     * @memberof Option
     */
    value?: string;
    /**
     * Localized variations of **`value`**.
     * @type {Array<Translation>}
     * @memberof Option
     */
    translations?: Array<Translation>;
}

export function OptionFromJSON(json: any): Option {
    return OptionFromJSONTyped(json, false);
}

export function OptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Option {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': !exists(json, 'key') ? undefined : json['key'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'translations': !exists(json, 'translations') ? undefined : ((json['translations'] as Array<any>).map(TranslationFromJSON)),
    };
}

export function OptionToJSON(value?: Option | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': value.key,
        'value': value.value,
        'translations': value.translations === undefined ? undefined : ((value.translations as Array<any>).map(TranslationToJSON)),
    };
}


