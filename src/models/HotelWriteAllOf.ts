/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AtmWriteAllOfAccessHours,
    AtmWriteAllOfAccessHoursFromJSON,
    AtmWriteAllOfAccessHoursFromJSONTyped,
    AtmWriteAllOfAccessHoursToJSON,
    AtmWriteAllOfAddress,
    AtmWriteAllOfAddressFromJSON,
    AtmWriteAllOfAddressFromJSONTyped,
    AtmWriteAllOfAddressToJSON,
    AtmWriteAllOfDisplayCoordinate,
    AtmWriteAllOfDisplayCoordinateFromJSON,
    AtmWriteAllOfDisplayCoordinateFromJSONTyped,
    AtmWriteAllOfDisplayCoordinateToJSON,
    AtmWriteAllOfDropoffCoordinate,
    AtmWriteAllOfDropoffCoordinateFromJSON,
    AtmWriteAllOfDropoffCoordinateFromJSONTyped,
    AtmWriteAllOfDropoffCoordinateToJSON,
    AtmWriteAllOfFacebookCallToAction,
    AtmWriteAllOfFacebookCallToActionFromJSON,
    AtmWriteAllOfFacebookCallToActionFromJSONTyped,
    AtmWriteAllOfFacebookCallToActionToJSON,
    AtmWriteAllOfFacebookCoverPhoto,
    AtmWriteAllOfFacebookCoverPhotoFromJSON,
    AtmWriteAllOfFacebookCoverPhotoFromJSONTyped,
    AtmWriteAllOfFacebookCoverPhotoToJSON,
    AtmWriteAllOfFacebookProfilePhoto,
    AtmWriteAllOfFacebookProfilePhotoFromJSON,
    AtmWriteAllOfFacebookProfilePhotoFromJSONTyped,
    AtmWriteAllOfFacebookProfilePhotoToJSON,
    AtmWriteAllOfFeaturedMessage,
    AtmWriteAllOfFeaturedMessageFromJSON,
    AtmWriteAllOfFeaturedMessageFromJSONTyped,
    AtmWriteAllOfFeaturedMessageToJSON,
    AtmWriteAllOfFrequentlyAskedQuestions,
    AtmWriteAllOfFrequentlyAskedQuestionsFromJSON,
    AtmWriteAllOfFrequentlyAskedQuestionsFromJSONTyped,
    AtmWriteAllOfFrequentlyAskedQuestionsToJSON,
    AtmWriteAllOfGoogleCoverPhoto,
    AtmWriteAllOfGoogleCoverPhotoFromJSON,
    AtmWriteAllOfGoogleCoverPhotoFromJSONTyped,
    AtmWriteAllOfGoogleCoverPhotoToJSON,
    AtmWriteAllOfGoogleProfilePhoto,
    AtmWriteAllOfGoogleProfilePhotoFromJSON,
    AtmWriteAllOfGoogleProfilePhotoFromJSONTyped,
    AtmWriteAllOfGoogleProfilePhotoToJSON,
    AtmWriteAllOfHours,
    AtmWriteAllOfHoursFromJSON,
    AtmWriteAllOfHoursFromJSONTyped,
    AtmWriteAllOfHoursToJSON,
    AtmWriteAllOfLogo,
    AtmWriteAllOfLogoFromJSON,
    AtmWriteAllOfLogoFromJSONTyped,
    AtmWriteAllOfLogoToJSON,
    AtmWriteAllOfMeta,
    AtmWriteAllOfMetaFromJSON,
    AtmWriteAllOfMetaFromJSONTyped,
    AtmWriteAllOfMetaToJSON,
    AtmWriteAllOfPickupCoordinate,
    AtmWriteAllOfPickupCoordinateFromJSON,
    AtmWriteAllOfPickupCoordinateFromJSONTyped,
    AtmWriteAllOfPickupCoordinateToJSON,
    AtmWriteAllOfRankTrackingCompetitors,
    AtmWriteAllOfRankTrackingCompetitorsFromJSON,
    AtmWriteAllOfRankTrackingCompetitorsFromJSONTyped,
    AtmWriteAllOfRankTrackingCompetitorsToJSON,
    AtmWriteAllOfRoutableCoordinate,
    AtmWriteAllOfRoutableCoordinateFromJSON,
    AtmWriteAllOfRoutableCoordinateFromJSONTyped,
    AtmWriteAllOfRoutableCoordinateToJSON,
    AtmWriteAllOfWalkableCoordinate,
    AtmWriteAllOfWalkableCoordinateFromJSON,
    AtmWriteAllOfWalkableCoordinateFromJSONTyped,
    AtmWriteAllOfWalkableCoordinateToJSON,
    AtmWriteAllOfWebsiteUrl,
    AtmWriteAllOfWebsiteUrlFromJSON,
    AtmWriteAllOfWebsiteUrlFromJSONTyped,
    AtmWriteAllOfWebsiteUrlToJSON,
    EventWriteAllOfPhotoGallery,
    EventWriteAllOfPhotoGalleryFromJSON,
    EventWriteAllOfPhotoGalleryFromJSONTyped,
    EventWriteAllOfPhotoGalleryToJSON,
    HealthcareFacilityWriteAllOfBios,
    HealthcareFacilityWriteAllOfBiosFromJSON,
    HealthcareFacilityWriteAllOfBiosFromJSONTyped,
    HealthcareFacilityWriteAllOfBiosToJSON,
    HealthcareFacilityWriteAllOfCalendars,
    HealthcareFacilityWriteAllOfCalendarsFromJSON,
    HealthcareFacilityWriteAllOfCalendarsFromJSONTyped,
    HealthcareFacilityWriteAllOfCalendarsToJSON,
    HealthcareFacilityWriteAllOfMenuUrl,
    HealthcareFacilityWriteAllOfMenuUrlFromJSON,
    HealthcareFacilityWriteAllOfMenuUrlFromJSONTyped,
    HealthcareFacilityWriteAllOfMenuUrlToJSON,
    HealthcareFacilityWriteAllOfOrderUrl,
    HealthcareFacilityWriteAllOfOrderUrlFromJSON,
    HealthcareFacilityWriteAllOfOrderUrlFromJSONTyped,
    HealthcareFacilityWriteAllOfOrderUrlToJSON,
    HealthcareFacilityWriteAllOfProductLists,
    HealthcareFacilityWriteAllOfProductListsFromJSON,
    HealthcareFacilityWriteAllOfProductListsFromJSONTyped,
    HealthcareFacilityWriteAllOfProductListsToJSON,
    HealthcareFacilityWriteAllOfReservationUrl,
    HealthcareFacilityWriteAllOfReservationUrlFromJSON,
    HealthcareFacilityWriteAllOfReservationUrlFromJSONTyped,
    HealthcareFacilityWriteAllOfReservationUrlToJSON,
    HealthcareFacilityWriteAllOfServiceArea,
    HealthcareFacilityWriteAllOfServiceAreaFromJSON,
    HealthcareFacilityWriteAllOfServiceAreaFromJSONTyped,
    HealthcareFacilityWriteAllOfServiceAreaToJSON,
    HealthcareFacilityWriteAllOfServiceAreaPlaces,
    HealthcareFacilityWriteAllOfServiceAreaPlacesFromJSON,
    HealthcareFacilityWriteAllOfServiceAreaPlacesFromJSONTyped,
    HealthcareFacilityWriteAllOfServiceAreaPlacesToJSON,
    HealthcareFacilityWriteAllOfUberLink,
    HealthcareFacilityWriteAllOfUberLinkFromJSON,
    HealthcareFacilityWriteAllOfUberLinkFromJSONTyped,
    HealthcareFacilityWriteAllOfUberLinkToJSON,
    HealthcareFacilityWriteAllOfUberTripBranding,
    HealthcareFacilityWriteAllOfUberTripBrandingFromJSON,
    HealthcareFacilityWriteAllOfUberTripBrandingFromJSONTyped,
    HealthcareFacilityWriteAllOfUberTripBrandingToJSON,
    HealthcareFacilityWriteAllOfVideos,
    HealthcareFacilityWriteAllOfVideosFromJSON,
    HealthcareFacilityWriteAllOfVideosFromJSONTyped,
    HealthcareFacilityWriteAllOfVideosToJSON,
    HotelWriteAllOfBrunchHours,
    HotelWriteAllOfBrunchHoursFromJSON,
    HotelWriteAllOfBrunchHoursFromJSONTyped,
    HotelWriteAllOfBrunchHoursToJSON,
    HotelWriteAllOfHappyHours,
    HotelWriteAllOfHappyHoursFromJSON,
    HotelWriteAllOfHappyHoursFromJSONTyped,
    HotelWriteAllOfHappyHoursToJSON,
    HotelWriteAllOfKitchenHours,
    HotelWriteAllOfKitchenHoursFromJSON,
    HotelWriteAllOfKitchenHoursFromJSONTyped,
    HotelWriteAllOfKitchenHoursToJSON,
    HotelWriteAllOfMenus,
    HotelWriteAllOfMenusFromJSON,
    HotelWriteAllOfMenusFromJSONTyped,
    HotelWriteAllOfMenusToJSON,
} from './';

/**
 * 
 * @export
 * @interface HotelWriteAllOf
 */
export interface HotelWriteAllOf {
    /**
     * 
     * @type {AtmWriteAllOfMeta}
     * @memberof HotelWriteAllOf
     */
    meta?: AtmWriteAllOfMeta;
    /**
     * 
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * * a phone number
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    name?: string;
    /**
     * 
     * @type {AtmWriteAllOfAddress}
     * @memberof HotelWriteAllOf
     */
    address?: AtmWriteAllOfAddress;
    /**
     * 
     * @type {AtmWriteAllOfAccessHours}
     * @memberof HotelWriteAllOf
     */
    accessHours?: AtmWriteAllOfAccessHours;
    /**
     * Additional information about hours that does not fit in **`hours`** (e.g., `"Closed during the winter"`)
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    additionalHoursText?: string;
    /**
     * If `true`, the entity's street address will not be shown on listings. Defaults to `false`.
     * @type {boolean}
     * @memberof HotelWriteAllOf
     */
    addressHidden?: boolean;
    /**
     * Indicates whether the entity has a pool for adults only.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    adultPool?: HotelWriteAllOfAdultPoolEnum;
    /**
     * Indicates whether the entity offers a shuttle to/from the airport.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    airportShuttle?: HotelWriteAllOfAirportShuttleEnum;
    /**
     * Indicates whether the entity offers a shuttle service of car service to/from nearby airports or train stations.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    airportTransfer?: HotelWriteAllOfAirportTransferEnum;
    /**
     * Indicates whether the entity offers all-inclusive rates.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    allInclusive?: HotelWriteAllOfAllInclusiveEnum;
    /**
     * Other names for your business that you would like us to use when tracking your search performance
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 3 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    alternateNames?: Set<string>;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    alternatePhone?: string;
    /**
     * Other websites for your business that we should search for when tracking your search performance
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 3 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* common domain names, e.g., google.com, youtube.com, etc.
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    alternateWebsites?: Set<string>;
    /**
     * The URL where consumers can download the entity's Android app
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    androidAppUrl?: string;
    /**
     * Association memberships relevant to the entity (e.g., `"New York Doctors Association"`)
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    associations?: Set<string>;
    /**
     * Indicates whether the entity offers babysitting.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    babysittingOffered?: HotelWriteAllOfBabysittingOfferedEnum;
    /**
     * Indicates whether the entity offers baggage storage pre check-in and post check-out.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    baggageStorage?: HotelWriteAllOfBaggageStorageEnum;
    /**
     * Indicates whether the entity has an indoor or outdoor bar onsite.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    bar?: HotelWriteAllOfBarEnum;
    /**
     * Indicates whether the entity has access to a beach.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    beachAccess?: HotelWriteAllOfBeachAccessEnum;
    /**
     * Indicates whether the entity is physically located next to a beach.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    beachFrontProperty?: HotelWriteAllOfBeachFrontPropertyEnum;
    /**
     * Indicates whether the entity offers bicycles for rent or for free.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    bicycles?: HotelWriteAllOfBicyclesEnum;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfBios}
     * @memberof HotelWriteAllOf
     */
    bios?: HealthcareFacilityWriteAllOfBios;
    /**
     * Indicates whether the entity has a boutique store. Gift shop or convenience store are not eligible.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    boutiqueStores?: HotelWriteAllOfBoutiqueStoresEnum;
    /**
     * Brands sold by this entity
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    brands?: Set<string>;
    /**
     * Indicates whether the entity offers breakfast.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    breakfast?: HotelWriteAllOfBreakfastEnum;
    /**
     * 
     * @type {HotelWriteAllOfBrunchHours}
     * @memberof HotelWriteAllOf
     */
    brunchHours?: HotelWriteAllOfBrunchHours;
    /**
     * Indicates whether the entity has a business center.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    businessCenter?: HotelWriteAllOfBusinessCenterEnum;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfCalendars}
     * @memberof HotelWriteAllOf
     */
    calendars?: HealthcareFacilityWriteAllOfCalendars;
    /**
     * Indicates whether the entity offers car rental.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    carRental?: HotelWriteAllOfCarRentalEnum;
    /**
     * Indicates whether the entity has a casino on premise or nearby.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    casino?: HotelWriteAllOfCasinoEnum;
    /**
     * Yext Category IDs.
     * 
     * IDs must be valid and selectable (i.e., cannot be parent categories).
     * 
     * NOTE: The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings.
     * @type {Array<string>}
     * @memberof HotelWriteAllOf
     */
    categoryIds?: Array<string>;
    /**
     * Indicates if the entity is cat friendly.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    catsAllowed?: HotelWriteAllOfCatsAllowedEnum;
    /**
     * The check-in time
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    checkInTime?: string;
    /**
     * The check-out time
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    checkOutTime?: string;
    /**
     * The 1 to 5 star rating of the entitiy based on its services and facilities.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    classificationRating?: string;
    /**
     * Indicates whether the entity is closed
     * @type {boolean}
     * @memberof HotelWriteAllOf
     */
    closed?: boolean;
    /**
     * Indicates whether the entity offers concierge service.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    concierge?: HotelWriteAllOfConciergeEnum;
    /**
     * Indicates whether the entity has a convenience store.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    convenienceStore?: HotelWriteAllOfConvenienceStoreEnum;
    /**
     * Indicates whether the entity offers currency exchange services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    currencyExchange?: HotelWriteAllOfCurrencyExchangeEnum;
    /**
     * Additional keywords you would like us to use when tracking your search performance
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 5 elements.
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    customKeywords?: Set<string>;
    /**
     * A description of the entity
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    description?: string;
    /**
     * 
     * @type {AtmWriteAllOfDisplayCoordinate}
     * @memberof HotelWriteAllOf
     */
    displayCoordinate?: AtmWriteAllOfDisplayCoordinate;
    /**
     * Indicates whether the entity has a doctor on premise or on call.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    doctorOnCall?: HotelWriteAllOfDoctorOnCallEnum;
    /**
     * Indicates if the entity is dog friendly.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    dogsAllowed?: HotelWriteAllOfDogsAllowedEnum;
    /**
     * 
     * @type {AtmWriteAllOfDropoffCoordinate}
     * @memberof HotelWriteAllOf
     */
    dropoffCoordinate?: AtmWriteAllOfDropoffCoordinate;
    /**
     * Indicates whether the entity has electric car chargine stations on premise.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    electricChargingStation?: HotelWriteAllOfElectricChargingStationEnum;
    /**
     * Indicates whether the entity has an elevator.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    elevator?: HotelWriteAllOfElevatorEnum;
    /**
     * Indicates whether the entity has an elliptical machine.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    ellipticalMachine?: HotelWriteAllOfEllipticalMachineEnum;
    /**
     * Emails addresses for this entity's point of contact
     * 
     * Must be valid email addresses
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 5 elements.
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    emails?: Set<string>;
    /**
     * 
     * @type {AtmWriteAllOfFacebookCallToAction}
     * @memberof HotelWriteAllOf
     */
    facebookCallToAction?: AtmWriteAllOfFacebookCallToAction;
    /**
     * 
     * @type {AtmWriteAllOfFacebookCoverPhoto}
     * @memberof HotelWriteAllOf
     */
    facebookCoverPhoto?: AtmWriteAllOfFacebookCoverPhoto;
    /**
     * Location Descriptors are used for Enterprise businesses that sync Facebook listings using brand page location structure. The Location Descriptor is typically an additional geographic description (e.g. geomodifier) that will appear in parentheses after the name on the Facebook listing.
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    facebookDescriptor?: string;
    /**
     * The name for this entity's Facebook profile.  A separate name may be specified to send only to Facebook in order to comply with any specific Facebook rules or naming conventions.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    facebookName?: string;
    /**
     * The city to be displayed on this entity's Facebook profile
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    facebookOverrideCity?: string;
    /**
     * URL for the entity's Facebook Page.
     * 
     * Valid formats:
     * 
     * - facebook.com/profile.php?id=[numId]
     * - facebook.com/group.php?gid=[numId]
     * - facebook.com/groups/[numId]
     * - facebook.com/[Name]
     * - facebook.com/pages/[Name]/[numId]
     * 
     * where [Name] is a String and [numId] is an Integer
     * 
     * If you submit a URL that is not in one of the valid formats, it will be ignored. The success response will contain a warning message explaining why the URL wasn't stored in the system.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    facebookPageUrl?: string;
    /**
     * 
     * @type {AtmWriteAllOfFacebookProfilePhoto}
     * @memberof HotelWriteAllOf
     */
    facebookProfilePhoto?: AtmWriteAllOfFacebookProfilePhoto;
    /**
     * The username that appear's in the Facebook listing URL to help customers find and remember a brand’s Facebook page.  The username is also be used for tagging the Facebook page in other users’ posts, and searching for the Facebook page.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    facebookVanityUrl?: string;
    /**
     * Must be a valid fax number.
     * 
     * If the fax number's calling code is for a country other than the one given in the entity's **`countryCode`**, the fax number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    fax?: string;
    /**
     * 
     * @type {AtmWriteAllOfFeaturedMessage}
     * @memberof HotelWriteAllOf
     */
    featuredMessage?: AtmWriteAllOfFeaturedMessage;
    /**
     * Link to the review-collection page, where consumers can leave first-party reviews
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    firstPartyReviewPage?: string;
    /**
     * Indicates whether the entity has a fitness center.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    fitnessCenter?: HotelWriteAllOfFitnessCenterEnum;
    /**
     * The number of floors the entity has from ground floor to top floor.
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    floorCount?: number;
    /**
     * Indicates whether the entity has free weights.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    freeWeights?: HotelWriteAllOfFreeWeightsEnum;
    /**
     * A list of questions that are frequently asked about this entity
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * @type {Set<AtmWriteAllOfFrequentlyAskedQuestions>}
     * @memberof HotelWriteAllOf
     */
    frequentlyAskedQuestions?: Set<AtmWriteAllOfFrequentlyAskedQuestions>;
    /**
     * Indicates whether the entity has a front desk.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    frontDesk?: HotelWriteAllOfFrontDeskEnum;
    /**
     * Indicates whether the entity has a game room.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    gameRoom?: HotelWriteAllOfGameRoomEnum;
    /**
     * Provides additional information on where the entity can be found (e.g., `Times Square`, `Global Center Mall`)
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    geomodifier?: string;
    /**
     * Indicates whether the entity has a gift shop.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    giftShop?: HotelWriteAllOfGiftShopEnum;
    /**
     * Indicates whether the entity has a golf couse on premise or nearby. The golf course may be independently run.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    golf?: HotelWriteAllOfGolfEnum;
    /**
     * The unique IDs of the entity's Google My Business keywords, as well as the unique IDs of any values selected for each keyword.
     * 
     * Valid keywords (e.g., `has_drive_through`, `has_fitting_room`, `kitchen_in_room`) are determined by the entity's primary category. A full list of keywords can be retrieved with the Google Fields: List endpoint.
     * 
     * Keyword values provide more details on how the keyword applies to the entity (e.g., if the keyword is `has_drive_through`, its values may be `true` or `false`).
     * 
     * * If the **`v`** parameter is before `20181204`: **`googleAttributes`** is formatted as a map of key-value pairs (e.g., `[{ "id": "has_wheelchair_accessible_entrance", "values": [ "true" ] }]`)
     * * If the **`v`** parameter is on or after `20181204`: the contents are formatted as a list of objects (e.g., `{ "has_wheelchair_accessible_entrance": [ "true" ]}`)
     * 
     * **NOTE:** The latest Google Attributes are available via the Google Fields: List endpoint. Google Attributes are managed by Google and are subject to change without notice. To prevent errors, make sure your API implementation is not dependent on the presence of specific attributes.
     * @type {object}
     * @memberof HotelWriteAllOf
     */
    googleAttributes?: object;
    /**
     * 
     * @type {AtmWriteAllOfGoogleCoverPhoto}
     * @memberof HotelWriteAllOf
     */
    googleCoverPhoto?: AtmWriteAllOfGoogleCoverPhoto;
    /**
     * Google My Business Labels help users organize their locations into groups within GMB.
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 10 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    googleMyBusinessLabels?: Set<string>;
    /**
     * The unique identifier of this entity on Google Maps.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    googlePlaceId?: string;
    /**
     * 
     * @type {AtmWriteAllOfGoogleProfilePhoto}
     * @memberof HotelWriteAllOf
     */
    googleProfilePhoto?: AtmWriteAllOfGoogleProfilePhoto;
    /**
     * The URL you would like to submit to Google My Business in place of the one given in **`websiteUrl`** (if applicable).
     * 
     * For example, if you want to analyze the traffic driven by your Google listings separately from other traffic, enter the alternate URL that you will use for tracking in this field.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    googleWebsiteOverride?: string;
    /**
     * 
     * @type {HotelWriteAllOfHappyHours}
     * @memberof HotelWriteAllOf
     */
    happyHours?: HotelWriteAllOfHappyHours;
    /**
     * Indicates whether holiday-hour confirmation alerts are enabled for the Yext Knowledge Assistant for this entity
     * @type {boolean}
     * @memberof HotelWriteAllOf
     */
    holidayHoursConversationEnabled?: boolean;
    /**
     * Indicates whether the entity offers horseback riding.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    horsebackRiding?: HotelWriteAllOfHorsebackRidingEnum;
    /**
     * Indicates whether the entity has a hot tub.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    hotTub?: HotelWriteAllOfHotTubEnum;
    /**
     * 
     * @type {AtmWriteAllOfHours}
     * @memberof HotelWriteAllOf
     */
    hours?: AtmWriteAllOfHours;
    /**
     * Indicates whether the entity offers housekeeping services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    housekeeping?: HotelWriteAllOfHousekeepingEnum;
    /**
     * A statement of the ownership and authorship of a document. Individuals or organizations based in many German-speaking countries are required by law to include an Impressum in published media.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    impressum?: string;
    /**
     * A count of the number of indoor pools
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    indoorPoolCount?: number;
    /**
     * Valid Instagram username for the entity without the leading "@" (e.g., `NewCityAuto`)
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    instagramHandle?: string;
    /**
     * The URL where consumers can download the entity's app to their iPhone or iPad
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    iosAppUrl?: string;
    /**
     * The ISO 3166-2 region code for the entity
     * 
     * Yext will determine the entity's code and update **`isoRegionCode`** with that value. If Yext is unable to determine the code for the entity, the entity'ss ISO 3166-1 alpha-2 country code will be used.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    isoRegionCode?: string;
    /**
     * Keywords that describe the entity.
     * 
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    keywords?: Set<string>;
    /**
     * Indicates if the entity is kid friendly.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    kidFriendly?: HotelWriteAllOfKidFriendlyEnum;
    /**
     * Indicates if the property has a Kids Club.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    kidsClub?: HotelWriteAllOfKidsClubEnum;
    /**
     * Indicates whether the entity allows kids to stay free.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    kidsStayFree?: HotelWriteAllOfKidsStayFreeEnum;
    /**
     * 
     * @type {HotelWriteAllOfKitchenHours}
     * @memberof HotelWriteAllOf
     */
    kitchenHours?: HotelWriteAllOfKitchenHours;
    /**
     * The IDs of the entity labels that have been added to this entity. Entity labels help you identify entities that share a certain characteristic; they do not appear on your entity's listings.
     * 
     * **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.
     * @type {Array<string>}
     * @memberof HotelWriteAllOf
     */
    labels?: Array<string>;
    /**
     * The URL of this entity's Landing Page that was created with Yext Pages
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    landingPageUrl?: string;
    /**
     * The langauges in which consumers can commicate with this entity or its staff members
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    languages?: Set<string>;
    /**
     * Indicates whether the entity offers laundry services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    laundry?: HotelWriteAllOfLaundryEnum;
    /**
     * Indicates if the property has a lazy river
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    lazyRiver?: HotelWriteAllOfLazyRiverEnum;
    /**
     * Indicates if the property has a lifeguard on duty
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    lifeguard?: HotelWriteAllOfLifeguardEnum;
    /**
     * Must be a valid, non-toll-free phone number, based on the country specified in **`address.region`**. Phone numbers for US entities must contain 10 digits.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    localPhone?: string;
    /**
     * Indicates whether the entity offers local shuttle services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    localShuttle?: HotelWriteAllOfLocalShuttleEnum;
    /**
     * Indicates the entity's type, if it is not an event
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    locationType?: HotelWriteAllOfLocationTypeEnum;
    /**
     * 
     * @type {AtmWriteAllOfLogo}
     * @memberof HotelWriteAllOf
     */
    logo?: AtmWriteAllOfLogo;
    /**
     * The main phone number of the entity's point of contact
     * 
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    mainPhone?: string;
    /**
     * Indicates whether the entity offers massage services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    massage?: HotelWriteAllOfMassageEnum;
    /**
     * The maximum age specified by the property for children to stay in the room/suite of a parent or adult without an additional fee
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    maxAgeOfKidsStayFree?: number;
    /**
     * The maximum number of children who can stay in the room/suite of a parent or adult without an additional fee
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    maxNumberOfKidsStayFree?: number;
    /**
     * The number of meeting rooms the entity has.
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    meetingRoomCount?: number;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfMenuUrl}
     * @memberof HotelWriteAllOf
     */
    menuUrl?: HealthcareFacilityWriteAllOfMenuUrl;
    /**
     * 
     * @type {HotelWriteAllOfMenus}
     * @memberof HotelWriteAllOf
     */
    menus?: HotelWriteAllOfMenus;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    mobilePhone?: string;
    /**
     * Indicates whether the entity is mobility/wheelchair accessible
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    mobilityAccessible?: HotelWriteAllOfMobilityAccessibleEnum;
    /**
     * Indicates whether the entity has a nightclub.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    nightclub?: HotelWriteAllOfNightclubEnum;
    /**
     * Indicates whether Knowledge Nudge is enabled for the Yext Knowledge Assistant for this entity
     * @type {boolean}
     * @memberof HotelWriteAllOf
     */
    nudgeEnabled?: boolean;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfOrderUrl}
     * @memberof HotelWriteAllOf
     */
    orderUrl?: HealthcareFacilityWriteAllOfOrderUrl;
    /**
     * The number of outdoor pools the entity has.
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    outdoorPoolCount?: number;
    /**
     * Indicates whether the entity offers parking services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    parking?: HotelWriteAllOfParkingEnum;
    /**
     * The payment methods accepted by this entity
     * 
     * Valid elements depend on the entity's country.
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    paymentOptions?: Set<HotelWriteAllOfPaymentOptionsEnum>;
    /**
     * Indicates if the entity is pet friendly.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    petsAllowed?: HotelWriteAllOfPetsAllowedEnum;
    /**
     * 
     * **NOTE:** The list of photos that you send us must be comprehensive. For example, if you send us a list of photos that does not include photos that you sent in your last update, Yext considers the missing photos to be deleted, and we remove them from your listings.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Supported Aspect Ratios:
     * >* 1 x 1
     * >* 4 x 3
     * >* 3 x 2
     * >* 5 x 3
     * >* 16 x 9
     * >* 3 x 1
     * >* 2 x 3
     * >* 5 x 7
     * >* 4 x 5
     * >* 4 x 1
     * >
     * >**NOTE**: Maximum image size is 5mb after normalization and padding (if applicable). As well, there is a 6 second download limit from the image host.
     * >
     * @type {Array<EventWriteAllOfPhotoGallery>}
     * @memberof HotelWriteAllOf
     */
    photoGallery?: Array<EventWriteAllOfPhotoGallery>;
    /**
     * 
     * @type {AtmWriteAllOfPickupCoordinate}
     * @memberof HotelWriteAllOf
     */
    pickupCoordinate?: AtmWriteAllOfPickupCoordinate;
    /**
     * ID of the user who is the primary Knowledge Assistant contact for the entity
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    primaryConversationContact?: string;
    /**
     * Indicates whether the entity has access to a private beach.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    privateBeach?: HotelWriteAllOfPrivateBeachEnum;
    /**
     * Indicates whether the entity offers private car services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    privateCarService?: HotelWriteAllOfPrivateCarServiceEnum;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfProductLists}
     * @memberof HotelWriteAllOf
     */
    productLists?: HealthcareFacilityWriteAllOfProductLists;
    /**
     * Indicates whether Yext Knowledge Assistant question-and-answer conversations are enabled for this entity
     * @type {boolean}
     * @memberof HotelWriteAllOf
     */
    questionsAndAnswers?: boolean;
    /**
     * Information about the competitors whose search performance you would like to compare to your own
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 5 elements.
     * @type {Set<AtmWriteAllOfRankTrackingCompetitors>}
     * @memberof HotelWriteAllOf
     */
    rankTrackingCompetitors?: Set<AtmWriteAllOfRankTrackingCompetitors>;
    /**
     * Indicates whether Rank Tracking is enabled
     * @type {boolean}
     * @memberof HotelWriteAllOf
     */
    rankTrackingEnabled?: boolean;
    /**
     * How often we send search queries to track your search performance
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    rankTrackingFrequency?: HotelWriteAllOfRankTrackingFrequencyEnum;
    /**
     * The ways in which your keywords will be arranged in the search queries we use to track your performance
     * 
     * 
     * Array must have a minimum of 2 elements.
     * 
     * Array may have a maximum of 4 elements.
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    rankTrackingQueryTemplates?: Set<HotelWriteAllOfRankTrackingQueryTemplatesEnum>;
    /**
     * The search engines that we will use to track your performance
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    rankTrackingSites?: Set<HotelWriteAllOfRankTrackingSitesEnum>;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfReservationUrl}
     * @memberof HotelWriteAllOf
     */
    reservationUrl?: HealthcareFacilityWriteAllOfReservationUrl;
    /**
     * The number of restaurants the entity has.
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    restaurantCount?: number;
    /**
     * The URL given Review Invitation emails where consumers can leave a review about the entity
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    reviewGenerationUrl?: string;
    /**
     * Indicates whether Yext Knowledge Assistant review-response conversations are enabled for this entity
     * @type {boolean}
     * @memberof HotelWriteAllOf
     */
    reviewResponseConversationEnabled?: boolean;
    /**
     * The number of rooms the entity has.
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    roomCount?: number;
    /**
     * Indicates whether the entity offers room service.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    roomService?: HotelWriteAllOfRoomServiceEnum;
    /**
     * 
     * @type {AtmWriteAllOfRoutableCoordinate}
     * @memberof HotelWriteAllOf
     */
    routableCoordinate?: AtmWriteAllOfRoutableCoordinate;
    /**
     * Indicates whether the entity has a salon.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    salon?: HotelWriteAllOfSalonEnum;
    /**
     * Indicates whether the entity has a sauna.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    sauna?: HotelWriteAllOfSaunaEnum;
    /**
     * Indicates whether the entity offers scuba diving.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    scuba?: HotelWriteAllOfScubaEnum;
    /**
     * Indicates whether the entity offers self parking services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    selfParking?: HotelWriteAllOfSelfParkingEnum;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfServiceArea}
     * @memberof HotelWriteAllOf
     */
    serviceArea?: HealthcareFacilityWriteAllOfServiceArea;
    /**
     * Information about the area that is served by this entity. It is specified as a list of service area names and their associated types.
     * **Only for Google My Business and Bing:** Currently, **serviceArea** is only supported by Google My Business and Bing and will not affect your listings on other sites.
     * 
     * 
     * Array may have a maximum of 200 elements.
     * @type {Set<HealthcareFacilityWriteAllOfServiceAreaPlaces>}
     * @memberof HotelWriteAllOf
     */
    serviceAreaPlaces?: Set<HealthcareFacilityWriteAllOfServiceAreaPlaces>;
    /**
     * Services offered by this entity
     * 
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof HotelWriteAllOf
     */
    services?: Set<string>;
    /**
     * Indicates if the entity is smoke free.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    smokeFreeProperty?: HotelWriteAllOfSmokeFreePropertyEnum;
    /**
     * Indicates whether the entity offers snorkeling.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    snorkeling?: HotelWriteAllOfSnorkelingEnum;
    /**
     * Indicates whether the entity offers a social hour.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    socialHour?: HotelWriteAllOfSocialHourEnum;
    /**
     * Indicates whether the entity has a spa.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    spa?: HotelWriteAllOfSpaEnum;
    /**
     * Indicates whether the entity has a sit-down restaurant.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    tableService?: HotelWriteAllOfTableServiceEnum;
    /**
     * Indicates whether the entity has tennis courts.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    tennis?: HotelWriteAllOfTennisEnum;
    /**
     * Indicates whether the entity has a thermal pool.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    thermalPool?: HotelWriteAllOfThermalPoolEnum;
    /**
     * The timezone of the entity, in the standard `IANA time zone database` format (tz database). e.g. `"America/New_York"`
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    timezone?: string;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    tollFreePhone?: string;
    /**
     * Indicates whether the entity has a treadmill.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    treadmill?: HotelWriteAllOfTreadmillEnum;
    /**
     * Must be a valid phone number.
     * 
     * If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    ttyPhone?: string;
    /**
     * Indicates whether the entity offers turndown service.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    turndownService?: HotelWriteAllOfTurndownServiceEnum;
    /**
     * Valid Twitter handle for the entity without the leading "@" (e.g., `JohnSmith`)
     * 
     * If you submit an invalid Twitter handle, it will be ignored. The success response will contain a warning message explaining why your Twitter handle wasn't stored in the system.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    twitterHandle?: string;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfUberLink}
     * @memberof HotelWriteAllOf
     */
    uberLink?: HealthcareFacilityWriteAllOfUberLink;
    /**
     * 
     * @type {HealthcareFacilityWriteAllOfUberTripBranding}
     * @memberof HotelWriteAllOf
     */
    uberTripBranding?: HealthcareFacilityWriteAllOfUberTripBranding;
    /**
     * Indicates whether the entity offers valet parking services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    valetParking?: HotelWriteAllOfValetParkingEnum;
    /**
     * Indicates whether the entity has a vending machine.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    vendingMachine?: HotelWriteAllOfVendingMachineEnum;
    /**
     * Valid YouTube URLs for embedding a video on some publisher sites
     * 
     * **NOTE:** Currently, only the first URL in the Array appears in your listings.
     * 
     * 
     * 
     * Array must be ordered.
     * @type {Set<HealthcareFacilityWriteAllOfVideos>}
     * @memberof HotelWriteAllOf
     */
    videos?: Set<HealthcareFacilityWriteAllOfVideos>;
    /**
     * Indicates whether the entity has a wading pool.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    wadingPool?: HotelWriteAllOfWadingPoolEnum;
    /**
     * Indicates whether the entity offers wake up call services.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    wakeUpCalls?: HotelWriteAllOfWakeUpCallsEnum;
    /**
     * 
     * @type {AtmWriteAllOfWalkableCoordinate}
     * @memberof HotelWriteAllOf
     */
    walkableCoordinate?: AtmWriteAllOfWalkableCoordinate;
    /**
     * Indicates whether the entity has a water park.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    waterPark?: HotelWriteAllOfWaterParkEnum;
    /**
     * Indicates whether the entity offers water skiing.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    waterSkiing?: HotelWriteAllOfWaterSkiingEnum;
    /**
     * Indicates whether the entity offers any kind of watercrafts.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    watercraft?: HotelWriteAllOfWatercraftEnum;
    /**
     * Indicates whether the entity has a water slide.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    waterslide?: HotelWriteAllOfWaterslideEnum;
    /**
     * Indicates whether the entity has a wave pool.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    wavePool?: HotelWriteAllOfWavePoolEnum;
    /**
     * 
     * @type {AtmWriteAllOfWebsiteUrl}
     * @memberof HotelWriteAllOf
     */
    websiteUrl?: AtmWriteAllOfWebsiteUrl;
    /**
     * Indicates whether the entity has a weight machine.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    weightMachine?: HotelWriteAllOfWeightMachineEnum;
    /**
     * Indicates if the entity is wheelchair accessible.
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    wheelchairAccessible?: HotelWriteAllOfWheelchairAccessibleEnum;
    /**
     * Indicates whether the entity has WiFi available
     * @type {string}
     * @memberof HotelWriteAllOf
     */
    wifiAvailable?: HotelWriteAllOfWifiAvailableEnum;
    /**
     * The year the entity was established.
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    yearEstablished?: number;
    /**
     * The most recent year the entity was partially or completely renovated.
     * @type {number}
     * @memberof HotelWriteAllOf
     */
    yearLastRenovated?: number;
}

/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfAdultPoolEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfAirportShuttleEnum {
    AirportShuttleAvailable = 'AIRPORT_SHUTTLE_AVAILABLE',
    AirportShuttleAvailableForFree = 'AIRPORT_SHUTTLE_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfAirportTransferEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfAllInclusiveEnum {
    AllInclusiveRatesAvailable = 'ALL_INCLUSIVE_RATES_AVAILABLE',
    AllInclusiveRatesOnly = 'ALL_INCLUSIVE_RATES_ONLY',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfBabysittingOfferedEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfBaggageStorageEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfBarEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfBeachAccessEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfBeachFrontPropertyEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfBicyclesEnum {
    BicycleRentals = 'BICYCLE_RENTALS',
    BicycleRentalsForFree = 'BICYCLE_RENTALS_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfBoutiqueStoresEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfBreakfastEnum {
    BreakfastAvailable = 'BREAKFAST_AVAILABLE',
    BreakfastAvailableForFree = 'BREAKFAST_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfBusinessCenterEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfCarRentalEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfCasinoEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfCatsAllowedEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfConciergeEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfConvenienceStoreEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfCurrencyExchangeEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfDoctorOnCallEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfDogsAllowedEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfElectricChargingStationEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfElevatorEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfEllipticalMachineEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfFitnessCenterEnum {
    FitnessCenterAvailable = 'FITNESS_CENTER_AVAILABLE',
    FitnessCenterAvailableForFree = 'FITNESS_CENTER_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfFreeWeightsEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfFrontDeskEnum {
    FrontDeskAvailable = 'FRONT_DESK_AVAILABLE',
    FrontDeskAvailable24Hours = 'FRONT_DESK_AVAILABLE_24_HOURS',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfGameRoomEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfGiftShopEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfGolfEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfHorsebackRidingEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfHotTubEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfHousekeepingEnum {
    HousekeepingAvailable = 'HOUSEKEEPING_AVAILABLE',
    HousekeepingAvailableDaily = 'HOUSEKEEPING_AVAILABLE_DAILY',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfKidFriendlyEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfKidsClubEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfKidsStayFreeEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfLaundryEnum {
    FullService = 'FULL_SERVICE',
    SelfService = 'SELF_SERVICE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfLazyRiverEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfLifeguardEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfLocalShuttleEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfLocationTypeEnum {
    Location = 'LOCATION',
    HealthcareFacility = 'HEALTHCARE_FACILITY',
    HealthcareProfessional = 'HEALTHCARE_PROFESSIONAL',
    Atm = 'ATM',
    Restaurant = 'RESTAURANT',
    Hotel = 'HOTEL'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfMassageEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfMobilityAccessibleEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfNightclubEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfParkingEnum {
    ParkingAvailable = 'PARKING_AVAILABLE',
    ParkingAvailableForFree = 'PARKING_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfPaymentOptionsEnum {
    Alipay = 'ALIPAY',
    Americanexpress = 'AMERICANEXPRESS',
    Androidpay = 'ANDROIDPAY',
    Applepay = 'APPLEPAY',
    Atm = 'ATM',
    Atmquick = 'ATMQUICK',
    Bacs = 'BACS',
    Bancontact = 'BANCONTACT',
    Bankdeposit = 'BANKDEPOSIT',
    Bankpay = 'BANKPAY',
    Bgo = 'BGO',
    Bitcoin = 'BITCOIN',
    Bar = 'Bar',
    Cartasi = 'CARTASI',
    Cash = 'CASH',
    Ccs = 'CCS',
    Check = 'CHECK',
    Conb = 'CONB',
    Cvvv = 'CVVV',
    Debitnote = 'DEBITNOTE',
    Dinersclub = 'DINERSCLUB',
    Directdebit = 'DIRECTDEBIT',
    Discover = 'DISCOVER',
    Eckarte = 'ECKARTE',
    Ecocheque = 'ECOCHEQUE',
    Ekena = 'EKENA',
    Emv = 'EMV',
    Financing = 'FINANCING',
    Gopay = 'GOPAY',
    Hayakaken = 'HAYAKAKEN',
    Hebag = 'HEBAG',
    Ibod = 'IBOD',
    Iccards = 'ICCARDS',
    Icoca = 'ICOCA',
    Id = 'ID',
    Ideal = 'IDEAL',
    Inca = 'INCA',
    Invoice = 'INVOICE',
    Jcb = 'JCB',
    JCoinPay = 'JCoinPay',
    Jkopay = 'JKOPAY',
    Kitaca = 'KITACA',
    Kla = 'KLA',
    Klarna = 'KLARNA',
    Linepay = 'LINEPAY',
    Maestro = 'MAESTRO',
    Manaca = 'MANACA',
    Mastercard = 'MASTERCARD',
    Mipay = 'MIPAY',
    Monizze = 'MONIZZE',
    Mpay = 'MPAY',
    ManuelleLastsch = 'Manuelle Lastsch',
    Merpay = 'Merpay',
    Nanaco = 'NANACO',
    Nexi = 'NEXI',
    Nimoca = 'NIMOCA',
    Orem = 'OREM',
    Pasmo = 'PASMO',
    Paybackpay = 'PAYBACKPAY',
    Paybox = 'PAYBOX',
    Payconiq = 'PAYCONIQ',
    Paypal = 'PAYPAL',
    Paypay = 'PAYPAY',
    Paysec = 'PAYSEC',
    Pin = 'PIN',
    Postepay = 'POSTEPAY',
    Qrcode = 'QRCODE',
    Quicpay = 'QUICPAY',
    Rakutenedy = 'RAKUTENEDY',
    Rakutenpay = 'RAKUTENPAY',
    Samsungpay = 'SAMSUNGPAY',
    Sodexo = 'SODEXO',
    Sugoca = 'SUGOCA',
    Suica = 'SUICA',
    Swish = 'SWISH',
    Ticketrestaurant = 'TICKETRESTAURANT',
    Toica = 'TOICA',
    Travelerscheck = 'TRAVELERSCHECK',
    Tscubic = 'TSCUBIC',
    Twint = 'TWINT',
    Unionpay = 'UNIONPAY',
    Vev = 'VEV',
    Visa = 'VISA',
    Visaelectron = 'VISAELECTRON',
    Vob = 'VOB',
    Voucher = 'VOUCHER',
    Vpay = 'VPAY',
    Waon = 'WAON',
    Wechatpay = 'WECHATPAY',
    Wiretransfer = 'WIRETRANSFER',
    YuchoPay = 'Yucho Pay',
    Zelle = 'ZELLE',
    AuPay = 'auPay',
    DBarai = 'dBarai',
    Berweisung = 'Überweisung'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfPetsAllowedEnum {
    PetsWelcome = 'PETS_WELCOME',
    PetsWelcomeForFree = 'PETS_WELCOME_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfPrivateBeachEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfPrivateCarServiceEnum {
    PrivateCarService = 'PRIVATE_CAR_SERVICE',
    PrivateCarServiceForFree = 'PRIVATE_CAR_SERVICE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfRankTrackingFrequencyEnum {
    Weekly = 'WEEKLY',
    Monthly = 'MONTHLY',
    Quarterly = 'QUARTERLY'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfRankTrackingQueryTemplatesEnum {
    Keyword = 'KEYWORD',
    KeywordZip = 'KEYWORD_ZIP',
    KeywordCity = 'KEYWORD_CITY',
    KeywordInCity = 'KEYWORD_IN_CITY',
    KeywordNearMe = 'KEYWORD_NEAR_ME',
    KeywordCityState = 'KEYWORD_CITY_STATE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfRankTrackingSitesEnum {
    GoogleDesktop = 'GOOGLE_DESKTOP',
    GoogleMobile = 'GOOGLE_MOBILE',
    BingDesktop = 'BING_DESKTOP',
    BingMobile = 'BING_MOBILE',
    YahooDesktop = 'YAHOO_DESKTOP',
    YahooMobile = 'YAHOO_MOBILE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfRoomServiceEnum {
    RoomServiceAvailable = 'ROOM_SERVICE_AVAILABLE',
    RoomServiceAvailable24Hours = 'ROOM_SERVICE_AVAILABLE_24_HOURS',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfSalonEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfSaunaEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfScubaEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfSelfParkingEnum {
    SelfParkingAvailable = 'SELF_PARKING_AVAILABLE',
    SelfParkingAvailableForFree = 'SELF_PARKING_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfSmokeFreePropertyEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfSnorkelingEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfSocialHourEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfSpaEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfTableServiceEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfTennisEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfThermalPoolEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfTreadmillEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfTurndownServiceEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfValetParkingEnum {
    ValetParkingAvailable = 'VALET_PARKING_AVAILABLE',
    ValetParkingAvailableForFree = 'VALET_PARKING_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfVendingMachineEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWadingPoolEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWakeUpCallsEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWaterParkEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWaterSkiingEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWatercraftEnum {
    WatercraftRentals = 'WATERCRAFT_RENTALS',
    WatercraftRentalsForFree = 'WATERCRAFT_RENTALS_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWaterslideEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWavePoolEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWeightMachineEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWheelchairAccessibleEnum {
    Yes = 'YES',
    No = 'NO',
    NotApplicable = 'NOT_APPLICABLE'
}/**
* @export
* @enum {string}
*/
export enum HotelWriteAllOfWifiAvailableEnum {
    WifiAvailable = 'WIFI_AVAILABLE',
    WifiAvailableForFree = 'WIFI_AVAILABLE_FOR_FREE',
    NotApplicable = 'NOT_APPLICABLE'
}

export function HotelWriteAllOfFromJSON(json: any): HotelWriteAllOf {
    return HotelWriteAllOfFromJSONTyped(json, false);
}

export function HotelWriteAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelWriteAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'meta': !exists(json, 'meta') ? undefined : AtmWriteAllOfMetaFromJSON(json['meta']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'address': !exists(json, 'address') ? undefined : AtmWriteAllOfAddressFromJSON(json['address']),
        'accessHours': !exists(json, 'accessHours') ? undefined : AtmWriteAllOfAccessHoursFromJSON(json['accessHours']),
        'additionalHoursText': !exists(json, 'additionalHoursText') ? undefined : json['additionalHoursText'],
        'addressHidden': !exists(json, 'addressHidden') ? undefined : json['addressHidden'],
        'adultPool': !exists(json, 'adultPool') ? undefined : json['adultPool'],
        'airportShuttle': !exists(json, 'airportShuttle') ? undefined : json['airportShuttle'],
        'airportTransfer': !exists(json, 'airportTransfer') ? undefined : json['airportTransfer'],
        'allInclusive': !exists(json, 'allInclusive') ? undefined : json['allInclusive'],
        'alternateNames': !exists(json, 'alternateNames') ? undefined : json['alternateNames'],
        'alternatePhone': !exists(json, 'alternatePhone') ? undefined : json['alternatePhone'],
        'alternateWebsites': !exists(json, 'alternateWebsites') ? undefined : json['alternateWebsites'],
        'androidAppUrl': !exists(json, 'androidAppUrl') ? undefined : json['androidAppUrl'],
        'associations': !exists(json, 'associations') ? undefined : json['associations'],
        'babysittingOffered': !exists(json, 'babysittingOffered') ? undefined : json['babysittingOffered'],
        'baggageStorage': !exists(json, 'baggageStorage') ? undefined : json['baggageStorage'],
        'bar': !exists(json, 'bar') ? undefined : json['bar'],
        'beachAccess': !exists(json, 'beachAccess') ? undefined : json['beachAccess'],
        'beachFrontProperty': !exists(json, 'beachFrontProperty') ? undefined : json['beachFrontProperty'],
        'bicycles': !exists(json, 'bicycles') ? undefined : json['bicycles'],
        'bios': !exists(json, 'bios') ? undefined : HealthcareFacilityWriteAllOfBiosFromJSON(json['bios']),
        'boutiqueStores': !exists(json, 'boutiqueStores') ? undefined : json['boutiqueStores'],
        'brands': !exists(json, 'brands') ? undefined : json['brands'],
        'breakfast': !exists(json, 'breakfast') ? undefined : json['breakfast'],
        'brunchHours': !exists(json, 'brunchHours') ? undefined : HotelWriteAllOfBrunchHoursFromJSON(json['brunchHours']),
        'businessCenter': !exists(json, 'businessCenter') ? undefined : json['businessCenter'],
        'calendars': !exists(json, 'calendars') ? undefined : HealthcareFacilityWriteAllOfCalendarsFromJSON(json['calendars']),
        'carRental': !exists(json, 'carRental') ? undefined : json['carRental'],
        'casino': !exists(json, 'casino') ? undefined : json['casino'],
        'categoryIds': !exists(json, 'categoryIds') ? undefined : json['categoryIds'],
        'catsAllowed': !exists(json, 'catsAllowed') ? undefined : json['catsAllowed'],
        'checkInTime': !exists(json, 'checkInTime') ? undefined : json['checkInTime'],
        'checkOutTime': !exists(json, 'checkOutTime') ? undefined : json['checkOutTime'],
        'classificationRating': !exists(json, 'classificationRating') ? undefined : json['classificationRating'],
        'closed': !exists(json, 'closed') ? undefined : json['closed'],
        'concierge': !exists(json, 'concierge') ? undefined : json['concierge'],
        'convenienceStore': !exists(json, 'convenienceStore') ? undefined : json['convenienceStore'],
        'currencyExchange': !exists(json, 'currencyExchange') ? undefined : json['currencyExchange'],
        'customKeywords': !exists(json, 'customKeywords') ? undefined : json['customKeywords'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayCoordinate': !exists(json, 'displayCoordinate') ? undefined : AtmWriteAllOfDisplayCoordinateFromJSON(json['displayCoordinate']),
        'doctorOnCall': !exists(json, 'doctorOnCall') ? undefined : json['doctorOnCall'],
        'dogsAllowed': !exists(json, 'dogsAllowed') ? undefined : json['dogsAllowed'],
        'dropoffCoordinate': !exists(json, 'dropoffCoordinate') ? undefined : AtmWriteAllOfDropoffCoordinateFromJSON(json['dropoffCoordinate']),
        'electricChargingStation': !exists(json, 'electricChargingStation') ? undefined : json['electricChargingStation'],
        'elevator': !exists(json, 'elevator') ? undefined : json['elevator'],
        'ellipticalMachine': !exists(json, 'ellipticalMachine') ? undefined : json['ellipticalMachine'],
        'emails': !exists(json, 'emails') ? undefined : json['emails'],
        'facebookCallToAction': !exists(json, 'facebookCallToAction') ? undefined : AtmWriteAllOfFacebookCallToActionFromJSON(json['facebookCallToAction']),
        'facebookCoverPhoto': !exists(json, 'facebookCoverPhoto') ? undefined : AtmWriteAllOfFacebookCoverPhotoFromJSON(json['facebookCoverPhoto']),
        'facebookDescriptor': !exists(json, 'facebookDescriptor') ? undefined : json['facebookDescriptor'],
        'facebookName': !exists(json, 'facebookName') ? undefined : json['facebookName'],
        'facebookOverrideCity': !exists(json, 'facebookOverrideCity') ? undefined : json['facebookOverrideCity'],
        'facebookPageUrl': !exists(json, 'facebookPageUrl') ? undefined : json['facebookPageUrl'],
        'facebookProfilePhoto': !exists(json, 'facebookProfilePhoto') ? undefined : AtmWriteAllOfFacebookProfilePhotoFromJSON(json['facebookProfilePhoto']),
        'facebookVanityUrl': !exists(json, 'facebookVanityUrl') ? undefined : json['facebookVanityUrl'],
        'fax': !exists(json, 'fax') ? undefined : json['fax'],
        'featuredMessage': !exists(json, 'featuredMessage') ? undefined : AtmWriteAllOfFeaturedMessageFromJSON(json['featuredMessage']),
        'firstPartyReviewPage': !exists(json, 'firstPartyReviewPage') ? undefined : json['firstPartyReviewPage'],
        'fitnessCenter': !exists(json, 'fitnessCenter') ? undefined : json['fitnessCenter'],
        'floorCount': !exists(json, 'floorCount') ? undefined : json['floorCount'],
        'freeWeights': !exists(json, 'freeWeights') ? undefined : json['freeWeights'],
        'frequentlyAskedQuestions': !exists(json, 'frequentlyAskedQuestions') ? undefined : (new Set((json['frequentlyAskedQuestions'] as Array<any>).map(AtmWriteAllOfFrequentlyAskedQuestionsFromJSON))),
        'frontDesk': !exists(json, 'frontDesk') ? undefined : json['frontDesk'],
        'gameRoom': !exists(json, 'gameRoom') ? undefined : json['gameRoom'],
        'geomodifier': !exists(json, 'geomodifier') ? undefined : json['geomodifier'],
        'giftShop': !exists(json, 'giftShop') ? undefined : json['giftShop'],
        'golf': !exists(json, 'golf') ? undefined : json['golf'],
        'googleAttributes': !exists(json, 'googleAttributes') ? undefined : json['googleAttributes'],
        'googleCoverPhoto': !exists(json, 'googleCoverPhoto') ? undefined : AtmWriteAllOfGoogleCoverPhotoFromJSON(json['googleCoverPhoto']),
        'googleMyBusinessLabels': !exists(json, 'googleMyBusinessLabels') ? undefined : json['googleMyBusinessLabels'],
        'googlePlaceId': !exists(json, 'googlePlaceId') ? undefined : json['googlePlaceId'],
        'googleProfilePhoto': !exists(json, 'googleProfilePhoto') ? undefined : AtmWriteAllOfGoogleProfilePhotoFromJSON(json['googleProfilePhoto']),
        'googleWebsiteOverride': !exists(json, 'googleWebsiteOverride') ? undefined : json['googleWebsiteOverride'],
        'happyHours': !exists(json, 'happyHours') ? undefined : HotelWriteAllOfHappyHoursFromJSON(json['happyHours']),
        'holidayHoursConversationEnabled': !exists(json, 'holidayHoursConversationEnabled') ? undefined : json['holidayHoursConversationEnabled'],
        'horsebackRiding': !exists(json, 'horsebackRiding') ? undefined : json['horsebackRiding'],
        'hotTub': !exists(json, 'hotTub') ? undefined : json['hotTub'],
        'hours': !exists(json, 'hours') ? undefined : AtmWriteAllOfHoursFromJSON(json['hours']),
        'housekeeping': !exists(json, 'housekeeping') ? undefined : json['housekeeping'],
        'impressum': !exists(json, 'impressum') ? undefined : json['impressum'],
        'indoorPoolCount': !exists(json, 'indoorPoolCount') ? undefined : json['indoorPoolCount'],
        'instagramHandle': !exists(json, 'instagramHandle') ? undefined : json['instagramHandle'],
        'iosAppUrl': !exists(json, 'iosAppUrl') ? undefined : json['iosAppUrl'],
        'isoRegionCode': !exists(json, 'isoRegionCode') ? undefined : json['isoRegionCode'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'kidFriendly': !exists(json, 'kidFriendly') ? undefined : json['kidFriendly'],
        'kidsClub': !exists(json, 'kidsClub') ? undefined : json['kidsClub'],
        'kidsStayFree': !exists(json, 'kidsStayFree') ? undefined : json['kidsStayFree'],
        'kitchenHours': !exists(json, 'kitchenHours') ? undefined : HotelWriteAllOfKitchenHoursFromJSON(json['kitchenHours']),
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'landingPageUrl': !exists(json, 'landingPageUrl') ? undefined : json['landingPageUrl'],
        'languages': !exists(json, 'languages') ? undefined : json['languages'],
        'laundry': !exists(json, 'laundry') ? undefined : json['laundry'],
        'lazyRiver': !exists(json, 'lazyRiver') ? undefined : json['lazyRiver'],
        'lifeguard': !exists(json, 'lifeguard') ? undefined : json['lifeguard'],
        'localPhone': !exists(json, 'localPhone') ? undefined : json['localPhone'],
        'localShuttle': !exists(json, 'localShuttle') ? undefined : json['localShuttle'],
        'locationType': !exists(json, 'locationType') ? undefined : json['locationType'],
        'logo': !exists(json, 'logo') ? undefined : AtmWriteAllOfLogoFromJSON(json['logo']),
        'mainPhone': !exists(json, 'mainPhone') ? undefined : json['mainPhone'],
        'massage': !exists(json, 'massage') ? undefined : json['massage'],
        'maxAgeOfKidsStayFree': !exists(json, 'maxAgeOfKidsStayFree') ? undefined : json['maxAgeOfKidsStayFree'],
        'maxNumberOfKidsStayFree': !exists(json, 'maxNumberOfKidsStayFree') ? undefined : json['maxNumberOfKidsStayFree'],
        'meetingRoomCount': !exists(json, 'meetingRoomCount') ? undefined : json['meetingRoomCount'],
        'menuUrl': !exists(json, 'menuUrl') ? undefined : HealthcareFacilityWriteAllOfMenuUrlFromJSON(json['menuUrl']),
        'menus': !exists(json, 'menus') ? undefined : HotelWriteAllOfMenusFromJSON(json['menus']),
        'mobilePhone': !exists(json, 'mobilePhone') ? undefined : json['mobilePhone'],
        'mobilityAccessible': !exists(json, 'mobilityAccessible') ? undefined : json['mobilityAccessible'],
        'nightclub': !exists(json, 'nightclub') ? undefined : json['nightclub'],
        'nudgeEnabled': !exists(json, 'nudgeEnabled') ? undefined : json['nudgeEnabled'],
        'orderUrl': !exists(json, 'orderUrl') ? undefined : HealthcareFacilityWriteAllOfOrderUrlFromJSON(json['orderUrl']),
        'outdoorPoolCount': !exists(json, 'outdoorPoolCount') ? undefined : json['outdoorPoolCount'],
        'parking': !exists(json, 'parking') ? undefined : json['parking'],
        'paymentOptions': !exists(json, 'paymentOptions') ? undefined : json['paymentOptions'],
        'petsAllowed': !exists(json, 'petsAllowed') ? undefined : json['petsAllowed'],
        'photoGallery': !exists(json, 'photoGallery') ? undefined : ((json['photoGallery'] as Array<any>).map(EventWriteAllOfPhotoGalleryFromJSON)),
        'pickupCoordinate': !exists(json, 'pickupCoordinate') ? undefined : AtmWriteAllOfPickupCoordinateFromJSON(json['pickupCoordinate']),
        'primaryConversationContact': !exists(json, 'primaryConversationContact') ? undefined : json['primaryConversationContact'],
        'privateBeach': !exists(json, 'privateBeach') ? undefined : json['privateBeach'],
        'privateCarService': !exists(json, 'privateCarService') ? undefined : json['privateCarService'],
        'productLists': !exists(json, 'productLists') ? undefined : HealthcareFacilityWriteAllOfProductListsFromJSON(json['productLists']),
        'questionsAndAnswers': !exists(json, 'questionsAndAnswers') ? undefined : json['questionsAndAnswers'],
        'rankTrackingCompetitors': !exists(json, 'rankTrackingCompetitors') ? undefined : (new Set((json['rankTrackingCompetitors'] as Array<any>).map(AtmWriteAllOfRankTrackingCompetitorsFromJSON))),
        'rankTrackingEnabled': !exists(json, 'rankTrackingEnabled') ? undefined : json['rankTrackingEnabled'],
        'rankTrackingFrequency': !exists(json, 'rankTrackingFrequency') ? undefined : json['rankTrackingFrequency'],
        'rankTrackingQueryTemplates': !exists(json, 'rankTrackingQueryTemplates') ? undefined : json['rankTrackingQueryTemplates'],
        'rankTrackingSites': !exists(json, 'rankTrackingSites') ? undefined : json['rankTrackingSites'],
        'reservationUrl': !exists(json, 'reservationUrl') ? undefined : HealthcareFacilityWriteAllOfReservationUrlFromJSON(json['reservationUrl']),
        'restaurantCount': !exists(json, 'restaurantCount') ? undefined : json['restaurantCount'],
        'reviewGenerationUrl': !exists(json, 'reviewGenerationUrl') ? undefined : json['reviewGenerationUrl'],
        'reviewResponseConversationEnabled': !exists(json, 'reviewResponseConversationEnabled') ? undefined : json['reviewResponseConversationEnabled'],
        'roomCount': !exists(json, 'roomCount') ? undefined : json['roomCount'],
        'roomService': !exists(json, 'roomService') ? undefined : json['roomService'],
        'routableCoordinate': !exists(json, 'routableCoordinate') ? undefined : AtmWriteAllOfRoutableCoordinateFromJSON(json['routableCoordinate']),
        'salon': !exists(json, 'salon') ? undefined : json['salon'],
        'sauna': !exists(json, 'sauna') ? undefined : json['sauna'],
        'scuba': !exists(json, 'scuba') ? undefined : json['scuba'],
        'selfParking': !exists(json, 'selfParking') ? undefined : json['selfParking'],
        'serviceArea': !exists(json, 'serviceArea') ? undefined : HealthcareFacilityWriteAllOfServiceAreaFromJSON(json['serviceArea']),
        'serviceAreaPlaces': !exists(json, 'serviceAreaPlaces') ? undefined : (new Set((json['serviceAreaPlaces'] as Array<any>).map(HealthcareFacilityWriteAllOfServiceAreaPlacesFromJSON))),
        'services': !exists(json, 'services') ? undefined : json['services'],
        'smokeFreeProperty': !exists(json, 'smokeFreeProperty') ? undefined : json['smokeFreeProperty'],
        'snorkeling': !exists(json, 'snorkeling') ? undefined : json['snorkeling'],
        'socialHour': !exists(json, 'socialHour') ? undefined : json['socialHour'],
        'spa': !exists(json, 'spa') ? undefined : json['spa'],
        'tableService': !exists(json, 'tableService') ? undefined : json['tableService'],
        'tennis': !exists(json, 'tennis') ? undefined : json['tennis'],
        'thermalPool': !exists(json, 'thermalPool') ? undefined : json['thermalPool'],
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
        'tollFreePhone': !exists(json, 'tollFreePhone') ? undefined : json['tollFreePhone'],
        'treadmill': !exists(json, 'treadmill') ? undefined : json['treadmill'],
        'ttyPhone': !exists(json, 'ttyPhone') ? undefined : json['ttyPhone'],
        'turndownService': !exists(json, 'turndownService') ? undefined : json['turndownService'],
        'twitterHandle': !exists(json, 'twitterHandle') ? undefined : json['twitterHandle'],
        'uberLink': !exists(json, 'uberLink') ? undefined : HealthcareFacilityWriteAllOfUberLinkFromJSON(json['uberLink']),
        'uberTripBranding': !exists(json, 'uberTripBranding') ? undefined : HealthcareFacilityWriteAllOfUberTripBrandingFromJSON(json['uberTripBranding']),
        'valetParking': !exists(json, 'valetParking') ? undefined : json['valetParking'],
        'vendingMachine': !exists(json, 'vendingMachine') ? undefined : json['vendingMachine'],
        'videos': !exists(json, 'videos') ? undefined : (new Set((json['videos'] as Array<any>).map(HealthcareFacilityWriteAllOfVideosFromJSON))),
        'wadingPool': !exists(json, 'wadingPool') ? undefined : json['wadingPool'],
        'wakeUpCalls': !exists(json, 'wakeUpCalls') ? undefined : json['wakeUpCalls'],
        'walkableCoordinate': !exists(json, 'walkableCoordinate') ? undefined : AtmWriteAllOfWalkableCoordinateFromJSON(json['walkableCoordinate']),
        'waterPark': !exists(json, 'waterPark') ? undefined : json['waterPark'],
        'waterSkiing': !exists(json, 'waterSkiing') ? undefined : json['waterSkiing'],
        'watercraft': !exists(json, 'watercraft') ? undefined : json['watercraft'],
        'waterslide': !exists(json, 'waterslide') ? undefined : json['waterslide'],
        'wavePool': !exists(json, 'wavePool') ? undefined : json['wavePool'],
        'websiteUrl': !exists(json, 'websiteUrl') ? undefined : AtmWriteAllOfWebsiteUrlFromJSON(json['websiteUrl']),
        'weightMachine': !exists(json, 'weightMachine') ? undefined : json['weightMachine'],
        'wheelchairAccessible': !exists(json, 'wheelchairAccessible') ? undefined : json['wheelchairAccessible'],
        'wifiAvailable': !exists(json, 'wifiAvailable') ? undefined : json['wifiAvailable'],
        'yearEstablished': !exists(json, 'yearEstablished') ? undefined : json['yearEstablished'],
        'yearLastRenovated': !exists(json, 'yearLastRenovated') ? undefined : json['yearLastRenovated'],
    };
}

export function HotelWriteAllOfToJSON(value?: HotelWriteAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'meta': AtmWriteAllOfMetaToJSON(value.meta),
        'name': value.name,
        'address': AtmWriteAllOfAddressToJSON(value.address),
        'accessHours': AtmWriteAllOfAccessHoursToJSON(value.accessHours),
        'additionalHoursText': value.additionalHoursText,
        'addressHidden': value.addressHidden,
        'adultPool': value.adultPool,
        'airportShuttle': value.airportShuttle,
        'airportTransfer': value.airportTransfer,
        'allInclusive': value.allInclusive,
        'alternateNames': value.alternateNames,
        'alternatePhone': value.alternatePhone,
        'alternateWebsites': value.alternateWebsites,
        'androidAppUrl': value.androidAppUrl,
        'associations': value.associations,
        'babysittingOffered': value.babysittingOffered,
        'baggageStorage': value.baggageStorage,
        'bar': value.bar,
        'beachAccess': value.beachAccess,
        'beachFrontProperty': value.beachFrontProperty,
        'bicycles': value.bicycles,
        'bios': HealthcareFacilityWriteAllOfBiosToJSON(value.bios),
        'boutiqueStores': value.boutiqueStores,
        'brands': value.brands,
        'breakfast': value.breakfast,
        'brunchHours': HotelWriteAllOfBrunchHoursToJSON(value.brunchHours),
        'businessCenter': value.businessCenter,
        'calendars': HealthcareFacilityWriteAllOfCalendarsToJSON(value.calendars),
        'carRental': value.carRental,
        'casino': value.casino,
        'categoryIds': value.categoryIds,
        'catsAllowed': value.catsAllowed,
        'checkInTime': value.checkInTime,
        'checkOutTime': value.checkOutTime,
        'classificationRating': value.classificationRating,
        'closed': value.closed,
        'concierge': value.concierge,
        'convenienceStore': value.convenienceStore,
        'currencyExchange': value.currencyExchange,
        'customKeywords': value.customKeywords,
        'description': value.description,
        'displayCoordinate': AtmWriteAllOfDisplayCoordinateToJSON(value.displayCoordinate),
        'doctorOnCall': value.doctorOnCall,
        'dogsAllowed': value.dogsAllowed,
        'dropoffCoordinate': AtmWriteAllOfDropoffCoordinateToJSON(value.dropoffCoordinate),
        'electricChargingStation': value.electricChargingStation,
        'elevator': value.elevator,
        'ellipticalMachine': value.ellipticalMachine,
        'emails': value.emails,
        'facebookCallToAction': AtmWriteAllOfFacebookCallToActionToJSON(value.facebookCallToAction),
        'facebookCoverPhoto': AtmWriteAllOfFacebookCoverPhotoToJSON(value.facebookCoverPhoto),
        'facebookDescriptor': value.facebookDescriptor,
        'facebookName': value.facebookName,
        'facebookOverrideCity': value.facebookOverrideCity,
        'facebookPageUrl': value.facebookPageUrl,
        'facebookProfilePhoto': AtmWriteAllOfFacebookProfilePhotoToJSON(value.facebookProfilePhoto),
        'facebookVanityUrl': value.facebookVanityUrl,
        'fax': value.fax,
        'featuredMessage': AtmWriteAllOfFeaturedMessageToJSON(value.featuredMessage),
        'firstPartyReviewPage': value.firstPartyReviewPage,
        'fitnessCenter': value.fitnessCenter,
        'floorCount': value.floorCount,
        'freeWeights': value.freeWeights,
        'frequentlyAskedQuestions': value.frequentlyAskedQuestions === undefined ? undefined : (Array.from(value.frequentlyAskedQuestions as Set<any>).map(AtmWriteAllOfFrequentlyAskedQuestionsToJSON)),
        'frontDesk': value.frontDesk,
        'gameRoom': value.gameRoom,
        'geomodifier': value.geomodifier,
        'giftShop': value.giftShop,
        'golf': value.golf,
        'googleAttributes': value.googleAttributes,
        'googleCoverPhoto': AtmWriteAllOfGoogleCoverPhotoToJSON(value.googleCoverPhoto),
        'googleMyBusinessLabels': value.googleMyBusinessLabels,
        'googlePlaceId': value.googlePlaceId,
        'googleProfilePhoto': AtmWriteAllOfGoogleProfilePhotoToJSON(value.googleProfilePhoto),
        'googleWebsiteOverride': value.googleWebsiteOverride,
        'happyHours': HotelWriteAllOfHappyHoursToJSON(value.happyHours),
        'holidayHoursConversationEnabled': value.holidayHoursConversationEnabled,
        'horsebackRiding': value.horsebackRiding,
        'hotTub': value.hotTub,
        'hours': AtmWriteAllOfHoursToJSON(value.hours),
        'housekeeping': value.housekeeping,
        'impressum': value.impressum,
        'indoorPoolCount': value.indoorPoolCount,
        'instagramHandle': value.instagramHandle,
        'iosAppUrl': value.iosAppUrl,
        'isoRegionCode': value.isoRegionCode,
        'keywords': value.keywords,
        'kidFriendly': value.kidFriendly,
        'kidsClub': value.kidsClub,
        'kidsStayFree': value.kidsStayFree,
        'kitchenHours': HotelWriteAllOfKitchenHoursToJSON(value.kitchenHours),
        'labels': value.labels,
        'landingPageUrl': value.landingPageUrl,
        'languages': value.languages,
        'laundry': value.laundry,
        'lazyRiver': value.lazyRiver,
        'lifeguard': value.lifeguard,
        'localPhone': value.localPhone,
        'localShuttle': value.localShuttle,
        'locationType': value.locationType,
        'logo': AtmWriteAllOfLogoToJSON(value.logo),
        'mainPhone': value.mainPhone,
        'massage': value.massage,
        'maxAgeOfKidsStayFree': value.maxAgeOfKidsStayFree,
        'maxNumberOfKidsStayFree': value.maxNumberOfKidsStayFree,
        'meetingRoomCount': value.meetingRoomCount,
        'menuUrl': HealthcareFacilityWriteAllOfMenuUrlToJSON(value.menuUrl),
        'menus': HotelWriteAllOfMenusToJSON(value.menus),
        'mobilePhone': value.mobilePhone,
        'mobilityAccessible': value.mobilityAccessible,
        'nightclub': value.nightclub,
        'nudgeEnabled': value.nudgeEnabled,
        'orderUrl': HealthcareFacilityWriteAllOfOrderUrlToJSON(value.orderUrl),
        'outdoorPoolCount': value.outdoorPoolCount,
        'parking': value.parking,
        'paymentOptions': value.paymentOptions,
        'petsAllowed': value.petsAllowed,
        'photoGallery': value.photoGallery === undefined ? undefined : ((value.photoGallery as Array<any>).map(EventWriteAllOfPhotoGalleryToJSON)),
        'pickupCoordinate': AtmWriteAllOfPickupCoordinateToJSON(value.pickupCoordinate),
        'primaryConversationContact': value.primaryConversationContact,
        'privateBeach': value.privateBeach,
        'privateCarService': value.privateCarService,
        'productLists': HealthcareFacilityWriteAllOfProductListsToJSON(value.productLists),
        'questionsAndAnswers': value.questionsAndAnswers,
        'rankTrackingCompetitors': value.rankTrackingCompetitors === undefined ? undefined : (Array.from(value.rankTrackingCompetitors as Set<any>).map(AtmWriteAllOfRankTrackingCompetitorsToJSON)),
        'rankTrackingEnabled': value.rankTrackingEnabled,
        'rankTrackingFrequency': value.rankTrackingFrequency,
        'rankTrackingQueryTemplates': value.rankTrackingQueryTemplates,
        'rankTrackingSites': value.rankTrackingSites,
        'reservationUrl': HealthcareFacilityWriteAllOfReservationUrlToJSON(value.reservationUrl),
        'restaurantCount': value.restaurantCount,
        'reviewGenerationUrl': value.reviewGenerationUrl,
        'reviewResponseConversationEnabled': value.reviewResponseConversationEnabled,
        'roomCount': value.roomCount,
        'roomService': value.roomService,
        'routableCoordinate': AtmWriteAllOfRoutableCoordinateToJSON(value.routableCoordinate),
        'salon': value.salon,
        'sauna': value.sauna,
        'scuba': value.scuba,
        'selfParking': value.selfParking,
        'serviceArea': HealthcareFacilityWriteAllOfServiceAreaToJSON(value.serviceArea),
        'serviceAreaPlaces': value.serviceAreaPlaces === undefined ? undefined : (Array.from(value.serviceAreaPlaces as Set<any>).map(HealthcareFacilityWriteAllOfServiceAreaPlacesToJSON)),
        'services': value.services,
        'smokeFreeProperty': value.smokeFreeProperty,
        'snorkeling': value.snorkeling,
        'socialHour': value.socialHour,
        'spa': value.spa,
        'tableService': value.tableService,
        'tennis': value.tennis,
        'thermalPool': value.thermalPool,
        'timezone': value.timezone,
        'tollFreePhone': value.tollFreePhone,
        'treadmill': value.treadmill,
        'ttyPhone': value.ttyPhone,
        'turndownService': value.turndownService,
        'twitterHandle': value.twitterHandle,
        'uberLink': HealthcareFacilityWriteAllOfUberLinkToJSON(value.uberLink),
        'uberTripBranding': HealthcareFacilityWriteAllOfUberTripBrandingToJSON(value.uberTripBranding),
        'valetParking': value.valetParking,
        'vendingMachine': value.vendingMachine,
        'videos': value.videos === undefined ? undefined : (Array.from(value.videos as Set<any>).map(HealthcareFacilityWriteAllOfVideosToJSON)),
        'wadingPool': value.wadingPool,
        'wakeUpCalls': value.wakeUpCalls,
        'walkableCoordinate': AtmWriteAllOfWalkableCoordinateToJSON(value.walkableCoordinate),
        'waterPark': value.waterPark,
        'waterSkiing': value.waterSkiing,
        'watercraft': value.watercraft,
        'waterslide': value.waterslide,
        'wavePool': value.wavePool,
        'websiteUrl': AtmWriteAllOfWebsiteUrlToJSON(value.websiteUrl),
        'weightMachine': value.weightMachine,
        'wheelchairAccessible': value.wheelchairAccessible,
        'wifiAvailable': value.wifiAvailable,
        'yearEstablished': value.yearEstablished,
        'yearLastRenovated': value.yearLastRenovated,
    };
}


