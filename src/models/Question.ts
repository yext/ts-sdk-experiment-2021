/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Answer,
    AnswerFromJSON,
    AnswerFromJSONTyped,
    AnswerToJSON,
} from './';

/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * ID of this question.
     * @type {string}
     * @memberof Question
     */
    id?: string;
    /**
     * IDs of the entities associated to this question.
     * @type {Array<string>}
     * @memberof Question
     */
    entityIds?: Array<string>;
    /**
     * ID of the account associated with this question.
     * @type {string}
     * @memberof Question
     */
    accountId?: string;
    /**
     * ID of the publisher associated with this question. For first-party Q&A, this will be FIRSTPARTY.
     * @type {string}
     * @memberof Question
     */
    publisherId?: string;
    /**
     * The name of the person that asked the question.
     * @type {string}
     * @memberof Question
     */
    authorName?: string;
    /**
     * The email of the person that asked the question. Only supported for FIRSTPARTY Q&A.
     * @type {string}
     * @memberof Question
     */
    authorEmail?: string;
    /**
     * The photo URL of the person that asked the question.
     * @type {string}
     * @memberof Question
     */
    authorPhotoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    authorType?: QuestionAuthorTypeEnum;
    /**
     * The language of the question. Only supported for FIRSTPARTY Q&A.
     * @type {string}
     * @memberof Question
     */
    language?: string;
    /**
     * Number of upvotes the question has.
     * @type {number}
     * @memberof Question
     */
    upvoteCount?: number;
    /**
     * The question text.
     * @type {string}
     * @memberof Question
     */
    content?: string;
    /**
     * Additional description text. Only supported for FIRSTPARTY Q&A.
     * @type {string}
     * @memberof Question
     */
    description?: string;
    /**
     * Timestamp the question was created on the publisher.
     * @type {number}
     * @memberof Question
     */
    createTime?: number;
    /**
     * Timestamp the question was last updated on the publisher.
     * @type {number}
     * @memberof Question
     */
    updateTime?: number;
    /**
     * Number of answers the question has.
     * @type {number}
     * @memberof Question
     */
    answerCount?: number;
    /**
     * 
     * @type {Array<Answer>}
     * @memberof Question
     */
    answers?: Array<Answer>;
}

/**
* @export
* @enum {string}
*/
export enum QuestionAuthorTypeEnum {
    RegularUser = 'REGULAR_USER',
    LocalGuide = 'LOCAL_GUIDE',
    Merchant = 'MERCHANT',
    AuthorTypeUnspecified = 'AUTHOR_TYPE_UNSPECIFIED'
}

export function QuestionFromJSON(json: any): Question {
    return QuestionFromJSONTyped(json, false);
}

export function QuestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Question {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'entityIds': !exists(json, 'entityIds') ? undefined : json['entityIds'],
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'publisherId': !exists(json, 'publisherId') ? undefined : json['publisherId'],
        'authorName': !exists(json, 'authorName') ? undefined : json['authorName'],
        'authorEmail': !exists(json, 'authorEmail') ? undefined : json['authorEmail'],
        'authorPhotoUrl': !exists(json, 'authorPhotoUrl') ? undefined : json['authorPhotoUrl'],
        'authorType': !exists(json, 'authorType') ? undefined : json['authorType'],
        'language': !exists(json, 'language') ? undefined : json['language'],
        'upvoteCount': !exists(json, 'upvoteCount') ? undefined : json['upvoteCount'],
        'content': !exists(json, 'content') ? undefined : json['content'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'createTime': !exists(json, 'createTime') ? undefined : json['createTime'],
        'updateTime': !exists(json, 'updateTime') ? undefined : json['updateTime'],
        'answerCount': !exists(json, 'answerCount') ? undefined : json['answerCount'],
        'answers': !exists(json, 'answers') ? undefined : ((json['answers'] as Array<any>).map(AnswerFromJSON)),
    };
}

export function QuestionToJSON(value?: Question | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'entityIds': value.entityIds,
        'accountId': value.accountId,
        'publisherId': value.publisherId,
        'authorName': value.authorName,
        'authorEmail': value.authorEmail,
        'authorPhotoUrl': value.authorPhotoUrl,
        'authorType': value.authorType,
        'language': value.language,
        'upvoteCount': value.upvoteCount,
        'content': value.content,
        'description': value.description,
        'createTime': value.createTime,
        'updateTime': value.updateTime,
        'answerCount': value.answerCount,
        'answers': value.answers === undefined ? undefined : ((value.answers as Array<any>).map(AnswerToJSON)),
    };
}


