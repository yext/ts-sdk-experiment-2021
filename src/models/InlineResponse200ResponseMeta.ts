/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Contains the metadata about the entity.
 * 
 * ```
 * Eligible For: 
 *    * atm
 *    * event
 *    * faq
 *    * healthcareFacility
 *    * healthcareProfessional
 *    * hotel
 *    * job
 *    * location
 *    * restaurant
 * ```
 * @export
 * @interface InlineResponse200ResponseMeta
 */
export interface InlineResponse200ResponseMeta {
    /**
     * ID of the account associated with this Entity
     * @type {string}
     * @memberof InlineResponse200ResponseMeta
     */
    accountId?: string;
    /**
     * Country code of this Entity's Language Profile (defaults to the country of the account)
     * 
     * Filtering Type: `text`
     * @type {string}
     * @memberof InlineResponse200ResponseMeta
     */
    countryCode?: string;
    /**
     * This Entity's type (e.g., location, event)
     * 
     * Filtering Type: `text`
     * @type {string}
     * @memberof InlineResponse200ResponseMeta
     */
    entityType?: string;
    /**
     * The ID of the folder containing this Entity
     * 
     * Filtering Type: `text`
     * @type {string}
     * @memberof InlineResponse200ResponseMeta
     */
    folderId?: string;
    /**
     * ID of this Entity
     * 
     * Filtering Type: `text`
     * @type {string}
     * @memberof InlineResponse200ResponseMeta
     */
    id?: string;
    /**
     * This Entity's labels
     * 
     * Filtering Type: `list of integer`
     * @type {Array<number>}
     * @memberof InlineResponse200ResponseMeta
     */
    labels?: Array<number>;
    /**
     * Language code of this Entity's Language Profile (defaults to the language code of the account)
     * 
     * Filtering Type: `text`
     * @type {string}
     * @memberof InlineResponse200ResponseMeta
     */
    language?: string;
    /**
     * The timestamp of the most recent change to this entity record. Will be ignored when the client is saving entity data to Yext.
     * 
     * **NOTE:** The timestamp may change even if observable fields stay the same.
     * @type {string}
     * @memberof InlineResponse200ResponseMeta
     */
    timestamp?: string;
    /**
     * A static globally unique ID for the Entity. Note that this value cannot be used in place of **`id`** in API calls to retrieve or edit Entity information.
     * @type {string}
     * @memberof InlineResponse200ResponseMeta
     */
    uid?: string;
}

export function InlineResponse200ResponseMetaFromJSON(json: any): InlineResponse200ResponseMeta {
    return InlineResponse200ResponseMetaFromJSONTyped(json, false);
}

export function InlineResponse200ResponseMetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): InlineResponse200ResponseMeta {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'entityType': !exists(json, 'entityType') ? undefined : json['entityType'],
        'folderId': !exists(json, 'folderId') ? undefined : json['folderId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'language': !exists(json, 'language') ? undefined : json['language'],
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
        'uid': !exists(json, 'uid') ? undefined : json['uid'],
    };
}

export function InlineResponse200ResponseMetaToJSON(value?: InlineResponse200ResponseMeta | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountId': value.accountId,
        'countryCode': value.countryCode,
        'entityType': value.entityType,
        'folderId': value.folderId,
        'id': value.id,
        'labels': value.labels,
        'language': value.language,
        'timestamp': value.timestamp,
        'uid': value.uid,
    };
}


