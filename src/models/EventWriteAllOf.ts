/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AtmWriteAllOfAddress,
    AtmWriteAllOfAddressFromJSON,
    AtmWriteAllOfAddressFromJSONTyped,
    AtmWriteAllOfAddressToJSON,
    AtmWriteAllOfDisplayCoordinate,
    AtmWriteAllOfDisplayCoordinateFromJSON,
    AtmWriteAllOfDisplayCoordinateFromJSONTyped,
    AtmWriteAllOfDisplayCoordinateToJSON,
    AtmWriteAllOfDropoffCoordinate,
    AtmWriteAllOfDropoffCoordinateFromJSON,
    AtmWriteAllOfDropoffCoordinateFromJSONTyped,
    AtmWriteAllOfDropoffCoordinateToJSON,
    AtmWriteAllOfMeta,
    AtmWriteAllOfMetaFromJSON,
    AtmWriteAllOfMetaFromJSONTyped,
    AtmWriteAllOfMetaToJSON,
    AtmWriteAllOfPickupCoordinate,
    AtmWriteAllOfPickupCoordinateFromJSON,
    AtmWriteAllOfPickupCoordinateFromJSONTyped,
    AtmWriteAllOfPickupCoordinateToJSON,
    AtmWriteAllOfRoutableCoordinate,
    AtmWriteAllOfRoutableCoordinateFromJSON,
    AtmWriteAllOfRoutableCoordinateFromJSONTyped,
    AtmWriteAllOfRoutableCoordinateToJSON,
    AtmWriteAllOfWalkableCoordinate,
    AtmWriteAllOfWalkableCoordinateFromJSON,
    AtmWriteAllOfWalkableCoordinateFromJSONTyped,
    AtmWriteAllOfWalkableCoordinateToJSON,
    AtmWriteAllOfWebsiteUrl,
    AtmWriteAllOfWebsiteUrlFromJSON,
    AtmWriteAllOfWebsiteUrlFromJSONTyped,
    AtmWriteAllOfWebsiteUrlToJSON,
    EventWriteAllOfAgeRange,
    EventWriteAllOfAgeRangeFromJSON,
    EventWriteAllOfAgeRangeFromJSONTyped,
    EventWriteAllOfAgeRangeToJSON,
    EventWriteAllOfAttendance,
    EventWriteAllOfAttendanceFromJSON,
    EventWriteAllOfAttendanceFromJSONTyped,
    EventWriteAllOfAttendanceToJSON,
    EventWriteAllOfPhotoGallery,
    EventWriteAllOfPhotoGalleryFromJSON,
    EventWriteAllOfPhotoGalleryFromJSONTyped,
    EventWriteAllOfPhotoGalleryToJSON,
    EventWriteAllOfTicketPriceRange,
    EventWriteAllOfTicketPriceRangeFromJSON,
    EventWriteAllOfTicketPriceRangeFromJSONTyped,
    EventWriteAllOfTicketPriceRangeToJSON,
    EventWriteAllOfTime,
    EventWriteAllOfTimeFromJSON,
    EventWriteAllOfTimeFromJSONTyped,
    EventWriteAllOfTimeToJSON,
} from './';

/**
 * 
 * @export
 * @interface EventWriteAllOf
 */
export interface EventWriteAllOf {
    /**
     * 
     * @type {AtmWriteAllOfMeta}
     * @memberof EventWriteAllOf
     */
    meta?: AtmWriteAllOfMeta;
    /**
     * 
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * * a phone number
     * @type {string}
     * @memberof EventWriteAllOf
     */
    name?: string;
    /**
     * 
     * @type {AtmWriteAllOfAddress}
     * @memberof EventWriteAllOf
     */
    address?: AtmWriteAllOfAddress;
    /**
     * If other locations are promoting this event, a list of those locations' **`id`**s in the Yext Knowledge Manager
     * 
     * 
     * Array must be ordered.
     * @type {Set<string>}
     * @memberof EventWriteAllOf
     */
    additionalPromotingLocations?: Set<string>;
    /**
     * 
     * @type {EventWriteAllOfAgeRange}
     * @memberof EventWriteAllOf
     */
    ageRange?: EventWriteAllOfAgeRange;
    /**
     * 
     * @type {EventWriteAllOfAttendance}
     * @memberof EventWriteAllOf
     */
    attendance?: EventWriteAllOfAttendance;
    /**
     * Yext Category IDs.
     * 
     * IDs must be valid and selectable (i.e., cannot be parent categories).
     * 
     * NOTE: The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings.
     * @type {Array<string>}
     * @memberof EventWriteAllOf
     */
    categoryIds?: Array<string>;
    /**
     * A description of the entity
     * 
     * 
     * Cannot Include:
     * * HTML markup
     * @type {string}
     * @memberof EventWriteAllOf
     */
    description?: string;
    /**
     * 
     * @type {AtmWriteAllOfDisplayCoordinate}
     * @memberof EventWriteAllOf
     */
    displayCoordinate?: AtmWriteAllOfDisplayCoordinate;
    /**
     * 
     * @type {AtmWriteAllOfDropoffCoordinate}
     * @memberof EventWriteAllOf
     */
    dropoffCoordinate?: AtmWriteAllOfDropoffCoordinate;
    /**
     * Information on whether the event will take place as scheduled
     * @type {string}
     * @memberof EventWriteAllOf
     */
    eventStatus?: EventWriteAllOfEventStatusEnum;
    /**
     * The unique IDs of the entity's Google My Business keywords, as well as the unique IDs of any values selected for each keyword.
     * 
     * Valid keywords (e.g., `has_drive_through`, `has_fitting_room`, `kitchen_in_room`) are determined by the entity's primary category. A full list of keywords can be retrieved with the Google Fields: List endpoint.
     * 
     * Keyword values provide more details on how the keyword applies to the entity (e.g., if the keyword is `has_drive_through`, its values may be `true` or `false`).
     * 
     * * If the **`v`** parameter is before `20181204`: **`googleAttributes`** is formatted as a map of key-value pairs (e.g., `[{ "id": "has_wheelchair_accessible_entrance", "values": [ "true" ] }]`)
     * * If the **`v`** parameter is on or after `20181204`: the contents are formatted as a list of objects (e.g., `{ "has_wheelchair_accessible_entrance": [ "true" ]}`)
     * 
     * **NOTE:** The latest Google Attributes are available via the Google Fields: List endpoint. Google Attributes are managed by Google and are subject to change without notice. To prevent errors, make sure your API implementation is not dependent on the presence of specific attributes.
     * @type {object}
     * @memberof EventWriteAllOf
     */
    googleAttributes?: object;
    /**
     * Indicates whether or not the event is free
     * @type {boolean}
     * @memberof EventWriteAllOf
     */
    isFreeEvent?: boolean;
    /**
     * Keywords that describe the entity.
     * 
     * All strings must be non-empty when trimmed of whitespace.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Cannot Include:
     * >* HTML markup
     * @type {Set<string>}
     * @memberof EventWriteAllOf
     */
    keywords?: Set<string>;
    /**
     * The IDs of the entity labels that have been added to this entity. Entity labels help you identify entities that share a certain characteristic; they do not appear on your entity's listings.
     * 
     * **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.
     * @type {Array<string>}
     * @memberof EventWriteAllOf
     */
    labels?: Array<string>;
    /**
     * The URL of this entity's Landing Page that was created with Yext Pages
     * @type {string}
     * @memberof EventWriteAllOf
     */
    landingPageUrl?: string;
    /**
     * location ID of the event location, if the event is held at a location managed in the Yext Knowledge Manager
     * @type {string}
     * @memberof EventWriteAllOf
     */
    linkedLocation?: string;
    /**
     * Point of contact for the event organizer (not to be published publicly)
     * @type {string}
     * @memberof EventWriteAllOf
     */
    organizerEmail?: string;
    /**
     * Point of contact for the event organizer (not to be published publicly)
     * @type {string}
     * @memberof EventWriteAllOf
     */
    organizerName?: string;
    /**
     * Point of contact for the event organizer (not to be published publicly)
     * @type {string}
     * @memberof EventWriteAllOf
     */
    organizerPhone?: string;
    /**
     * Performers at the event
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * @type {Set<string>}
     * @memberof EventWriteAllOf
     */
    performers?: Set<string>;
    /**
     * 
     * **NOTE:** The list of photos that you send us must be comprehensive. For example, if you send us a list of photos that does not include photos that you sent in your last update, Yext considers the missing photos to be deleted, and we remove them from your listings.
     * 
     * 
     * 
     * Array must be ordered.
     * 
     * Array may have a maximum of 100 elements.
     * 
     * Array item description:
     * 
     * >Supported Aspect Ratios:
     * >* 1 x 1
     * >* 4 x 3
     * >* 3 x 2
     * >* 5 x 3
     * >* 16 x 9
     * >* 3 x 1
     * >* 2 x 3
     * >* 5 x 7
     * >* 4 x 5
     * >* 4 x 1
     * >
     * >**NOTE**: Maximum image size is 5mb after normalization and padding (if applicable). As well, there is a 6 second download limit from the image host.
     * >
     * @type {Array<EventWriteAllOfPhotoGallery>}
     * @memberof EventWriteAllOf
     */
    photoGallery?: Array<EventWriteAllOfPhotoGallery>;
    /**
     * 
     * @type {AtmWriteAllOfPickupCoordinate}
     * @memberof EventWriteAllOf
     */
    pickupCoordinate?: AtmWriteAllOfPickupCoordinate;
    /**
     * 
     * @type {AtmWriteAllOfRoutableCoordinate}
     * @memberof EventWriteAllOf
     */
    routableCoordinate?: AtmWriteAllOfRoutableCoordinate;
    /**
     * Information about the availability of tickets for the event
     * @type {string}
     * @memberof EventWriteAllOf
     */
    ticketAvailability?: EventWriteAllOfTicketAvailabilityEnum;
    /**
     * 
     * @type {EventWriteAllOfTicketPriceRange}
     * @memberof EventWriteAllOf
     */
    ticketPriceRange?: EventWriteAllOfTicketPriceRange;
    /**
     * The date/time tickets are available for sale (local time)
     * @type {Date}
     * @memberof EventWriteAllOf
     */
    ticketSaleDateTime?: Date;
    /**
     * URL to purchase tickets for the event (if ticketed)
     * @type {string}
     * @memberof EventWriteAllOf
     */
    ticketUrl?: string;
    /**
     * 
     * @type {EventWriteAllOfTime}
     * @memberof EventWriteAllOf
     */
    time?: EventWriteAllOfTime;
    /**
     * The timezone of the entity, in the standard `IANA time zone database` format (tz database). e.g. `"America/New_York"`
     * @type {string}
     * @memberof EventWriteAllOf
     */
    timezone?: string;
    /**
     * Name of the venue where the event is being held
     * @type {string}
     * @memberof EventWriteAllOf
     */
    venueName?: string;
    /**
     * 
     * @type {AtmWriteAllOfWalkableCoordinate}
     * @memberof EventWriteAllOf
     */
    walkableCoordinate?: AtmWriteAllOfWalkableCoordinate;
    /**
     * 
     * @type {AtmWriteAllOfWebsiteUrl}
     * @memberof EventWriteAllOf
     */
    websiteUrl?: AtmWriteAllOfWebsiteUrl;
}

/**
* @export
* @enum {string}
*/
export enum EventWriteAllOfEventStatusEnum {
    Scheduled = 'SCHEDULED',
    Rescheduled = 'RESCHEDULED',
    Postponed = 'POSTPONED',
    Canceled = 'CANCELED',
    EventMovedOnline = 'EVENT_MOVED_ONLINE'
}/**
* @export
* @enum {string}
*/
export enum EventWriteAllOfTicketAvailabilityEnum {
    InStock = 'IN_STOCK',
    SoldOut = 'SOLD_OUT',
    PreOrder = 'PRE_ORDER',
    Unspecified = 'UNSPECIFIED'
}

export function EventWriteAllOfFromJSON(json: any): EventWriteAllOf {
    return EventWriteAllOfFromJSONTyped(json, false);
}

export function EventWriteAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventWriteAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'meta': !exists(json, 'meta') ? undefined : AtmWriteAllOfMetaFromJSON(json['meta']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'address': !exists(json, 'address') ? undefined : AtmWriteAllOfAddressFromJSON(json['address']),
        'additionalPromotingLocations': !exists(json, 'additionalPromotingLocations') ? undefined : json['additionalPromotingLocations'],
        'ageRange': !exists(json, 'ageRange') ? undefined : EventWriteAllOfAgeRangeFromJSON(json['ageRange']),
        'attendance': !exists(json, 'attendance') ? undefined : EventWriteAllOfAttendanceFromJSON(json['attendance']),
        'categoryIds': !exists(json, 'categoryIds') ? undefined : json['categoryIds'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayCoordinate': !exists(json, 'displayCoordinate') ? undefined : AtmWriteAllOfDisplayCoordinateFromJSON(json['displayCoordinate']),
        'dropoffCoordinate': !exists(json, 'dropoffCoordinate') ? undefined : AtmWriteAllOfDropoffCoordinateFromJSON(json['dropoffCoordinate']),
        'eventStatus': !exists(json, 'eventStatus') ? undefined : json['eventStatus'],
        'googleAttributes': !exists(json, 'googleAttributes') ? undefined : json['googleAttributes'],
        'isFreeEvent': !exists(json, 'isFreeEvent') ? undefined : json['isFreeEvent'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'landingPageUrl': !exists(json, 'landingPageUrl') ? undefined : json['landingPageUrl'],
        'linkedLocation': !exists(json, 'linkedLocation') ? undefined : json['linkedLocation'],
        'organizerEmail': !exists(json, 'organizerEmail') ? undefined : json['organizerEmail'],
        'organizerName': !exists(json, 'organizerName') ? undefined : json['organizerName'],
        'organizerPhone': !exists(json, 'organizerPhone') ? undefined : json['organizerPhone'],
        'performers': !exists(json, 'performers') ? undefined : json['performers'],
        'photoGallery': !exists(json, 'photoGallery') ? undefined : ((json['photoGallery'] as Array<any>).map(EventWriteAllOfPhotoGalleryFromJSON)),
        'pickupCoordinate': !exists(json, 'pickupCoordinate') ? undefined : AtmWriteAllOfPickupCoordinateFromJSON(json['pickupCoordinate']),
        'routableCoordinate': !exists(json, 'routableCoordinate') ? undefined : AtmWriteAllOfRoutableCoordinateFromJSON(json['routableCoordinate']),
        'ticketAvailability': !exists(json, 'ticketAvailability') ? undefined : json['ticketAvailability'],
        'ticketPriceRange': !exists(json, 'ticketPriceRange') ? undefined : EventWriteAllOfTicketPriceRangeFromJSON(json['ticketPriceRange']),
        'ticketSaleDateTime': !exists(json, 'ticketSaleDateTime') ? undefined : (new Date(json['ticketSaleDateTime'])),
        'ticketUrl': !exists(json, 'ticketUrl') ? undefined : json['ticketUrl'],
        'time': !exists(json, 'time') ? undefined : EventWriteAllOfTimeFromJSON(json['time']),
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
        'venueName': !exists(json, 'venueName') ? undefined : json['venueName'],
        'walkableCoordinate': !exists(json, 'walkableCoordinate') ? undefined : AtmWriteAllOfWalkableCoordinateFromJSON(json['walkableCoordinate']),
        'websiteUrl': !exists(json, 'websiteUrl') ? undefined : AtmWriteAllOfWebsiteUrlFromJSON(json['websiteUrl']),
    };
}

export function EventWriteAllOfToJSON(value?: EventWriteAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'meta': AtmWriteAllOfMetaToJSON(value.meta),
        'name': value.name,
        'address': AtmWriteAllOfAddressToJSON(value.address),
        'additionalPromotingLocations': value.additionalPromotingLocations,
        'ageRange': EventWriteAllOfAgeRangeToJSON(value.ageRange),
        'attendance': EventWriteAllOfAttendanceToJSON(value.attendance),
        'categoryIds': value.categoryIds,
        'description': value.description,
        'displayCoordinate': AtmWriteAllOfDisplayCoordinateToJSON(value.displayCoordinate),
        'dropoffCoordinate': AtmWriteAllOfDropoffCoordinateToJSON(value.dropoffCoordinate),
        'eventStatus': value.eventStatus,
        'googleAttributes': value.googleAttributes,
        'isFreeEvent': value.isFreeEvent,
        'keywords': value.keywords,
        'labels': value.labels,
        'landingPageUrl': value.landingPageUrl,
        'linkedLocation': value.linkedLocation,
        'organizerEmail': value.organizerEmail,
        'organizerName': value.organizerName,
        'organizerPhone': value.organizerPhone,
        'performers': value.performers,
        'photoGallery': value.photoGallery === undefined ? undefined : ((value.photoGallery as Array<any>).map(EventWriteAllOfPhotoGalleryToJSON)),
        'pickupCoordinate': AtmWriteAllOfPickupCoordinateToJSON(value.pickupCoordinate),
        'routableCoordinate': AtmWriteAllOfRoutableCoordinateToJSON(value.routableCoordinate),
        'ticketAvailability': value.ticketAvailability,
        'ticketPriceRange': EventWriteAllOfTicketPriceRangeToJSON(value.ticketPriceRange),
        'ticketSaleDateTime': value.ticketSaleDateTime === undefined ? undefined : (value.ticketSaleDateTime.toISOString()),
        'ticketUrl': value.ticketUrl,
        'time': EventWriteAllOfTimeToJSON(value.time),
        'timezone': value.timezone,
        'venueName': value.venueName,
        'walkableCoordinate': AtmWriteAllOfWalkableCoordinateToJSON(value.walkableCoordinate),
        'websiteUrl': AtmWriteAllOfWebsiteUrlToJSON(value.websiteUrl),
    };
}


