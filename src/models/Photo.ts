/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PhotoDerivatives,
    PhotoDerivativesFromJSON,
    PhotoDerivativesFromJSONTyped,
    PhotoDerivativesToJSON,
} from './';

/**
 * 
 * @export
 * @interface Photo
 */
export interface Photo {
    /**
     * Valid URL to image. Accepted formats: .jpg, .gif, .png.
     * 
     * While updating this field, if the image could not be downloaded, or if its URL is invalid, the image will be ignored. The success response will contain a warning message explaining why the image was not stored in the system.
     * @type {string}
     * @memberof Photo
     */
    url?: string;
    /**
     * The URL the image was uploaded from, if applicable. Note that this URL may not currently be valid.
     * @type {string}
     * @memberof Photo
     */
    readonly sourceUrl?: string;
    /**
     * Image description.
     * @type {string}
     * @memberof Photo
     */
    description?: string;
    /**
     * Image details.
     * @type {string}
     * @memberof Photo
     */
    details?: string;
    /**
     * The alternate text to be used for accessibility purposes.
     * @type {string}
     * @memberof Photo
     */
    alternateText?: string;
    /**
     * Original photo width.
     * @type {number}
     * @memberof Photo
     */
    readonly width?: number;
    /**
     * Original photo height.
     * @type {number}
     * @memberof Photo
     */
    readonly height?: number;
    /**
     * 
     * @type {Array<PhotoDerivatives>}
     * @memberof Photo
     */
    readonly derivatives?: Array<PhotoDerivatives>;
}

export function PhotoFromJSON(json: any): Photo {
    return PhotoFromJSONTyped(json, false);
}

export function PhotoFromJSONTyped(json: any, ignoreDiscriminator: boolean): Photo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'url': !exists(json, 'url') ? undefined : json['url'],
        'sourceUrl': !exists(json, 'sourceUrl') ? undefined : json['sourceUrl'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'alternateText': !exists(json, 'alternateText') ? undefined : json['alternateText'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'derivatives': !exists(json, 'derivatives') ? undefined : ((json['derivatives'] as Array<any>).map(PhotoDerivativesFromJSON)),
    };
}

export function PhotoToJSON(value?: Photo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'url': value.url,
        'description': value.description,
        'details': value.details,
        'alternateText': value.alternateText,
    };
}


