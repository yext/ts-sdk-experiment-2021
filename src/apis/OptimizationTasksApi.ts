/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OptimizationTaskLinksResponse,
    OptimizationTaskLinksResponseFromJSON,
    OptimizationTaskLinksResponseToJSON,
    OptimizationTasksResponse,
    OptimizationTasksResponseFromJSON,
    OptimizationTasksResponseToJSON,
} from '../models';

export interface GetLinkOptimizationTaskRequest {
    accountId: string;
    v: string;
    taskIds?: string;
    locationId?: string;
    mode?: GetLinkOptimizationTaskModeEnum;
}

export interface GetOptimizationTasksRequest {
    accountId: string;
    v: string;
    taskIds?: string;
    locationIds?: string;
}

/**
 * 
 */
export class OptimizationTasksApi extends runtime.BaseAPI {

    /**
     * Retrieve a link to perform any pending Optimization Tasks given a set of Optimization Tasks and a location
     * Optimization Tasks: Get Link
     */
    async getLinkOptimizationTaskRaw(requestParameters: GetLinkOptimizationTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptimizationTaskLinksResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getLinkOptimizationTask.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling getLinkOptimizationTask.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        if (requestParameters.taskIds !== undefined) {
            queryParameters['taskIds'] = requestParameters.taskIds;
        }

        if (requestParameters.locationId !== undefined) {
            queryParameters['locationId'] = requestParameters.locationId;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/optimizationlink`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimizationTaskLinksResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a link to perform any pending Optimization Tasks given a set of Optimization Tasks and a location
     * Optimization Tasks: Get Link
     */
    async getLinkOptimizationTask(requestParameters: GetLinkOptimizationTaskRequest, initOverrides?: RequestInit): Promise<OptimizationTaskLinksResponse> {
        const response = await this.getLinkOptimizationTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Optimization Tasks for the account, optionally filtered by task and location.
     * Optimization Tasks: List
     */
    async getOptimizationTasksRaw(requestParameters: GetOptimizationTasksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptimizationTasksResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getOptimizationTasks.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling getOptimizationTasks.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        if (requestParameters.taskIds !== undefined) {
            queryParameters['taskIds'] = requestParameters.taskIds;
        }

        if (requestParameters.locationIds !== undefined) {
            queryParameters['locationIds'] = requestParameters.locationIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/optimizationtasks`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimizationTasksResponseFromJSON(jsonValue));
    }

    /**
     * List Optimization Tasks for the account, optionally filtered by task and location.
     * Optimization Tasks: List
     */
    async getOptimizationTasks(requestParameters: GetOptimizationTasksRequest, initOverrides?: RequestInit): Promise<OptimizationTasksResponse> {
        const response = await this.getOptimizationTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetLinkOptimizationTaskModeEnum {
    PendingOnly = 'PENDING_ONLY',
    AllTasks = 'ALL_TASKS',
    Reset = 'RESET'
}
