/* tslint:disable */
/* eslint-disable */
/**
 * Yext API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateReview,
    CreateReviewFromJSON,
    CreateReviewToJSON,
    CreateReviewCommentResponse,
    CreateReviewCommentResponseFromJSON,
    CreateReviewCommentResponseToJSON,
    CreateReviewInvitationRequest,
    CreateReviewInvitationRequestFromJSON,
    CreateReviewInvitationRequestToJSON,
    CreateReviewInvitationsResponse,
    CreateReviewInvitationsResponseFromJSON,
    CreateReviewInvitationsResponseToJSON,
    EmptyResponse,
    EmptyResponseFromJSON,
    EmptyResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    IdResponse,
    IdResponseFromJSON,
    IdResponseToJSON,
    ReviewComment,
    ReviewCommentFromJSON,
    ReviewCommentToJSON,
    ReviewCommentUpdate,
    ReviewCommentUpdateFromJSON,
    ReviewCommentUpdateToJSON,
    ReviewGenerationSettings,
    ReviewGenerationSettingsFromJSON,
    ReviewGenerationSettingsToJSON,
    ReviewGenerationSettingsResponse,
    ReviewGenerationSettingsResponseFromJSON,
    ReviewGenerationSettingsResponseToJSON,
    ReviewInvitationResponse,
    ReviewInvitationResponseFromJSON,
    ReviewInvitationResponseToJSON,
    ReviewInvitationsResponse,
    ReviewInvitationsResponseFromJSON,
    ReviewInvitationsResponseToJSON,
    ReviewResponse,
    ReviewResponseFromJSON,
    ReviewResponseToJSON,
    ReviewsResponse,
    ReviewsResponseFromJSON,
    ReviewsResponseToJSON,
    UpdateReview,
    UpdateReviewFromJSON,
    UpdateReviewToJSON,
    UpdateReviewGenerationSettingsResponse,
    UpdateReviewGenerationSettingsResponseFromJSON,
    UpdateReviewGenerationSettingsResponseToJSON,
    UpdateReviewInvitationRequest,
    UpdateReviewInvitationRequestFromJSON,
    UpdateReviewInvitationRequestToJSON,
    UpdateReviewInvitationResponse,
    UpdateReviewInvitationResponseFromJSON,
    UpdateReviewInvitationResponseToJSON,
    UpdateReviewLabelsRequest,
    UpdateReviewLabelsRequestFromJSON,
    UpdateReviewLabelsRequestToJSON,
    UpdateReviewLabelsResponse,
    UpdateReviewLabelsResponseFromJSON,
    UpdateReviewLabelsResponseToJSON,
} from '../models';

export interface CreateCommentRequest {
    accountId: string;
    reviewId: number;
    v: string;
    reviewComment: ReviewComment;
}

export interface CreateReviewRequest {
    accountId: string;
    v: string;
    createReview: CreateReview;
}

export interface CreateReviewInvitesRequest {
    accountId: string;
    v: string;
    createReviewInvitationRequest: Array<CreateReviewInvitationRequest>;
}

export interface DeleteCommentRequest {
    accountId: string;
    reviewId: number;
    commentId: string;
    v: string;
}

export interface DeleteInvitationRequest {
    accountId: string;
    invitationUid: string;
    v: string;
}

export interface GetReviewRequest {
    accountId: string;
    reviewId: number;
    v: string;
}

export interface GetReviewGenerationSettingsRequest {
    accountId: string;
    v: string;
}

export interface GetReviewInvitationRequest {
    accountId: string;
    invitationUid: string;
    v: string;
}

export interface ListReviewInvitationsRequest {
    accountId: string;
    v: string;
    limit?: number;
    offset?: number;
    locationIds?: Array<string>;
    folderIds?: Array<string>;
    locationLabels?: Array<string>;
    templateIds?: Array<string>;
    status?: ListReviewInvitationsStatusEnum;
    type?: ListReviewInvitationsTypeEnum;
}

export interface ListReviewsRequest {
    accountId: string;
    v: string;
    limit?: number;
    offset?: number;
    locationIds?: Array<string>;
    reviewExternalId?: string;
    folderId?: string;
    countries?: Array<string>;
    locationLabels?: Array<string>;
    publisherIds?: Array<string>;
    reviewContent?: string;
    minRating?: number;
    maxRating?: number;
    minPublisherDate?: Date;
    maxPublisherDate?: Date;
    minLastYextUpdateDate?: Date;
    maxLastYextUpdateDate?: Date;
    awaitingResponse?: ListReviewsAwaitingResponseEnum;
    minNonOwnerComments?: number;
    reviewerName?: string;
    status?: ListReviewsStatusEnum;
    pageToken?: string;
    reviewLanguage?: string;
    labelIds?: Array<string>;
    reviewType?: ListReviewsReviewTypeEnum;
    recommendation?: ListReviewsRecommendationEnum;
    flagStatus?: ListReviewsFlagStatusEnum;
}

export interface UpdateCommentRequest {
    accountId: string;
    reviewId: number;
    commentId: string;
    v: string;
    reviewCommentUpdate: ReviewCommentUpdate;
}

export interface UpdateReviewRequest {
    accountId: string;
    reviewId: number;
    v: string;
    updateReview: UpdateReview;
}

export interface UpdateReviewGenerationSettingsRequest {
    accountId: string;
    v: string;
    reviewGenerationSettings: ReviewGenerationSettings;
}

export interface UpdateReviewInvitationOperationRequest {
    accountId: string;
    invitationUid: string;
    v: string;
    updateReviewInvitationRequest: UpdateReviewInvitationRequest;
}

export interface UpdateReviewLabelsOperationRequest {
    accountId: string;
    reviewId: number;
    v: string;
    updateReviewLabelsRequest?: UpdateReviewLabelsRequest;
}

/**
 * 
 */
export class ReviewsApi extends runtime.BaseAPI {

    /**
     * Creates a new Comment on a Review. <br><br>  ## Required fields * **`content`** <br><br>  ## Optional fields * **`parentId`** * **`visibility`** <br><br> 
     * Comment: Create
     */
    async createCommentRaw(requestParameters: CreateCommentRequest): Promise<runtime.ApiResponse<CreateReviewCommentResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createComment.');
        }

        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling createComment.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling createComment.');
        }

        if (requestParameters.reviewComment === null || requestParameters.reviewComment === undefined) {
            throw new runtime.RequiredError('reviewComment','Required parameter requestParameters.reviewComment was null or undefined when calling createComment.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews/{reviewId}/comments`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewCommentToJSON(requestParameters.reviewComment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateReviewCommentResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new Comment on a Review. <br><br>  ## Required fields * **`content`** <br><br>  ## Optional fields * **`parentId`** * **`visibility`** <br><br> 
     * Comment: Create
     */
    async createComment(requestParameters: CreateCommentRequest): Promise<CreateReviewCommentResponse> {
        const response = await this.createCommentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new External First Party Review. 
     * Reviews: Create
     */
    async createReviewRaw(requestParameters: CreateReviewRequest): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createReview.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling createReview.');
        }

        if (requestParameters.createReview === null || requestParameters.createReview === undefined) {
            throw new runtime.RequiredError('createReview','Required parameter requestParameters.createReview was null or undefined when calling createReview.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReviewToJSON(requestParameters.createReview),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Create a new External First Party Review. 
     * Reviews: Create
     */
    async createReview(requestParameters: CreateReviewRequest): Promise<IdResponse> {
        const response = await this.createReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sends review invitations to one or more consumers. <br><br>  ## Optional fields * **`templateId`** * **`transactionId`** <br><br> 
     * Review Invitations: Create
     */
    async createReviewInvitesRaw(requestParameters: CreateReviewInvitesRequest): Promise<runtime.ApiResponse<CreateReviewInvitationsResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createReviewInvites.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling createReviewInvites.');
        }

        if (requestParameters.createReviewInvitationRequest === null || requestParameters.createReviewInvitationRequest === undefined) {
            throw new runtime.RequiredError('createReviewInvitationRequest','Required parameter requestParameters.createReviewInvitationRequest was null or undefined when calling createReviewInvites.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviewinvites`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createReviewInvitationRequest.map(CreateReviewInvitationRequestToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateReviewInvitationsResponseFromJSON(jsonValue));
    }

    /**
     * Sends review invitations to one or more consumers. <br><br>  ## Optional fields * **`templateId`** * **`transactionId`** <br><br> 
     * Review Invitations: Create
     */
    async createReviewInvites(requestParameters: CreateReviewInvitesRequest): Promise<CreateReviewInvitationsResponse> {
        const response = await this.createReviewInvitesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a Comment on a Review. <br><br> 
     * Comment: Delete
     */
    async deleteCommentRaw(requestParameters: DeleteCommentRequest): Promise<runtime.ApiResponse<EmptyResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteComment.');
        }

        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling deleteComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteComment.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling deleteComment.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews/{reviewId}/comments/{commentId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a Comment on a Review. <br><br> 
     * Comment: Delete
     */
    async deleteComment(requestParameters: DeleteCommentRequest): Promise<EmptyResponse> {
        const response = await this.deleteCommentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a specific review invitation.
     * Review Invitation: Delete
     */
    async deleteInvitationRaw(requestParameters: DeleteInvitationRequest): Promise<runtime.ApiResponse<EmptyResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteInvitation.');
        }

        if (requestParameters.invitationUid === null || requestParameters.invitationUid === undefined) {
            throw new runtime.RequiredError('invitationUid','Required parameter requestParameters.invitationUid was null or undefined when calling deleteInvitation.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling deleteInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviewinvites/{invitationUid}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"invitationUid"}}`, encodeURIComponent(String(requestParameters.invitationUid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyResponseFromJSON(jsonValue));
    }

    /**
     * Delete a specific review invitation.
     * Review Invitation: Delete
     */
    async deleteInvitation(requestParameters: DeleteInvitationRequest): Promise<EmptyResponse> {
        const response = await this.deleteInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a specific Review.
     * Review: Get
     */
    async getReviewRaw(requestParameters: GetReviewRequest): Promise<runtime.ApiResponse<ReviewResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getReview.');
        }

        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling getReview.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling getReview.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews/{reviewId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific Review.
     * Review: Get
     */
    async getReview(requestParameters: GetReviewRequest): Promise<ReviewResponse> {
        const response = await this.getReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all current generation settings for a specified account.
     * Review Generation Settings: Get
     */
    async getReviewGenerationSettingsRaw(requestParameters: GetReviewGenerationSettingsRequest): Promise<runtime.ApiResponse<ReviewGenerationSettingsResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getReviewGenerationSettings.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling getReviewGenerationSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews/settings/generation`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewGenerationSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Returns all current generation settings for a specified account.
     * Review Generation Settings: Get
     */
    async getReviewGenerationSettings(requestParameters: GetReviewGenerationSettingsRequest): Promise<ReviewGenerationSettingsResponse> {
        const response = await this.getReviewGenerationSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a specific review invitation.
     * Review Invitation: Get
     */
    async getReviewInvitationRaw(requestParameters: GetReviewInvitationRequest): Promise<runtime.ApiResponse<ReviewInvitationResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getReviewInvitation.');
        }

        if (requestParameters.invitationUid === null || requestParameters.invitationUid === undefined) {
            throw new runtime.RequiredError('invitationUid','Required parameter requestParameters.invitationUid was null or undefined when calling getReviewInvitation.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling getReviewInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviewinvites/{invitationUid}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"invitationUid"}}`, encodeURIComponent(String(requestParameters.invitationUid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewInvitationResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific review invitation.
     * Review Invitation: Get
     */
    async getReviewInvitation(requestParameters: GetReviewInvitationRequest): Promise<ReviewInvitationResponse> {
        const response = await this.getReviewInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves all review invitations for an account
     * Review Invitations: List
     */
    async listReviewInvitationsRaw(requestParameters: ListReviewInvitationsRequest): Promise<runtime.ApiResponse<ReviewInvitationsResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling listReviewInvitations.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling listReviewInvitations.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.locationIds) {
            queryParameters['locationIds'] = requestParameters.locationIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.folderIds) {
            queryParameters['folderIds'] = requestParameters.folderIds;
        }

        if (requestParameters.locationLabels) {
            queryParameters['locationLabels'] = requestParameters.locationLabels;
        }

        if (requestParameters.templateIds) {
            queryParameters['templateIds'] = requestParameters.templateIds;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviewinvites`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewInvitationsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves all review invitations for an account
     * Review Invitations: List
     */
    async listReviewInvitations(requestParameters: ListReviewInvitationsRequest): Promise<ReviewInvitationsResponse> {
        const response = await this.listReviewInvitationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all Reviews matching the given criteria.  **NOTE:** Not all publishers\' reviews will be included in the response. For more details, please contact your Account Manager. 
     * Reviews: List
     */
    async listReviewsRaw(requestParameters: ListReviewsRequest): Promise<runtime.ApiResponse<ReviewsResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling listReviews.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling listReviews.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.locationIds) {
            queryParameters['locationIds'] = requestParameters.locationIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.reviewExternalId !== undefined) {
            queryParameters['reviewExternalId'] = requestParameters.reviewExternalId;
        }

        if (requestParameters.folderId !== undefined) {
            queryParameters['folderId'] = requestParameters.folderId;
        }

        if (requestParameters.countries) {
            queryParameters['countries'] = requestParameters.countries;
        }

        if (requestParameters.locationLabels) {
            queryParameters['locationLabels'] = requestParameters.locationLabels;
        }

        if (requestParameters.publisherIds) {
            queryParameters['publisherIds'] = requestParameters.publisherIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.reviewContent !== undefined) {
            queryParameters['reviewContent'] = requestParameters.reviewContent;
        }

        if (requestParameters.minRating !== undefined) {
            queryParameters['minRating'] = requestParameters.minRating;
        }

        if (requestParameters.maxRating !== undefined) {
            queryParameters['maxRating'] = requestParameters.maxRating;
        }

        if (requestParameters.minPublisherDate !== undefined) {
            queryParameters['minPublisherDate'] = (requestParameters.minPublisherDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.maxPublisherDate !== undefined) {
            queryParameters['maxPublisherDate'] = (requestParameters.maxPublisherDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.minLastYextUpdateDate !== undefined) {
            queryParameters['minLastYextUpdateDate'] = (requestParameters.minLastYextUpdateDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.maxLastYextUpdateDate !== undefined) {
            queryParameters['maxLastYextUpdateDate'] = (requestParameters.maxLastYextUpdateDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.awaitingResponse !== undefined) {
            queryParameters['awaitingResponse'] = requestParameters.awaitingResponse;
        }

        if (requestParameters.minNonOwnerComments !== undefined) {
            queryParameters['minNonOwnerComments'] = requestParameters.minNonOwnerComments;
        }

        if (requestParameters.reviewerName !== undefined) {
            queryParameters['reviewerName'] = requestParameters.reviewerName;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.pageToken !== undefined) {
            queryParameters['pageToken'] = requestParameters.pageToken;
        }

        if (requestParameters.reviewLanguage !== undefined) {
            queryParameters['reviewLanguage'] = requestParameters.reviewLanguage;
        }

        if (requestParameters.labelIds) {
            queryParameters['labelIds'] = requestParameters.labelIds;
        }

        if (requestParameters.reviewType !== undefined) {
            queryParameters['reviewType'] = requestParameters.reviewType;
        }

        if (requestParameters.recommendation !== undefined) {
            queryParameters['recommendation'] = requestParameters.recommendation;
        }

        if (requestParameters.flagStatus !== undefined) {
            queryParameters['flagStatus'] = requestParameters.flagStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all Reviews matching the given criteria.  **NOTE:** Not all publishers\' reviews will be included in the response. For more details, please contact your Account Manager. 
     * Reviews: List
     */
    async listReviews(requestParameters: ListReviewsRequest): Promise<ReviewsResponse> {
        const response = await this.listReviewsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a Comment on a Review. <br><br>  ## Optional fields * **`content`** * **`visibility`** <br><br> 
     * Comment: Update
     */
    async updateCommentRaw(requestParameters: UpdateCommentRequest): Promise<runtime.ApiResponse<EmptyResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateComment.');
        }

        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling updateComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling updateComment.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling updateComment.');
        }

        if (requestParameters.reviewCommentUpdate === null || requestParameters.reviewCommentUpdate === undefined) {
            throw new runtime.RequiredError('reviewCommentUpdate','Required parameter requestParameters.reviewCommentUpdate was null or undefined when calling updateComment.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews/{reviewId}/comments/{commentId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewCommentUpdateToJSON(requestParameters.reviewCommentUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyResponseFromJSON(jsonValue));
    }

    /**
     * Updates a Comment on a Review. <br><br>  ## Optional fields * **`content`** * **`visibility`** <br><br> 
     * Comment: Update
     */
    async updateComment(requestParameters: UpdateCommentRequest): Promise<EmptyResponse> {
        const response = await this.updateCommentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an External First Party Review or a First Party Review. <br><br> **NOTE:** Despite using the `PUT` method, Reviews: Update only updates supplied fields. Omitted fields are not modified. <br><br> 
     * Review: Update
     */
    async updateReviewRaw(requestParameters: UpdateReviewRequest): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateReview.');
        }

        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling updateReview.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling updateReview.');
        }

        if (requestParameters.updateReview === null || requestParameters.updateReview === undefined) {
            throw new runtime.RequiredError('updateReview','Required parameter requestParameters.updateReview was null or undefined when calling updateReview.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews/{reviewId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateReviewToJSON(requestParameters.updateReview),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Updates an External First Party Review or a First Party Review. <br><br> **NOTE:** Despite using the `PUT` method, Reviews: Update only updates supplied fields. Omitted fields are not modified. <br><br> 
     * Review: Update
     */
    async updateReview(requestParameters: UpdateReviewRequest): Promise<IdResponse> {
        const response = await this.updateReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates any generation settings specified in a specified account. Call may include any/all settings available to the account. Settings not included will remain unchanged. 
     * Review Generation Settings: Update
     */
    async updateReviewGenerationSettingsRaw(requestParameters: UpdateReviewGenerationSettingsRequest): Promise<runtime.ApiResponse<UpdateReviewGenerationSettingsResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateReviewGenerationSettings.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling updateReviewGenerationSettings.');
        }

        if (requestParameters.reviewGenerationSettings === null || requestParameters.reviewGenerationSettings === undefined) {
            throw new runtime.RequiredError('reviewGenerationSettings','Required parameter requestParameters.reviewGenerationSettings was null or undefined when calling updateReviewGenerationSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews/settings/generation`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewGenerationSettingsToJSON(requestParameters.reviewGenerationSettings),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateReviewGenerationSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Updates any generation settings specified in a specified account. Call may include any/all settings available to the account. Settings not included will remain unchanged. 
     * Review Generation Settings: Update
     */
    async updateReviewGenerationSettings(requestParameters: UpdateReviewGenerationSettingsRequest): Promise<UpdateReviewGenerationSettingsResponse> {
        const response = await this.updateReviewGenerationSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Supports updating an existing review invitation. This endpoint will not create a new review invitation or trigger a new SMS/Email to be sent, it will only update the data and/or metadata for an existing review invitation. Any optional parameters which are excluded from the request will simply be ignored. 
     * Review Invitation: Update
     */
    async updateReviewInvitationRaw(requestParameters: UpdateReviewInvitationOperationRequest): Promise<runtime.ApiResponse<UpdateReviewInvitationResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateReviewInvitation.');
        }

        if (requestParameters.invitationUid === null || requestParameters.invitationUid === undefined) {
            throw new runtime.RequiredError('invitationUid','Required parameter requestParameters.invitationUid was null or undefined when calling updateReviewInvitation.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling updateReviewInvitation.');
        }

        if (requestParameters.updateReviewInvitationRequest === null || requestParameters.updateReviewInvitationRequest === undefined) {
            throw new runtime.RequiredError('updateReviewInvitationRequest','Required parameter requestParameters.updateReviewInvitationRequest was null or undefined when calling updateReviewInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviewinvites/{invitationUid}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"invitationUid"}}`, encodeURIComponent(String(requestParameters.invitationUid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateReviewInvitationRequestToJSON(requestParameters.updateReviewInvitationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateReviewInvitationResponseFromJSON(jsonValue));
    }

    /**
     * Supports updating an existing review invitation. This endpoint will not create a new review invitation or trigger a new SMS/Email to be sent, it will only update the data and/or metadata for an existing review invitation. Any optional parameters which are excluded from the request will simply be ignored. 
     * Review Invitation: Update
     */
    async updateReviewInvitation(requestParameters: UpdateReviewInvitationOperationRequest): Promise<UpdateReviewInvitationResponse> {
        const response = await this.updateReviewInvitationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds the specified review labels to the specified review.
     * Review Labels: Update
     */
    async updateReviewLabelsRaw(requestParameters: UpdateReviewLabelsOperationRequest): Promise<runtime.ApiResponse<UpdateReviewLabelsResponse>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateReviewLabels.');
        }

        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling updateReviewLabels.');
        }

        if (requestParameters.v === null || requestParameters.v === undefined) {
            throw new runtime.RequiredError('v','Required parameter requestParameters.v was null or undefined when calling updateReviewLabels.');
        }

        const queryParameters: any = {};

        if (requestParameters.v !== undefined) {
            queryParameters['v'] = requestParameters.v;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = this.configuration.apiKey("api-key"); // api-key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/accounts/{accountId}/reviews/{reviewId}/labels`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateReviewLabelsRequestToJSON(requestParameters.updateReviewLabelsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateReviewLabelsResponseFromJSON(jsonValue));
    }

    /**
     * Adds the specified review labels to the specified review.
     * Review Labels: Update
     */
    async updateReviewLabels(requestParameters: UpdateReviewLabelsOperationRequest): Promise<UpdateReviewLabelsResponse> {
        const response = await this.updateReviewLabelsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListReviewInvitationsStatusEnum {
    Accepted = 'ACCEPTED',
    Rejected = 'REJECTED',
    Pending = 'PENDING'
}
/**
    * @export
    * @enum {string}
    */
export enum ListReviewInvitationsTypeEnum {
    Email = 'EMAIL',
    Sms = 'SMS'
}
/**
    * @export
    * @enum {string}
    */
export enum ListReviewsAwaitingResponseEnum {
    Review = 'REVIEW',
    Comment = 'COMMENT',
    ReviewOrComment = 'REVIEW_OR_COMMENT'
}
/**
    * @export
    * @enum {string}
    */
export enum ListReviewsStatusEnum {
    Live = 'LIVE',
    Quarantined = 'QUARANTINED',
    Removed = 'REMOVED'
}
/**
    * @export
    * @enum {string}
    */
export enum ListReviewsReviewTypeEnum {
    Rating = 'Rating',
    Recommendation = 'Recommendation'
}
/**
    * @export
    * @enum {string}
    */
export enum ListReviewsRecommendationEnum {
    Recommended = 'Recommended',
    NotRecommended = 'Not Recommended'
}
/**
    * @export
    * @enum {string}
    */
export enum ListReviewsFlagStatusEnum {
    Flagged = 'FLAGGED',
    NotFlagged = 'NOT_FLAGGED'
}
